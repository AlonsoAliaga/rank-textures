/**
 * Dear programmer:
 * When I wrote this code, only god and 
 * I knew how it worked.
 * Now, only god knows it!
 * 
 * You have been warned.
 * 
 * For more information visit: https://alonsoaliaga.com/DearProgrammer
 */
const defaultFontGradients = {
  0:{
    identifier:"default",
    colors:["#ffffff","#fce56f","#f3af61","#ee8f4d"],
  },
  1:{
    identifier:"amethyst",
    colors:["#ff0073", "#9000ff"],
  },
  2:{
    identifier:"rainbow",
    colors:["#FF0000", "#FF7F00", "#FFFF00", "#00FF00", "#0000FF", "#4B0082", "#9400D3"],
  },
  3:{
    identifier:"instagram",
    colors:["#833ab4", "#fd1d1d", "#fcb045"],
  },
}
const defaultGradients = {
  0:{
    identifier:"default",
    colors:["#ff0073", "#9000ff"],
  },
  1:{
    identifier:"rainbow",
    colors:["#FF0000", "#FF7F00", "#FFFF00", "#00FF00", "#0000FF", "#4B0082", "#9400D3"],
  },
  2:{
    identifier:"instagram",
    colors:["#833ab4", "#fd1d1d", "#fcb045"],
  },
  3:{
    identifier:"fire",
    colors:["#A10100", "#DA3604", "#FE650D", "#FFC11F", "#FFF75D"],
  },
  4:{
    identifier:"amethyst",
    colors:["#D93894","#B327BB", "#6E48AA"],
  },
  5:{
    identifier:"tiktok",
    colors:["#FF0050", "#4B0018", "#00F2EA"],
  },
  6:{
    identifier:"rose",
    colors:["#F4C4F3","#FC67FA"]
  },
  7:{
    identifier:"argon",
    colors:["#6A32AC","#423EFC"]
  },
  8:{
    identifier:"cute",
    colors:["#F80958","#67A8DD"]
  },
  9:{
    identifier:"nostalgic",
    colors:["#6D29B2","#977D14"]
  },
  10:{
    identifier:"cutev2",
    colors:["#FAB737","#E4277A"]
  },
  11:{
    identifier:"youtuber",
    colors:["#c70000","#df1616","#ff5252","#d28484","#daafaf","#c9acac"]
  },
  12:{
    identifier:"elegant",
    colors:["#a62140","#73172d"]
  }
}
let defaultFontIdentifier = "simple5x3";
const loreInput = document.getElementById('lore-input');
const loreContainer = document.getElementById('lore-container');
const chatContainer = document.getElementById('chat-container');
const tabContainer = document.getElementById('tab-container');
const nametagContainer = document.getElementById('nametag-container');
const loreText = document.getElementById('lore-text');
let isDraggingLore = false;
let isDraggingChat = false;
let offsetX, offsetY;
// 8x9
function createTag(text = "NEW!", color = "#ff0000", fontColor = "white") {
  return `<span style="display:inline-block;background:${color};color:${fontColor};border:5px solid red;font-size:8px;line-height:1;padding:0 4px;max-height:10px;overflow:hidden;border-radius:2px;font-weight:bold;">NEW!</span>`
}
const availableFonts2 = {
  "bitmap4x4": {
    //Disabled: true,
    "Name": "Bitmap 4px",
    "Height": 4,
    "A": [
        [1,1,1,1],
        [1, , ,1],
        [1,1,1,1],
        [1, , ,1]
    ],
    "B": [
        [1,1,1, ],
        [1, ,1, ],
        [1, , ,1],
        [1,1,1,1]
    ],
    "C": [
        [1,1,1,1],
        [1, , , ],
        [1, , , ],
        [1,1,1,1]
    ],
    "D": [
        [1,1,1, ],
        [1, , ,1],
        [1, , ,1],
        [1,1,1, ]
    ],
    "E": [
        [1,1,1,1],
        [1, , , ],
        [1,1, , ],
        [1,1,1,1]
    ],
    "F": [
        [1,1,1,1],
        [1, , , ],
        [1,1,1,1],
        [1, , , ]
    ],
    "G": [
        [1,1,1,1],
        [1, , , ],
        [1, , ,1],
        [1,1,1,1]
    ],
    "H": [
        [1, , ,1],
        [1, , ,1],
        [1,1,1,1],
        [1, , ,1]
    ],
    "I": [
        [1,1,1],
        [ ,1, ],
        [ ,1, ],
        [1,1,1]
    ],
    "J": [
        [ , , ,1],
        [ , , ,1],
        [ , , ,1],
        [1,1,1,1]
    ],
    "K": [
        [1, ,1,1],
        [1,1,1, ],
        [1, ,1, ],
        [1, ,1,1]
    ],
    "L": [
        [1, , , ],
        [1, , , ],
        [1, , , ],
        [1,1,1,1]
    ],
    "M": [
        [ ,1,1,1,1],
        [1, ,1, ,1],
        [1, ,1, ,1],
        [1, ,1, ,1]
    ],
    "N": [
        [1, , ,1],
        [1,1, ,1],
        [1, ,1,1],
        [1, , ,1]
    ],
    "Ñ": [
        [1,1,1,1],
        [ , , , ],
        [1,1, ,1],
        [1, ,1,1]
    ],
    "O": [
        [1,1,1,1],
        [1, , ,1],
        [1, , ,1],
        [1,1,1,1]
    ],
    "P": [
        [1,1,1,1],
        [1, , ,1],
        [1,1,1,1],
        [1, , , ]
    ],
    "Q": [
        [1,1,1,1],
        [1, , ,1],
        [1, ,1,1],
        [1,1,1,1]
    ],
    "R": [
        [1,1,1,1],
        [1, , ,1],
        [1,1,1,1],
        [1, ,1, ]
    ],
    "S": [
        [1,1,1,1],
        [1, , , ],
        [ , , ,1],
        [1,1,1,1]
    ],
    "T": [
        [1,1,1,1],
        [ , ,1, ],
        [ , ,1, ],
        [ , ,1, ]
    ],
    "U": [
        [1, , ,1],
        [1, , ,1],
        [1, , ,1],
        [1,1,1,1]
    ],
    "V": [
        [1, , ,1],
        [1, , ,1],
        [1, , ,1],
        [ ,1,1, ]
    ],
    "W": [
        [1, ,1, ,1],
        [1, ,1, ,1],
        [1, ,1, ,1],
        [ ,1,1,1,1]
    ],
    "X": [
        [1,1, ,1],
        [ , ,1, ],
        [ ,1, , ],
        [1, ,1,1]
    ],
    "Y": [
        [1, , ,1],
        [1, , ,1],
        [1,1,1,1],
        [ , ,1, ]
    ],
    "Z": [
        [1,1,1,1],
        [ , , ,1],
        [1, , , ],
        [1,1,1,1]
    ],
    "0": [
        [1,1,1],
        [1, ,1],
        [1, ,1],
        [1,1,1]
    ],
    "1": [
        [1,1],
        [ ,1],
        [ ,1],
        [ ,1]
    ],
    "2": [
        [1,1,1],
        [ , ,1],
        [1, , ],
        [1,1,1]
    ],
    "3": [
        [1,1,1,1],
        [ , , ,1],
        [ , ,1,1],
        [1,1,1,1]
    ],
    "4": [
        [1, ,1],
        [1, ,1],
        [1,1,1],
        [ , ,1]
    ],
    "5": [
        [1,1,1],
        [1, , ],
        [ , ,1],
        [1,1,1]
    ],
    "6": [
        [1,1,1],
        [1, , ],
        [1, ,1],
        [1,1,1]
    ],
    "7": [
        [1,1,1],
        [ , ,1],
        [ , ,1],
        [ , ,1]
    ],
    "8": [
        [1,1,1],
        [1, ,1],
        [1,1,1],
        [1,1,1]
    ],
    "9": [
        [1,1,1],
        [1, ,1],
        [ , ,1],
        [1,1,1]
    ],
    "+": [
        [ , , ],
        [ ,1, ],
        [1,1,1],
        [ ,1, ]
    ],
    "-": [
        [ , ],
        [ , ],
        [1,1],
        [ , ]
    ],
    "_": [
        [],
        [],
        [],
        [1,1,1]
    ],
    "(": [
        [ ,1],
        [1, ],
        [1, ],
        [ ,1]
    ],
    ")": [
        [1, ],
        [ ,1],
        [ ,1],
        [1, ]
    ],
    "{": [
        [ ,1,1],
        [1, , ],
        [ ,1, ],
        [ ,1,1]
    ],
    "}": [
        [1,1, ],
        [ , ,1],
        [ ,1, ],
        [1,1, ]
    ],
    "[": [
        [1,1],
        [1, ],
        [1, ],
        [1,1]
    ],
    "]": [
        [1,1],
        [ ,1],
        [ ,1],
        [1,1]
    ],
    "=": [
        [ , ],
        [1,1],
        [ , ],
        [1,1]
    ],
    "/": [
        [ , , ,1],
        [ , ,1, ],
        [ ,1, , ],
        [1, , , ]
    ],
    "\\": [
        [1, , , ],
        [ ,1, , ],
        [ , ,1, ],
        [ , , ,1]
    ],
    "%": [
        [1, , ,1],
        [ , ,1, ],
        [ ,1, , ],
        [1, , ,1]
    ],
    ".": [
        [ ],
        [ ],
        [ ],
        [1]
    ],
    "*": [
        [ ,1, ,1],
        [1,1,1, ],
        [ ,1,1,1],
        [1, ,1, ]
    ],
    ":": [
        [1],
        [ ],
        [1],
        [ ]
    ],
    ",": [
        [ ],
        [ ],
        [1],
        [1]
    ],
    ";": [
        [1],
        [ ],
        [1],
        [1]
    ],
    "!": [
        [1],
        [1],
        [],
        [1]
    ],
    "¡": [
        [1],
        [ ],
        [1],
        [1]
    ],
    "?": [
        [1,1,1],
        [ , ,1],
        [ , , ],
        [ ,1, ]
    ],
    "¿": [
        [ ,1, ],
        [ , , ],
        [1, , ],
        [1,1,1]
    ],
    '"':[
        [1, ,1],
        [1, ,1],
        [],
        [],
        []
    ],
    "<": [
        [ , ],
        [ ,1],
        [1, ],
        [ ,1]
    ],
    ">": [
        [ , ],
        [1, ],
        [ ,1],
        [1, ]
    ],
    '\'':[
        [1],
        [1],
        [],
        []
    ],
    "°": [
        [ ,1, ],
        [1, ,1],
        [ ,1, ],
        [ , , ]
    ],
    "|": [
        [1],
        [1],
        [1],
        [1]
    ],
    "♥": [
        [ ,1, ,1],
        [1,1,1,1,1],
        [ ,1,1,1, ],
        [ , ,1, , ]
    ],
    "#": [
      [ ,1, ,1],
      [1, ,1, ,1],
      [1, ,1, ,1],
      [ ,1, ,1]
    ],
    "^": [
      [ ,1],
      [1, ,1],
      [ , , ],
      [ , , ]
    ],
    " ": [
        [ , ],
        [ , ],
        [ , ],
        [ , ],
        [ , ]
    ],
    "@": [
        [],
        [],
        [],
        [],
        []
    ]
  },
  "simple5x3": {
    Tier: 1,
    "Name": "Simple 5px",
    "Height": 5,
    "A": [
        [1,1,1],
        [1, ,1],
        [1,1,1],
        [1, ,1],
        [1, ,1]
    ],
    "B": [
        [1,1,1],
        [1, ,1],
        [1,1, ],
        [1, ,1],
        [1,1,1]
    ],
    "C": [
        [1,1,1],
        [1, , ],
        [1, , ],
        [1, , ],
        [1,1,1]
    ],
    "D": [
        [1,1],
        [1, ,1],
        [1, ,1],
        [1, ,1],
        [1,1]
    ],
    "E": [
        [1,1,1],
        [1],
        [1,1],
        [1],
        [1,1,1]
    ],
    "F": [
        [1,1,1],
        [1],
        [1,1],
        [1],
        [1]
    ],
    "G": [
        [1,1,1],
        [1],
        [1, ,1],
        [1, ,1],
        [1,1,1]
    ],
    "H": [
        [1, ,1],
        [1, ,1],
        [1,1,1],
        [1, ,1],
        [1, ,1]
    ],
    "I": [
        [1,1,1],
        [ ,1],
        [ ,1],
        [ ,1],
        [1,1,1]
    ],
    "J": [
        [ , ,1],
        [ , ,1],
        [ , ,1],
        [ , ,1],
        [1,1,1]
    ],
    "K": [
        [1, ,1],
        [1, ,1],
        [1,1, ],
        [1, ,1],
        [1, ,1]
    ],
    "L": [
        [1],
        [1],
        [1],
        [1],
        [1,1,1]
    ],
    "M": [
        [1,1,1,1,1],
        [1, ,1, ,1],
        [1, , , ,1],
        [1, , , ,1],
        [1, , , ,1]
    ],
    "N": [
        [1,1,1],
        [1, ,1],
        [1, ,1],
        [1, ,1],
        [1, ,1]
    ],
    "Ñ": [
        [1,1,1],
        [ , , ],
        [1,1,1],
        [1, ,1],
        [1, ,1]
    ],
    "O": [
        [1,1,1],
        [1, ,1],
        [1, ,1],
        [1, ,1],
        [1,1,1]
    ],
    "P": [
        [1,1],
        [1, ,1],
        [1,1],
        [1],
        [1]
    ],
    "Q": [
        [1,1,1],
        [1, ,1],
        [1, ,1],
        [1,1,1],
        [ ,1, ]
    ],
    "R": [
        [1,1,1],
        [1, ,1],
        [1,1, ],
        [1, ,1],
        [1, ,1]
    ],
    "S": [
        [1,1,1],
        [1, , ],
        [1,1,1],
        [ , ,1],
        [1,1,1]
    ],
    "T": [
        [1,1,1],
        [ ,1],
        [ ,1],
        [ ,1],
        [ ,1]
    ],
    "U": [
        [1, ,1],
        [1, ,1],
        [1, ,1],
        [1, ,1],
        [1,1,1]
    ],
    "V": [
        [1, ,1],
        [1, ,1],
        [1, ,1],
        [1, ,1],
        [ ,1, ]
    ],
    "W": [
        [1, ,1, ,1],
        [1, ,1, ,1],
        [1, ,1, ,1],
        [1, ,1, ,1],
        [1,1,1,1,1]
    ],
    "X": [
        [1, ,1],
        [1, ,1],
        [ ,1, ],
        [1, ,1],
        [1, ,1]
    ],
    "Y": [
        [1, ,1],
        [1, ,1],
        [1,1,1],
        [ ,1],
        [ ,1]
    ],
    "Z": [
        [1,1,1],
        [ , ,1],
        [ ,1, ],
        [1, , ],
        [1,1,1]
    ],
    "0": [
        [1,1,1],
        [1, ,1],
        [1, ,1],
        [1, ,1],
        [1,1,1]
    ],
    "1": [
        [1,1],
        [ ,1],
        [ ,1],
        [ ,1],
        [1,1,1]
    ],
    "2": [
        [1,1,1],
        [ , ,1],
        [1,1,1],
        [1, , ],
        [1,1,1]
    ],
    "3": [
        [1,1,1],
        [ , ,1],
        [1,1,1],
        [ , ,1],
        [1,1,1]
    ],
    "4": [
        [1, ,1],
        [1, ,1],
        [1,1,1],
        [ , ,1],
        [ , ,1]
    ],
    "5": [
        [1,1,1],
        [1],
        [1,1,1],
        [ , ,1],
        [1,1,1]
    ],
    "6": [
        [1,1,1],
        [1,],
        [1,1,1],
        [1, ,1],
        [1,1,1]
    ],
    "7": [
        [1,1,1],
        [ , ,1],
        [ , ,1],
        [ , ,1],
        [ , ,1]
    ],
    "8": [
      [1,1,1],
      [1, ,1],
      [1,1,1],
      [1, ,1],
      [1,1,1]
    ],
    "9": [
        [1,1,1],
        [1, ,1],
        [1,1,1],
        [ , ,1],
        [1,1,1]
    ],
    "+": [
        [ , , ],
        [ ,1, ],
        [1,1,1],
        [ ,1, ],
        [ , , ]
    ],
    "-": [
        [],
        [],
        [1,1,1],
        [],
        []
    ],
    "_": [
        [],
        [],
        [],
        [],
        [1,1,1]
    ],
    "(": [
        [ ,1],
        [1],
        [1],
        [1],
        [ ,1]
    ],
    ")": [
        [1],
        [ ,1],
        [ ,1],
        [ ,1],
        [1]
    ],
    "{": [
        [ ,1,1],
        [ ,1],
        [1,1],
        [ ,1],
        [ ,1,1]
    ],
    "}": [
        [1,1],
        [ ,1],
        [ ,1,1],
        [ ,1],
        [1,1]
    ],
    "[": [
        [1,1],
        [1],
        [1],
        [1],
        [1,1]
    ],
    "]": [
        [1,1],
        [ ,1],
        [ ,1],
        [ ,1],
        [1,1]
    ],
    "=": [
        [],
        [1,1,1],
        [],
        [1,1,1],
        []
    ],
    "/": [
        [ , ,1],
        [ , ,1],
        [ ,1, ],
        [1, , ],
        [1, , ]
    ],
    "\\": [
        [1],
        [1],
        [ ,1],
        [ , ,1],
        [ , ,1]
    ],
    "%": [
      [1, ,1],
      [ , ,1],
      [ ,1, ],
      [1, , ],
      [1, ,1]
    ],
    ".": [
        [],
        [],
        [],
        [],
        [1]
    ],
    "*": [
        [1, ,1],
        [ ,1],
        [1, ,1],
        [],
        []
    ],
    ":": [
        [],
        [1],
        [],
        [1],
        []
    ],
    ",": [
        [],
        [],
        [],
        [1],
        [1]
    ],
    ";": [
        [],
        [1],
        [],
        [1],
        [1]
    ],
    "!": [
        [1],
        [1],
        [1],
        [],
        [1]
    ],
    "¡": [
        [1],
        [],
        [1],
        [1],
        [1]
    ],
    "?": [
        [1,1,1],
        [ , ,1],
        [ ,1,1],
        [ , , ],
        [ ,1, ]
    ],
    "¿": [
        [ ,1, ],
        [ , , ],
        [1,1, ],
        [1, , ],
        [1,1,1]
    ],
    '"':[
        [1, ,1],
        [1, ,1],
        [],
        [],
        []
    ],
    "<": [
        [ , ,1],
        [ ,1],
        [1],
        [ ,1],
        [ , ,1]
    ],
    ">": [
        [1],
        [ ,1],
        [ , ,1],
        [ ,1],
        [1]
    ],
    '\'':[
        [1],
        [1],
        [],
        [],
        []
    ],
    "°": [
        [ ,1, ],
        [1, ,1],
        [ ,1, ],
        [],
        []
    ],
    "|": [
        [1],
        [1],
        [1],
        [1],
        [1]
    ],
    "♥": [
        [ ,1, ,1],
        [1,1,1,1,1],
        [1,1,1,1,1],
        [ ,1,1,1],
        [ , ,1]
    ],
    "#": [
      [ ,1, ,1],
      [1,1,1,1,1],
      [ ,1, ,1],
      [1,1,1,1,1],
      [ ,1, ,1]
    ],
    "^": [
      [ ,1],
      [1, ,1],
      [],
      [],
      []
    ],
    " ": [
        [ , ],
        [ , ],
        [ , ],
        [ , ],
        [ , ]
    ],
    "@": [
        [],
        [],
        [],
        [],
        []
    ]
  },
  "simplev25x3": {
    Tier: 2,
    "Name": `Simple v2 5px`,
    "Height": 5,
    "A": [
        [1,1,1],
        [1, ,1],
        [1,1,1],
        [1, ,1],
        [1, ,1]
    ],
    "B": [
        [1,1,1],
        [1, ,1],
        [1,1, ],
        [1, ,1],
        [1,1,1]
    ],
    "C": [
        [1,1,1],
        [1, , ],
        [1, , ],
        [1, , ],
        [1,1,1]
    ],
    "D": [
        [1,1],
        [1, ,1],
        [1, ,1],
        [1, ,1],
        [1,1]
    ],
    "E": [
        [1,1,1],
        [1],
        [1,1,1],
        [1],
        [1,1,1]
    ],
    "F": [
        [1,1,1],
        [1, , ],
        [1,1, ],
        [1, , ],
        [1, , ]
    ],
    "G": [
        [1,1,1],
        [1, , ],
        [1, ,1],
        [1, ,1],
        [1,1,1]
    ],
    "H": [
        [1, ,1],
        [1, ,1],
        [1,1,1],
        [1, ,1],
        [1, ,1]
    ],
    "I": [
        [1],
        [1],
        [1],
        [1],
        [1]
    ],
    "J": [
        [ , ,1],
        [ , ,1],
        [ , ,1],
        [ , ,1],
        [1,1,1]
    ],
    "K": [
        [1, ,1],
        [1, ,1],
        [1,1, ],
        [1, ,1],
        [1, ,1]
    ],
    "L": [
        [1, , ],
        [1, , ],
        [1, , ],
        [1, , ],
        [1,1,1]
    ],
    "M": [
        [1,1, ,1,1],
        [1, ,1, ,1],
        [1, , , ,1],
        [1, , , ,1],
        [1, , , ,1]
    ],
    "N": [
        [1,1,1],
        [1, ,1],
        [1, ,1],
        [1, ,1],
        [1, ,1]
    ],
    "Ñ": [
        [1,1,1],
        [ , , ],
        [1,1,1],
        [1, ,1],
        [1, ,1]
    ],
    "O": [
        [1,1,1],
        [1, ,1],
        [1, ,1],
        [1, ,1],
        [1,1,1]
    ],
    "P": [
        [1,1,1],
        [1, ,1],
        [1,1,1],
        [1],
        [1]
    ],
    "Q": [
        [1,1,1],
        [1, ,1],
        [1, ,1],
        [1,1,1],
        [ ,1, ]
    ],
    "R": [
        [1,1,1],
        [1, ,1],
        [1,1, ],
        [1, ,1],
        [1, ,1]
    ],
    "S": [
        [1,1,1],
        [1, , ],
        [1,1,1],
        [ , ,1],
        [1,1,1]
    ],
    "T": [
        [1,1,1],
        [ ,1, ],
        [ ,1, ],
        [ ,1, ],
        [ ,1, ]
    ],
    "U": [
        [1, ,1],
        [1, ,1],
        [1, ,1],
        [1, ,1],
        [1,1,1]
    ],
    "V": [
        [1, ,1],
        [1, ,1],
        [1, ,1],
        [1, ,1],
        [ ,1, ]
    ],
    "W": [
        [1, , , ,1],
        [1, , , ,1],
        [1, ,1, ,1],
        [1, ,1, ,1],
        [1,1, ,1,1]
    ],
    "X": [
        [1, ,1],
        [1, ,1],
        [ ,1, ],
        [1, ,1],
        [1, ,1]
    ],
    "Y": [
        [1, ,1],
        [1, ,1],
        [1,1,1],
        [ , ,1],
        [1,1,1]
    ],
    "Z": [
        [1,1,1],
        [ , ,1],
        [ ,1, ],
        [1, , ],
        [1,1,1]
    ],
    "0": [
        [1,1,1],
        [1, ,1],
        [1, ,1],
        [1, ,1],
        [1,1,1]
    ],
    "1": [
        [1,1],
        [ ,1],
        [ ,1],
        [ ,1],
        [ ,1]
    ],
    "2": [
        [1,1,1],
        [ , ,1],
        [1,1,1],
        [1, , ],
        [1,1,1]
    ],
    "3": [
        [1,1,1],
        [ , ,1],
        [1,1,1],
        [ , ,1],
        [1,1,1]
    ],
    "4": [
        [1, , ],
        [1, ,1],
        [1, ,1],
        [1,1,1],
        [ , ,1]
    ],
    "5": [
        [1,1,1],
        [1],
        [1,1,1],
        [ , ,1],
        [1,1,1]
    ],
    "6": [
        [1,1,1],
        [1,],
        [1,1,1],
        [1, ,1],
        [1,1,1]
    ],
    "7": [
        [1,1,1],
        [ , ,1],
        [ , ,1],
        [ , ,1],
        [ , ,1]
    ],
    "8": [
      [1,1,1],
      [1, ,1],
      [1,1,1],
      [1, ,1],
      [1,1,1]
    ],
    "9": [
        [1,1,1],
        [1, ,1],
        [1,1,1],
        [ , ,1],
        [1,1,1]
    ],
    "+": [
        [ , , ],
        [ ,1, ],
        [1,1,1],
        [ ,1, ],
        [ , , ]
    ],
    "-": [
        [],
        [],
        [1,1,1],
        [],
        []
    ],
    "_": [
        [],
        [],
        [],
        [],
        [1,1,1]
    ],
    "(": [
        [ ,1],
        [1],
        [1],
        [1],
        [ ,1]
    ],
    ")": [
        [1],
        [ ,1],
        [ ,1],
        [ ,1],
        [1]
    ],
    "{": [
        [ ,1,1],
        [ ,1],
        [1,1],
        [ ,1],
        [ ,1,1]
    ],
    "}": [
        [1,1],
        [ ,1],
        [ ,1,1],
        [ ,1],
        [1,1]
    ],
    "[": [
        [1,1],
        [1],
        [1],
        [1],
        [1,1]
    ],
    "]": [
        [1,1],
        [ ,1],
        [ ,1],
        [ ,1],
        [1,1]
    ],
    "=": [
        [],
        [1,1,1],
        [],
        [1,1,1],
        []
    ],
    "/": [
        [ , ,1],
        [ , ,1],
        [ ,1, ],
        [1, , ],
        [1, , ]
    ],
    "\\": [
        [1],
        [1],
        [ ,1],
        [ , ,1],
        [ , ,1]
    ],
    "%": [
      [1, ,1],
      [ , ,1],
      [ ,1, ],
      [1, , ],
      [1, ,1]
    ],
    ".": [
        [],
        [],
        [],
        [],
        [1]
    ],
    "*": [
        [1, ,1],
        [ ,1],
        [1, ,1],
        [],
        []
    ],
    ":": [
        [],
        [1],
        [],
        [1],
        []
    ],
    ",": [
        [],
        [],
        [],
        [1],
        [1]
    ],
    ";": [
        [],
        [1],
        [],
        [1],
        [1]
    ],
    "!": [
        [1],
        [1],
        [1],
        [],
        [1]
    ],
    "¡": [
        [1],
        [],
        [1],
        [1],
        [1]
    ],
    "?": [
        [1,1,1],
        [ , ,1],
        [ ,1,1],
        [ , , ],
        [ ,1, ]
    ],
    "¿": [
        [ ,1, ],
        [ , , ],
        [1,1, ],
        [1, , ],
        [1,1,1]
    ],
    '"':[
        [1, ,1],
        [1, ,1],
        [],
        [],
        []
    ],
    "<": [
        [ , ,1],
        [ ,1],
        [1],
        [ ,1],
        [ , ,1]
    ],
    ">": [
        [1],
        [ ,1],
        [ , ,1],
        [ ,1],
        [1]
    ],
    '\'':[
        [1],
        [1],
        [],
        [],
        []
    ],
    "°": [
        [ ,1, ],
        [1, ,1],
        [ ,1, ],
        [],
        []
    ],
    "|": [
        [1],
        [1],
        [1],
        [1],
        [1]
    ],
    "♥": [
        [ ,1,1, ,1,1, ],
        [1,1,1,1,1,1,1],
        [ ,1,1,1,1,1, ],
        [ , ,1,1,1, , ],
        [ , , ,1, , , ]
    ],
    "#": [
      [ ,1, ,1],
      [1,1,1,1,1],
      [ ,1, ,1],
      [1,1,1,1,1],
      [ ,1, ,1]
    ],
    "^": [
      [ ,1],
      [1, ,1],
      [],
      [],
      []
    ],
    " ": [
        [ , ],
        [ , ],
        [ , ],
        [ , ],
        [ , ]
    ],
    "@": [
        [],
        [],
        [],
        [],
        []
    ]
  },
  "weird5x4": {
    //Disabled: true,
    "Name": "Weird 5px",
    "Height": 5,
    "A": [
        [ ,1,1,1],
        [1,1,1,1],
        [1,1, ,1],
        [1,1,1,1],
        [1,1, ,1]
    ],
    "B": [
        [1,1,1, ],
        [1, ,1, ],
        [1,1,1,1],
        [1,1, ,1],
        [1,1,1,1]
    ],
    "C": [
        [ ,1,1,1],
        [1, ,1,1],
        [1, , , ],
        [1, ,1,1],
        [1,1,1,1]
    ],
    "D": [
        [1,1,1, ],
        [1,1,1,1],
        [1, ,1,1],
        [1, ,1,1],
        [1,1,1, ]
    ],
    "E": [
        [ ,1,1,1],
        [1, , , ],
        [1,1,1,1],
        [1,1, , ],
        [1,1,1,1]
    ],
    "F": [
      [ ,1,1,1],
      [1, , , ],
      [1,1,1, ],
      [1,1, , ],
      [1,1, , ]
    ],
    "G": [
        [ ,1,1,1,1],
        [1,1, , ],
        [1,1, ,1],
        [1,1,1,1],
        [ ,1,1,1]
    ],
    "H": [
        [1,1, ,1],
        [1,1, ,1],
        [1,1, ,1],
        [1,1,1,1],
        [1,1, ,1]
    ],
    "I": [
        [1,1,1,1],
        [ ,1,1, ],
        [ ,1,1, ],
        [ ,1,1, ],
        [1,1,1,1]
    ],
    "J": [
        [1,1,1,1],
        [ , ,1,1],
        [ , ,1,1],
        [ , ,1,1],
        [1,1,1, ]
    ],
    "K": [
        [1, ,1,1],
        [1,1,1, ],
        [1,1,1,1],
        [1, ,1,1],
        [1, ,1,1]
    ],
    "L": [
        [1,1, , ],
        [1,1, , ],
        [1,1, , ],
        [1,1, , ],
        [1,1,1,1]
    ],
    "M": [
        [1,1, ,1, ],
        [1,1,1,1,1],
        [1,1,1, ,1],
        [1,1,1, ,1],
        [1, ,1, ,1]
    ],
    "N": [
        [1, , ,1],
        [1,1, ,1],
        [1,1,1,1],
        [1,1,1,1],
        [1, ,1,1]
    ],
    "Ñ": [
        [1,1,1,1],
        [ , , , ],
        [1,1, ,1],
        [1,1,1,1],
        [1, ,1,1]
    ],
    "O": [
        [1,1,1,1],
        [1,1,1,1],
        [1,1, ,1],
        [1,1, ,1],
        [1,1,1,1]
    ],
    "P": [
        [1,1,1, ],
        [1,1,1,1],
        [1,1, ,1],
        [1,1,1, ],
        [1,1, , ]
    ],
    "Q": [
        [ ,1,1, ],
        [1,1,1,1],
        [1, ,1,1],
        [1, ,1, ],
        [ ,1,1,1]
    ],
    "R": [
        [1,1,1, ],
        [1, ,1,1],
        [1,1,1, ],
        [1,1,1,1],
        [1,1, ,1]
    ],
    "S": [
        [ ,1,1,1],
        [1,1, , ],
        [1,1,1,1],
        [ ,1,1,1],
        [1,1,1, ]
    ],
    "T": [
        [1,1,1,1],
        [ ,1,1, ],
        [ ,1,1, ],
        [ ,1,1, ],
        [ ,1,1, ]
    ],
    "U": [
        [1, ,1,1],
        [1, ,1,1],
        [1, ,1,1],
        [1, ,1,1],
        [1,1,1, ]
    ],
    "V": [
        [1,1, ,1],
        [1,1, ,1],
        [1,1, ,1],
        [1,1, ,1],
        [1,1,1, ]
    ],
    "W": [
        [1, ,1, ,1],
        [1,1,1,1,1],
        [1,1,1,1,1],
        [1,1,1,1,1],
        [ ,1, ,1, ]
    ],
    "X": [
        [1,1, ,1],
        [ ,1,1,1],
        [1,1,1, ],
        [1, ,1,1],
        [1, ,1,1]
    ],
    "Y": [
        [1,1, ,1],
        [1,1,1,1],
        [ , ,1,1],
        [1,1,1,1],
        [1,1,1, ]
    ],
    "Z": [
        [ ,1,1,1],
        [ , , ,1],
        [1,1,1,1],
        [1,1, , ],
        [1,1,1,1]
    ],
    "0": [
        [1,1,1,1],
        [1,1,1,1],
        [1, ,1,1],
        [1, ,1,1],
        [1,1,1,1]
    ],
    "1": [
        [1,1,1],
        [ ,1,1],
        [ ,1,1],
        [ ,1,1],
        [ ,1,1]
    ],
    "2": [
        [1,1,1, ],
        [ , ,1,1],
        [ ,1,1,1],
        [1,1,1, ],
        [1,1,1,1]
    ],
    "3": [
        [1,1,1, ],
        [ , ,1, ],
        [ ,1,1,1],
        [ , ,1,1],
        [1,1,1,1]
    ],
    "4": [
        [ , ,1,1],
        [1, ,1,1],
        [1,1,1,1],
        [1,1,1,1],
        [ , ,1,1]
    ],
    "5": [
        [1,1,1,1],
        [1,1, , ],
        [1,1,1,1],
        [ ,1,1,1],
        [1,1,1, ]
    ],
    "6": [
        [1,1,1,1],
        [1,1, , ],
        [1,1,1,1],
        [1, ,1,1],
        [1,1,1,1]
    ],
    "7": [
        [1,1,1,1],
        [ , ,1,1],
        [ ,1,1, ],
        [1,1, , ],
        [1,1, , ]
    ],
    "8": [
        [ ,1,1,1],
        [1,1, ,1],
        [1,1,1,1],
        [1, ,1,1],
        [1,1,1,1]
    ],
    "9": [
        [1,1,1,1],
        [1,1, ,1],
        [1,1,1,1],
        [1,1,1,1],
        [ , ,1,1]
    ],
    "+": [
        [ , , ],
        [ ,1, ],
        [1,1,1],
        [ ,1, ],
        [ , , ]
    ],
    "-": [
        [ , , ],
        [ , , ],
        [1,1,1],
        [ , , ],
        [ , , ]
    ],
    "_": [
        [],
        [],
        [],
        [],
        [1,1,1,1,1]
    ],
    "(": [
        [ ,1,1],
        [1,1, ],
        [1,1, ],
        [1,1, ],
        [ ,1,1]
    ],
    ")": [
        [1,1],
        [ ,1,1],
        [ ,1,1],
        [ ,1,1],
        [1,1]
    ],
    "{": [
        [ ,1,1],
        [ ,1, ],
        [1,1, ],
        [ ,1, ],
        [ ,1,1]
    ],
    "}": [
        [1,1, ],
        [ ,1, ],
        [ ,1,1],
        [ ,1, ],
        [1,1, ]
    ],
    "[": [
        [1,1,1],
        [1,1, ],
        [1,1, ],
        [1,1, ],
        [1,1,1]
    ],
    "]": [
        [1,1,1],
        [ ,1,1],
        [ ,1,1],
        [ ,1,1],
        [1,1,1]
    ],
    "=": [
        [],
        [1,1,1],
        [],
        [1,1,1],
        []
    ],
    "/": [
        [ , , , ,1],
        [ , , ,1],
        [ , ,1],
        [ ,1],
        [1]
    ],
    "\\": [
        [1],
        [ ,1],
        [ , ,1],
        [ , , ,1],
        [ , , , ,1]
    ],
    "%": [
        [1, , , ,1],
        [ , , ,1],
        [ , ,1],
        [ ,1],
        [1, , , ,1]
    ],
    ".": [
        [],
        [],
        [],
        [],
        [1]
    ],
    "*": [
        [1, ,1],
        [ ,1],
        [1, ,1],
        [],
        []
    ],
    ":": [
        [],
        [1],
        [],
        [1],
        []
    ],
    ",": [
        [ , ],
        [ , ],
        [ , ],
        [ ,1],
        [1,1]
    ],
    ";": [
        [],
        [1],
        [],
        [1],
        [1]
    ],
    "!": [
        [1],
        [1],
        [1],
        [],
        [1]
    ],
    "¡": [
        [1],
        [],
        [1],
        [1],
        [1]
    ],
    "?": [
        [1,1,1,1],
        [ , ,1,1],
        [ ,1,1, ],
        [ , , , ],
        [1, , , ]
    ],
    "¿": [
        [ , , ,1],
        [ , , , ],
        [ ,1,1, ],
        [1,1, , ],
        [1,1,1,1]
    ],
    '"':[
        [1, ,1],
        [1, ,1],
        [],
        [],
        []
    ],
    "<": [
        [ , ,1],
        [ ,1],
        [1],
        [ ,1],
        [ , ,1]
    ],
    ">": [
        [1],
        [ ,1],
        [ , ,1],
        [ ,1],
        [1]
    ],
    '\'':[
        [1],
        [1],
        [],
        [],
        []
    ],
    "°": [
        [ ,1, ],
        [1, ,1],
        [ ,1, ],
        [],
        []
    ],
    "|": [
        [1],
        [1],
        [1],
        [1],
        [1]
    ],
    "♥": [
        [ ,1, ,1],
        [1,1,1,1,1],
        [1,1,1,1,1],
        [ ,1,1,1],
        [ , ,1]
    ],
    "#": [
      [ ,1, ,1],
      [1,1,1,1,1],
      [ ,1, ,1],
      [1,1,1,1,1],
      [ ,1, ,1]
    ],
    "^": [
      [ ,1],
      [1, ,1],
      [],
      [],
      []
    ],
    " ": [
        [ , ],
        [ , ],
        [ , ],
        [ , ],
        [ , ]
    ],
    "@": [
        [],
        [],
        [],
        [],
        []
    ]
  },
  "rounded5x5": {
    Tier: 1,
    "Name": "Rounded 5px",
    "Height": 5,
    "A": [
        [ ,1,1,1],
        [1, , , ,1],
        [1, , , ,1],
        [1,1,1,1,1],
        [1, , , ,1]
    ],
    "B": [
        [1,1,1,1],
        [1, , , ,1],
        [1,1,1,1],
        [1, , , ,1],
        [1,1,1,1]
    ],
    "C": [
        [ ,1,1,1],
        [1, , , ,1],
        [1],
        [1, , , ,1],
        [ ,1,1,1]
    ],
    "D": [
        [1,1,1,1],
        [1, , , ,1],
        [1, , , ,1],
        [1, , , ,1],
        [1,1,1,1]
    ],
    "E": [
        [1,1,1,1,1],
        [1],
        [1,1,1,1],
        [1],
        [1,1,1,1,1]
    ],
    "F": [
        [1,1,1,1,1],
        [1],
        [1,1,1,1],
        [1],
        [1]
    ],
    "G": [
        [ ,1,1,1,1],
        [1],
        [1, ,1,1,1],
        [1, , , ,1],
        [ ,1,1,1, ]
    ],
    "H": [
        [1, , , ,1],
        [1, , , ,1],
        [1,1,1,1,1],
        [1, , , ,1],
        [1, , , ,1]
    ],
    "I": [
        [1,1,1,1,1],
        [ , ,1],
        [ , ,1],
        [ , ,1],
        [1,1,1,1,1]
    ],
    "J": [
        [1,1,1,1,1],
        [ , , , ,1],
        [ , , , ,1],
        [1, , , ,1],
        [1,1,1,1,1]
    ],
    "K": [
        [1, , , ,1],
        [1, , ,1],
        [1,1,1],
        [1, , ,1],
        [1, , , ,1]
    ],
    "L": [
        [1],
        [1],
        [1],
        [1],
        [1,1,1,1,1]
    ],
    "M": [
        [1, , , ,1],
        [1,1, ,1,1],
        [1, ,1, ,1],
        [1, , , ,1],
        [1, , , ,1]
    ],
    "N": [
        [1, , , ,1],
        [1,1, , ,1],
        [1, ,1, ,1],
        [1, , ,1,1],
        [1, , , ,1]
    ],
    "Ñ": [
        [1,1,1,1,1],
        [ , , , , ],
        [1,1, , ,1],
        [1, ,1, ,1],
        [1, , ,1,1]
    ],
    "O": [
        [ ,1,1,1],
        [1, , , ,1],
        [1, , , ,1],
        [1, , , ,1],
        [ ,1,1,1]
    ],
    "P": [
        [1,1,1,1],
        [1, , , ,1],
        [1,1,1,1],
        [1],
        [1]
    ],
    "Q": [
        [ ,1,1,1],
        [1, , , ,1],
        [1, , , ,1],
        [1, , ,1, ],
        [ ,1,1, ,1]
    ],
    "R": [
        [1,1,1,1],
        [1, , , ,1],
        [1,1,1,1],
        [1, , , ,1],
        [1, , , ,1]
    ],
    "S": [
        [ ,1,1,1,1],
        [1],
        [ ,1,1,1],
        [ , , , ,1],
        [1,1,1,1]
    ],
    "T": [
        [1,1,1,1,1],
        [ , ,1],
        [ , ,1],
        [ , ,1],
        [ , ,1]
    ],
    "U": [
        [1, , , ,1],
        [1, , , ,1],
        [1, , , ,1],
        [1, , , ,1],
        [ ,1,1,1]
    ],
    "V": [
        [1, , , ,1],
        [1, , , ,1],
        [1, , , ,1],
        [ ,1, ,1],
        [ , ,1]
    ],
    "W": [
        [1, , , ,1],
        [1, , , ,1],
        [1, , , ,1],
        [1, ,1, ,1],
        [ ,1, ,1, ]
    ],
    "X": [
        [1, , , ,1],
        [ ,1, ,1],
        [ , ,1],
        [ ,1, ,1],
        [1, , , ,1]
    ],
    "Y": [
        [1, , , ,1],
        [ ,1, ,1],
        [ , ,1],
        [ , ,1],
        [ , ,1]
    ],
    "Z": [
        [1,1,1,1,1],
        [ , , ,1],
        [ , ,1],
        [,1],
        [1,1,1,1,1]
    ],
    "0": [
        [ ,1,1,1, ],
        [1, , , ,1],
        [1, , , ,1],
        [1, , , ,1],
        [ ,1,1,1, ]
    ],
    "1": [
        [1,1,1],
        [ , ,1],
        [ , ,1],
        [ , ,1],
        [1,1,1,1,1]
    ],
    "2": [
        [ ,1,1,1, ],
        [1, , , ,1],
        [ , , ,1],
        [ , ,1],
        [1,1,1,1,1]
    ],
    "3": [
        [ ,1,1,1],
        [1, , , ,1],
        [ , ,1,1, ],
        [1, , , ,1],
        [ ,1,1,1]
    ],
    "4": [
        [1, , , ,1],
        [1, , , ,1],
        [1,1,1,1,1],
        [ , , , ,1],
        [ , , , ,1]
    ],
    "5": [
        [1,1,1,1,1],
        [1],
        [1,1,1,1, ],
        [ , , , ,1],
        [1,1,1,1]
    ],
    "6": [
        [ ,1,1,1,1],
        [1,],
        [1,1,1,1],
        [1, , , ,1],
        [ ,1,1,1]
    ],
    "7": [
        [1,1,1,1,1],
        [ , , , ,1],
        [ , , ,1],
        [ , ,1],
        [ , ,1]
    ],
    "8": [
      [ ,1,1,1],
      [1, , , ,1],
      [ ,1,1,1],
      [1, , , ,1],
      [ ,1,1,1]
    ],
    "9": [
        [ ,1,1,1, ],
        [1, , , ,1],
        [ ,1,1,1,1],
        [ , , , ,1],
        [ ,1,1,1, ]
    ],
    "+": [
        [ , ,1],
        [ , ,1],
        [1,1,1,1,1],
        [ , ,1],
        [ , ,1]
    ],
    /*
    "+": [
        [],
        [ ,1],
        [1,1,1],
        [ ,1],
        []
    ],
    */
    "-": [
        [],
        [],
        [1,1,1,1,1],
        [],
        []
    ],
    "_": [
        [],
        [],
        [],
        [],
        [1,1,1,1,1]
    ],
    "(": [
        [ ,1],
        [1],
        [1],
        [1],
        [ ,1]
    ],
    ")": [
        [1],
        [ ,1],
        [ ,1],
        [ ,1],
        [1]
    ],
    "{": [
        [ ,1,1],
        [ ,1],
        [1],
        [ ,1],
        [ ,1,1]
    ],
    "}": [
        [1,1],
        [ ,1],
        [ , ,1],
        [ ,1],
        [1,1]
    ],
    "[": [
        [1,1],
        [1],
        [1],
        [1],
        [1,1]
    ],
    "]": [
        [1,1],
        [ ,1],
        [ ,1],
        [ ,1],
        [1,1]
    ],
    "=": [
        [],
        [1,1,1,1,1],
        [],
        [1,1,1,1,1],
        []
    ],
    "/": [
        [ , , , ,1],
        [ , , ,1],
        [ , ,1],
        [ ,1],
        [1]
    ],
    "\\": [
        [1],
        [ ,1],
        [ , ,1],
        [ , , ,1],
        [ , , , ,1]
    ],
    "%": [
        [1, , , ,1],
        [ , , ,1],
        [ , ,1],
        [ ,1],
        [1, , , ,1]
    ],
    ".": [
        [],
        [],
        [],
        [],
        [1]
    ],
    "*": [
        [1, ,1],
        [ ,1],
        [1, ,1],
        [],
        []
    ],
    ":": [
        [],
        [1],
        [],
        [1],
        []
    ],
    ",": [
        [],
        [],
        [],
        [1],
        [1]
    ],
    ";": [
        [],
        [1],
        [],
        [1],
        [1]
    ],
    "!": [
        [1],
        [1],
        [1],
        [],
        [1]
    ],
    "¡": [
        [1],
        [],
        [1],
        [1],
        [1]
    ],
    "?": [
        [ ,1,1,1],
        [1, , , ,1],
        [ , ,1,1],
        [],
        [ , ,1]
    ],
    "¿": [
        [ , ,1],
        [],
        [ ,1,1],
        [1, , , ,1],
        [ ,1,1,1]
    ],
    '"':[
        [1, ,1],
        [1, ,1],
        [],
        [],
        []
    ],
    "<": [
        [ , ,1],
        [ ,1],
        [1],
        [ ,1],
        [ , ,1]
    ],
    ">": [
        [1],
        [ ,1],
        [ , ,1],
        [ ,1],
        [1]
    ],
    '\'':[
        [1],
        [1],
        [],
        [],
        []
    ],
    "°": [
        [1,1,1],
        [1, ,1],
        [1,1,1],
        [],
        []
    ],
    "|": [
        [1],
        [1],
        [1],
        [1],
        [1]
    ],
    "♥": [
        [ ,1, ,1],
        [1,1,1,1,1],
        [1,1,1,1,1],
        [ ,1,1,1],
        [ , ,1]
    ],
    "#": [
      [ ,1, ,1],
      [1,1,1,1,1],
      [ ,1, ,1],
      [1,1,1,1,1],
      [ ,1, ,1]
    ],
    "^": [
      [ ,1],
      [1, ,1],
      [],
      [],
      []
    ],
    " ": [
        [ , , ],
        [ , , ],
        [ , , ],
        [ , , ],
        [ , , ]
    ],
    "@": [
        [],
        [],
        [],
        [],
        []
    ]
  },
  "squared5x5": {
    Tier: 2,
    "Name": "Squared 5px",
    "Height": 5,
    "A": [
        [1,1,1,1,1],
        [1, , , ,1],
        [1, , , ,1],
        [1,1,1,1,1],
        [1, , , ,1]
    ],
    "B": [
        [1,1,1,1],
        [1, , , ,1],
        [1,1,1,1],
        [1, , , ,1],
        [1,1,1,1]
    ],
    "C": [
        [1,1,1,1,1],
        [1],
        [1],
        [1],
        [1,1,1,1,1]
    ],
    "D": [
        [1,1,1,1],
        [1, , , ,1],
        [1, , , ,1],
        [1, , , ,1],
        [1,1,1,1]
    ],
    "E": [
        [1,1,1,1,1],
        [1],
        [1,1,1,1],
        [1],
        [1,1,1,1,1]
    ],
    "F": [
        [1,1,1,1,1],
        [1],
        [1,1,1,1],
        [1],
        [1]
    ],
    "G": [
        [1,1,1,1,1],
        [1],
        [1, ,1,1,1],
        [1, , , ,1],
        [1,1,1,1,1]
    ],
    "H": [
        [1, , , ,1],
        [1, , , ,1],
        [1,1,1,1,1],
        [1, , , ,1],
        [1, , , ,1]
    ],
    "I": [
        [1,1,1,1,1],
        [ , ,1],
        [ , ,1],
        [ , ,1],
        [1,1,1,1,1]
    ],
    "J": [
        [1,1,1,1,1],
        [ , , , ,1],
        [ , , , ,1],
        [1, , , ,1],
        [1,1,1,1,1]
    ],
    "K": [
        [1, , , ,1],
        [1, , ,1],
        [1,1,1],
        [1, , ,1],
        [1, , , ,1]
    ],
    "L": [
        [1],
        [1],
        [1],
        [1],
        [1,1,1,1,1]
    ],
    "M": [
        [1, , , ,1],
        [1,1, ,1,1],
        [1, ,1, ,1],
        [1, , , ,1],
        [1, , , ,1]
    ],
    "N": [
        [1, , , ,1],
        [1,1, , ,1],
        [1, ,1, ,1],
        [1, , ,1,1],
        [1, , , ,1]
    ],
    "Ñ": [
        [1,1,1,1,1],
        [ , , , , ],
        [1,1, , ,1],
        [1, ,1, ,1],
        [1, , ,1,1]
    ],
    "O": [
        [1,1,1,1,1],
        [1, , , ,1],
        [1, , , ,1],
        [1, , , ,1],
        [1,1,1,1,1]
    ],
    "P": [
        [1,1,1,1,1],
        [1, , , ,1],
        [1,1,1,1,1],
        [1],
        [1]
    ],
    "Q": [
        [1,1,1,1,1],
        [1, , , ,1],
        [1, , , ,1],
        [1, , ,1, ],
        [1,1,1, ,1]
    ],
    "R": [
        [1,1,1,1],
        [1, , , ,1],
        [1,1,1,1],
        [1, , , ,1],
        [1, , , ,1]
    ],
    "S": [
        [1,1,1,1,1],
        [1],
        [1,1,1,1,1],
        [ , , , ,1],
        [1,1,1,1,1]
    ],
    "T": [
        [1,1,1,1,1],
        [ , ,1],
        [ , ,1],
        [ , ,1],
        [ , ,1]
    ],
    "U": [
        [1, , , ,1],
        [1, , , ,1],
        [1, , , ,1],
        [1, , , ,1],
        [1,1,1,1,1]
    ],
    "V": [
        [1, , , ,1],
        [1, , , ,1],
        [1, , , ,1],
        [ ,1, ,1],
        [ , ,1]
    ],
    "W": [
        [1, , , ,1],
        [1, , , ,1],
        [1, , , ,1],
        [1, ,1, ,1],
        [1,1, ,1,1]
    ],
    "X": [
        [1, , , ,1],
        [ ,1, ,1],
        [ , ,1],
        [ ,1, ,1],
        [1, , , ,1]
    ],
    "Y": [
        [1, , , ,1],
        [1, , , ,1],
        [1,1,1,1,1],
        [ , ,1],
        [ , ,1]
    ],
    "Z": [
        [1,1,1,1,1],
        [ , , ,1],
        [ , ,1],
        [,1],
        [1,1,1,1,1]
    ],
    "0": [
        [1,1,1,1,1],
        [1, , , ,1],
        [1, , , ,1],
        [1, , , ,1],
        [1,1,1,1,1]
    ],
    "1": [
        [1,1,1],
        [ , ,1],
        [ , ,1],
        [ , ,1],
        [1,1,1,1,1]
    ],
    "2": [
        [1,1,1,1,1],
        [ , , , ,1],
        [1,1,1,1,1],
        [1],
        [1,1,1,1,1]
    ],
    "3": [
        [1,1,1,1,1],
        [1, , , ,1],
        [ , ,1,1,1],
        [1, , , ,1],
        [1,1,1,1,1]
    ],
    "4": [
        [1, , , ,1],
        [1, , , ,1],
        [1,1,1,1,1],
        [ , , , ,1],
        [ , , , ,1]
    ],
    "5": [
        [1,1,1,1,1],
        [1],
        [1,1,1,1, ],
        [ , , , ,1],
        [1,1,1,1]
    ],
    "6": [
        [1,1,1,1,1],
        [1,],
        [1,1,1,1,1],
        [1, , , ,1],
        [1,1,1,1,1]
    ],
    "7": [
        [1,1,1,1,1],
        [ , , , ,1],
        [ , , ,1],
        [ , ,1],
        [ , ,1]
    ],
    "8": [
      [1,1,1,1,1],
      [1, , , ,1],
      [1,1,1,1,1],
      [1, , , ,1],
      [1,1,1,1,1]
    ],
    "9": [
        [1,1,1,1,1],
        [1, , , ,1],
        [1,1,1,1,1],
        [ , , , ,1],
        [1,1,1,1,1]
    ],
    "+": [
        [ , ,1],
        [ , ,1],
        [1,1,1,1,1],
        [ , ,1],
        [ , ,1]
    ],
    /*
    "+": [
        [],
        [ ,1],
        [1,1,1],
        [ ,1],
        []
    ],
    */
    "-": [
        [],
        [],
        [1,1,1,1,1],
        [],
        []
    ],
    "_": [
        [],
        [],
        [],
        [],
        [1,1,1,1,1]
    ],
    "(": [
        [ ,1],
        [1],
        [1],
        [1],
        [ ,1]
    ],
    ")": [
        [1],
        [ ,1],
        [ ,1],
        [ ,1],
        [1]
    ],
    "{": [
        [ ,1,1],
        [ ,1],
        [1],
        [ ,1],
        [ ,1,1]
    ],
    "}": [
        [1,1],
        [ ,1],
        [ , ,1],
        [ ,1],
        [1,1]
    ],
    "[": [
        [1,1],
        [1],
        [1],
        [1],
        [1,1]
    ],
    "]": [
        [1,1],
        [ ,1],
        [ ,1],
        [ ,1],
        [1,1]
    ],
    "=": [
        [],
        [1,1,1,1,1],
        [],
        [1,1,1,1,1],
        []
    ],
    "/": [
        [ , , , ,1],
        [ , , ,1],
        [ , ,1],
        [ ,1],
        [1]
    ],
    "\\": [
        [1],
        [ ,1],
        [ , ,1],
        [ , , ,1],
        [ , , , ,1]
    ],
    "%": [
        [1, , , ,1],
        [ , , ,1],
        [ , ,1],
        [ ,1],
        [1, , , ,1]
    ],
    ".": [
        [],
        [],
        [],
        [],
        [1]
    ],
    "*": [
        [1, ,1],
        [ ,1],
        [1, ,1],
        [],
        []
    ],
    ":": [
        [],
        [1],
        [],
        [1],
        []
    ],
    ",": [
        [],
        [],
        [],
        [1],
        [1]
    ],
    ";": [
        [],
        [1],
        [],
        [1],
        [1]
    ],
    "!": [
        [1],
        [1],
        [1],
        [],
        [1]
    ],
    "¡": [
        [1],
        [],
        [1],
        [1],
        [1]
    ],
    "?": [
        [ ,1,1,1],
        [1, , , ,1],
        [ , ,1,1],
        [],
        [ , ,1]
    ],
    "¿": [
        [ , ,1],
        [],
        [ ,1,1],
        [1, , , ,1],
        [ ,1,1,1]
    ],
    '"':[
        [1, ,1],
        [1, ,1],
        [],
        [],
        []
    ],
    "<": [
        [ , ,1],
        [ ,1],
        [1],
        [ ,1],
        [ , ,1]
    ],
    ">": [
        [1],
        [ ,1],
        [ , ,1],
        [ ,1],
        [1]
    ],
    '\'':[
        [1],
        [1],
        [],
        [],
        []
    ],
    "°": [
        [1,1,1],
        [1, ,1],
        [1,1,1],
        [],
        []
    ],
    "|": [
        [1],
        [1],
        [1],
        [1],
        [1]
    ],
    "♥": [
        [ ,1, ,1],
        [1,1,1,1,1],
        [1,1,1,1,1],
        [ ,1,1,1],
        [ , ,1]
    ],
    "#": [
      [ ,1, ,1],
      [1,1,1,1,1],
      [ ,1, ,1],
      [1,1,1,1,1],
      [ ,1, ,1]
    ],
    "^": [
      [ ,1],
      [1, ,1],
      [],
      [],
      []
    ],
    " ": [
        [ , , ],
        [ , , ],
        [ , , ],
        [ , , ],
        [ , , ]
    ],
    "@": [
        [],
        [],
        [],
        [],
        []
    ]
  },
  "simple5x5": {
    Tier: 2,
    "Name": "Simple 5px",
    "Height": 5,
    "A": [
        [1,1,1,1,1],
        [1, , , ,1],
        [1, , , ,1],
        [1,1,1,1,1],
        [1, , , ,1]
    ],
    "B": [
        [1,1,1,1,1],
        [ , , , ,1],
        [1,1,1,1,1],
        [ , , , ,1],
        [1,1,1,1,1]
    ],
    "C": [
        [1,1,1,1,1],
        [1, , , , ],
        [1, , , , ],
        [1, , , , ],
        [1,1,1,1,1]
    ],
    "D": [
        [1,1,1,1, ],
        [ , , , ,1],
        [ , , , ,1],
        [ , , , ,1],
        [1,1,1,1, ]
    ],
    "E": [
        [1,1,1,1,1],
        [ , , , , ],
        [1,1,1,1,1],
        [ , , , , ],
        [1,1,1,1,1]
    ],
    "F": [
        [1,1,1,1,1],
        [1, , , , ],
        [1,1,1,1,1],
        [1, , , , ],
        [1, , , , ]
    ],
    "G": [
        [1,1,1,1,1],
        [1, , , , ],
        [1, ,1,1,1],
        [1, , , ,1],
        [1,1,1, ,1]
    ],
    "H": [
        [1, , , ,1],
        [1, , , ,1],
        [1,1,1,1,1],
        [1, , , ,1],
        [1, , , ,1]
    ],
    "I": [
        [1],
        [1],
        [1],
        [1],
        [1]
    ],
    "J": [
        [ , , , ,1],
        [ , , , ,1],
        [ , , , ,1],
        [1, , , ,1],
        [1,1,1,1,1]
    ],
    "K": [
        [1, , , ,1],
        [1, , ,1],
        [1,1,1],
        [1, , ,1],
        [1, , , ,1]
    ],
    "L": [
        [1, , , , ],
        [1, , , , ],
        [1, , , , ],
        [1, , , , ],
        [1,1,1,1,1]
    ],
    "M": [
        [1,1,1,1,1],
        [1, ,1, ,1],
        [1, ,1, ,1],
        [1, ,1, ,1],
        [1, ,1, ,1]
    ],
    "N": [
        [1,1,1,1,1],
        [1, , , ,1],
        [1, , , ,1],
        [1, , , ,1],
        [1, , , ,1]
    ],
    "Ñ": [
        [1,1,1,1,1],
        [ , , , , ],
        [1,1,1,1,1],
        [1, , , ,1],
        [1, , , ,1]
    ],
    "O": [
        [1,1,1,1,1],
        [1, , , ,1],
        [1, , , ,1],
        [1, , , ,1],
        [1,1,1,1,1]
    ],
    "P": [
        [1,1,1,1,1],
        [1, , , ,1],
        [1,1,1,1,1],
        [1, , , , ],
        [1, , , , ]
    ],
    "Q": [
        [1,1,1,1,1],
        [1, , , ,1],
        [1, , , ,1],
        [1, , ,1,1],
        [1,1,1,1,1]
    ],
    "R": [
        [1,1,1,1,1],
        [1, , , ,1],
        [1,1,1,1, ],
        [1, , , ,1],
        [1, , , ,1]
    ],
    "S": [
        [1,1,1,1,1],
        [1, , , , ],
        [1,1,1,1,1],
        [ , , , ,1],
        [1,1,1,1,1]
    ],
    "T": [
        [1,1,1,1,1],
        [ , ,1, , ],
        [ , ,1, , ],
        [ , ,1, , ],
        [ , ,1, , ]
    ],
    "U": [
        [1, , , ,1],
        [1, , , ,1],
        [1, , , ,1],
        [1, , , ,1],
        [ ,1,1,1, ]
    ],
    "V": [
        [1, , , ,1],
        [1, , , ,1],
        [1, , , ,1],
        [1, , , ,1],
        [1,1,1,1,1]
    ],
    "W": [
        [1, , ,1, , ,1],
        [1, , ,1, , ,1],
        [1, , ,1, , ,1],
        [1, , ,1, , ,1],
        [1,1,1,1,1,1,1]
    ],
    "X": [
        [1, , , ,1],
        [ ,1, ,1, ],
        [ , ,1, , ],
        [ ,1, ,1, ],
        [1, , , ,1]
    ],
    "Y": [
        [1, , , ,1],
        [1, , , ,1],
        [1,1,1,1,1],
        [ , ,1, , ],
        [ , ,1, , ]
    ],
    "Z": [
        [1,1,1,1,1],
        [ , , , ,1],
        [ ,1,1,1, ],
        [1, , , , ],
        [1,1,1,1,1]
    ],
    "0": [
        [1,1,1,1,1],
        [1, , , ,1],
        [1, , , ,1],
        [1, , , ,1],
        [1,1,1,1,1]
    ],
    "1": [
        [1,1,1, , ],
        [ , ,1, , ],
        [ , ,1, , ],
        [ , ,1, , ],
        [1,1,1,1,1]
    ],
    "2": [
        [1,1,1,1,1],
        [ , , , ,1],
        [1,1,1,1,1],
        [1, , , , ],
        [1,1,1,1,1]
    ],
    "3": [
        [1,1,1,1,1],
        [ , , , ,1],
        [ , ,1,1,1],
        [ , , , ,1],
        [1,1,1,1,1]
    ],
    "4": [
        [1, , , ,1],
        [1, , , ,1],
        [1,1,1,1,1],
        [ , , , ,1],
        [ , , , ,1]
    ],
    "5": [
        [1,1,1,1,1],
        [1, , , , ],
        [1,1,1,1,1],
        [ , , , ,1],
        [1,1,1,1,1]
    ],
    "6": [
        [1,1,1,1,1],
        [1, , , , ],
        [1,1,1,1,1],
        [1, , , ,1],
        [1,1,1,1,1]
    ],
    "7": [
        [1,1,1,1,1],
        [1, , , ,1],
        [ , , , ,1],
        [ , , , ,1],
        [ , , , ,1]
    ],
    "8": [
        [1,1,1,1,1],
        [1, , , ,1],
        [1,1,1,1,1],
        [1, , , ,1],
        [1,1,1,1,1]
    ],
    "9": [
        [1,1,1,1,1],
        [1, , , ,1],
        [1,1,1,1,1],
        [ , , , ,1],
        [1,1,1,1,1]
    ],
    "+": [
        [ , ,1],
        [ , ,1],
        [1,1,1,1,1],
        [ , ,1],
        [ , ,1]
    ],
    /*
    "+": [
        [],
        [ ,1],
        [1,1,1],
        [ ,1],
        []
    ],
    */
    "-": [
        [],
        [],
        [1,1,1,1,1],
        [],
        []
    ],
    "_": [
        [],
        [],
        [],
        [],
        [1,1,1,1,1]
    ],
    "(": [
        [ ,1],
        [1],
        [1],
        [1],
        [ ,1]
    ],
    ")": [
        [1],
        [ ,1],
        [ ,1],
        [ ,1],
        [1]
    ],
    "{": [
        [ ,1,1],
        [ ,1],
        [1],
        [ ,1],
        [ ,1,1]
    ],
    "}": [
        [1,1],
        [ ,1],
        [ , ,1],
        [ ,1],
        [1,1]
    ],
    "[": [
        [1,1],
        [1],
        [1],
        [1],
        [1,1]
    ],
    "]": [
        [1,1],
        [ ,1],
        [ ,1],
        [ ,1],
        [1,1]
    ],
    "=": [
        [],
        [1,1,1,1,1],
        [],
        [1,1,1,1,1],
        []
    ],
    "/": [
        [ , , , ,1],
        [ , , ,1],
        [ , ,1],
        [ ,1],
        [1]
    ],
    "\\": [
        [1],
        [ ,1],
        [ , ,1],
        [ , , ,1],
        [ , , , ,1]
    ],
    "%": [
        [1, , , ,1],
        [ , , ,1],
        [ , ,1],
        [ ,1],
        [1, , , ,1]
    ],
    ".": [
        [],
        [],
        [],
        [],
        [1]
    ],
    "*": [
        [1, ,1],
        [ ,1],
        [1, ,1],
        [],
        []
    ],
    ":": [
        [],
        [1],
        [],
        [1],
        []
    ],
    ",": [
        [],
        [],
        [],
        [1],
        [1]
    ],
    ";": [
        [],
        [1],
        [],
        [1],
        [1]
    ],
    "!": [
        [1],
        [1],
        [1],
        [],
        [1]
    ],
    "¡": [
        [1],
        [],
        [1],
        [1],
        [1]
    ],
    "?": [
        [ ,1,1,1],
        [1, , , ,1],
        [ , ,1,1],
        [],
        [ , ,1]
    ],
    "¿": [
        [ , ,1],
        [],
        [ ,1,1],
        [1, , , ,1],
        [ ,1,1,1]
    ],
    '"':[
        [1, ,1],
        [1, ,1],
        [],
        [],
        []
    ],
    "<": [
        [ , ,1],
        [ ,1],
        [1],
        [ ,1],
        [ , ,1]
    ],
    ">": [
        [1],
        [ ,1],
        [ , ,1],
        [ ,1],
        [1]
    ],
    '\'':[
        [1],
        [1],
        [],
        [],
        []
    ],
    "°": [
        [1,1,1],
        [1, ,1],
        [1,1,1],
        [],
        []
    ],
    "|": [
        [1],
        [1],
        [1],
        [1],
        [1]
    ],
    "♥": [
        [ ,1, ,1],
        [1,1,1,1,1],
        [1,1,1,1,1],
        [ ,1,1,1],
        [ , ,1]
    ],
    "#": [
      [ ,1, ,1],
      [1,1,1,1,1],
      [ ,1, ,1],
      [1,1,1,1,1],
      [ ,1, ,1]
    ],
    "^": [
      [ ,1],
      [1, ,1],
      [],
      [],
      []
    ],
    " ": [
        [ , , ],
        [ , , ],
        [ , , ],
        [ , , ],
        [ , , ]
    ],
    "@": [
        [],
        [],
        [],
        [],
        []
    ]
  },
  "squared6x5": {
    "Name": "Really Squared² 6px",
    "Height": 6,
    "A": [
        [1,1,1,1,1],
        [1, , , ,1],
        [1,1,1,1,1],
        [1, , , ,1],
        [1, , , ,1],
        [1, , , ,1]
    ],
    "B": [
        [1,1,1,1,1],
        [1, , , ,1],
        [1,1,1,1],
        [1, , , ,1],
        [1, , , ,1],
        [1,1,1,1,1]
    ],
    "C": [
        [1,1,1,1,1],
        [1, , , , ],
        [1, , , , ],
        [1, , , , ],
        [1, , , , ],
        [1,1,1,1,1]
    ],
    "D": [
        [1,1,1,1, ],
        [1, , , ,1],
        [1, , , ,1],
        [1, , , ,1],
        [1, , , ,1],
        [1,1,1,1, ]
    ],
    "E": [
        [1,1,1,1,1],
        [1],
        [1,1,1,1],
        [1],
        [1],
        [1,1,1,1,1]
    ],
    "F": [
        [1,1,1,1,1],
        [1, , , , ],
        [1,1,1,1, ],
        [1, , , , ],
        [1, , , , ],
        [1, , , , ]
    ],
    "G": [
        [1,1,1,1,1],
        [1, , , , ],
        [1, ,1,1,1],
        [1, , , ,1],
        [1, , , ,1],
        [1,1,1,1,1]
    ],
    "H": [
        [1, , , ,1],
        [1, , , ,1],
        [1,1,1,1,1],
        [1, , , ,1],
        [1, , , ,1],
        [1, , , ,1]
    ],
    "I": [
        [1],
        [1],
        [1],
        [1],
        [1],
        [1]
    ],
    "J": [
        [ , , ,1],
        [ , , ,1],
        [ , , ,1],
        [ , , ,1],
        [ , , ,1],
        [1,1,1,1]
    ],
    "K": [
        [1, , , ,1],
        [1, , , ,1],
        [1,1,1,1, ],
        [1, , , ,1],
        [1, , , ,1],
        [1, , , ,1]
    ],
    "L": [
        [1, , , ],
        [1, , , ],
        [1, , , ],
        [1, , , ],
        [1, , , ],
        [1,1,1,1]
    ],
    "M": [
        [1,1,1,1,1],
        [1, ,1, ,1],
        [1, ,1, ,1],
        [1, ,1, ,1],
        [1, ,1, ,1],
        [1, ,1, ,1]
    ],
    "N": [
        [1,1,1,1,1],
        [1, , , ,1],
        [1, , , ,1],
        [1, , , ,1],
        [1, , , ,1],
        [1, , , ,1]
    ],
    "Ñ": [
        [1,1,1,1,1],
        [ , , , , ],
        [1,1,1,1,1],
        [1, , , ,1],
        [1, , , ,1],
        [1, , , ,1]
    ],
    "O": [
        [1,1,1,1,1],
        [1, , , ,1],
        [1, , , ,1],
        [1, , , ,1],
        [1, , , ,1],
        [1,1,1,1,1]
    ],
    "P": [
        [1,1,1,1,1],
        [1, , , ,1],
        [1, , , ,1],
        [1,1,1,1,1],
        [1, , , , ],
        [1, , , , ]
    ],
    "Q": [
        [1,1,1,1,1],
        [1, , , ,1],
        [1, , , ,1],
        [1, , , ,1],
        [1,1,1,1,1],
        [ , ,1, , ]
    ],
    "R": [
        [1,1,1,1,1],
        [1, , , ,1],
        [1, , , ,1],
        [1,1,1,1, ],
        [1, , , ,1],
        [1, , , ,1]
    ],
    "S": [
        [1,1,1,1,1],
        [1, , , , ],
        [1,1,1,1,1],
        [ , , , ,1],
        [ , , , ,1],
        [1,1,1,1,1]
    ],
    "T": [
        [1,1,1,1,1],
        [ , ,1, , ],
        [ , ,1, , ],
        [ , ,1, , ],
        [ , ,1, , ],
        [ , ,1, , ]
    ],
    "U": [
        [1, , , ,1],
        [1, , , ,1],
        [1, , , ,1],
        [1, , , ,1],
        [1, , , ,1],
        [1,1,1,1,1]
    ],
    "V": [
        [1, , , ,1],
        [1, , , ,1],
        [1, , , ,1],
        [1, , , ,1],
        [1, , , ,1],
        [ ,1,1,1, ]
    ],
    "W": [
        [1, ,1, ,1],
        [1, ,1, ,1],
        [1, ,1, ,1],
        [1, ,1, ,1],
        [1, ,1, ,1],
        [1,1,1,1,1]
    ],
    "X": [
        [1, , , ,1],
        [1, , , ,1],
        [ ,1,1,1, ],
        [1, , , ,1],
        [1, , , ,1],
        [1, , , ,1]
    ],
    "Y": [
        [1, , , ,1],
        [1, , , ,1],
        [1,1,1,1,1],
        [ , ,1, , ],
        [ , ,1, , ],
        [ , ,1, , ]
    ],
    "Z": [
        [1,1,1,1,1],
        [ , , , ,1],
        [ ,1,1,1, ],
        [1, , , , ],
        [1, , , , ],
        [1,1,1,1,1]
    ],
    "0": [
        [1,1,1,1,1],
        [1, , , ,1],
        [1,1, , ,1],
        [1, ,1, ,1],
        [1, , ,1,1],
        [1,1,1,1,1]
    ],
    "1": [
        [1,1],
        [ ,1],
        [ ,1],
        [ ,1],
        [ ,1],
        [ ,1]
    ],
    "2": [
        [1,1,1,1,1],
        [ , , , ,1],
        [1,1,1,1,1],
        [1, , , , ],
        [1, , , , ],
        [1,1,1,1,1]
    ],
    "3": [
        [1,1,1,1,1],
        [ , , , ,1],
        [ ,1,1,1,1],
        [ , , , ,1],
        [ , , , ,1],
        [1,1,1,1,1]
    ],
    "4": [
        [1, , , ,1],
        [1, , , ,1],
        [1, , , ,1],
        [1,1,1,1,1],
        [ , , , ,1],
        [ , , , ,1]
    ],
    "5": [
        [1,1,1,1,1],
        [1, , , , ],
        [1,1,1,1,1],
        [ , , , ,1],
        [ , , , ,1],
        [1,1,1,1,1]
    ],
    "6": [
        [1,1,1,1,1],
        [1, , , , ],
        [1,1,1,1,1],
        [1, , , ,1],
        [1, , , ,1],
        [1,1,1,1,1]
    ],
    "7": [
        [1,1,1,1],
        [ , , ,1],
        [ , , ,1],
        [ , , ,1],
        [ , , ,1],
        [ , , ,1]
    ],
    "8": [
        [1,1,1,1,1],
        [1, , , ,1],
        [1,1,1,1,1],
        [1, , , ,1],
        [1, , , ,1],
        [1,1,1,1,1]
    ],
    "9": [
        [1,1,1,1,1],
        [1, , , ,1],
        [1, , , ,1],
        [1,1,1,1,1],
        [ , , , ,1],
        [1,1,1,1,1]
    ],
    "+": [
        [ , ,1],
        [ , ,1],
        [1,1,1,1,1],
        [ , ,1],
        [ , ,1],
        []
    ],
    /*
    "+": [
        [],
        [ ,1],
        [1,1,1],
        [ ,1],
        []
    ],
    */
    "-": [
        [],
        [],
        [1,1,1,1,1],
        [],
        [],
        []
    ],
    "_": [
        [],
        [],
        [],
        [],
        [],
        [1,1,1,1,1]
    ],
    "(": [
        [ ,1],
        [1],
        [1],
        [1],
        [1],
        [ ,1]
    ],
    ")": [
        [1],
        [ ,1],
        [ ,1],
        [ ,1],
        [ ,1],
        [1]
    ],
    "{": [
        [ ,1,1],
        [ ,1],
        [1],
        [ ,1],
        [ ,1],
        [ ,1,1]
    ],
    "}": [
        [1,1],
        [ ,1],
        [ , ,1],
        [ ,1],
        [ ,1],
        [1,1]
    ],
    "[": [
        [1,1],
        [1],
        [1],
        [1],
        [1],
        [1,1]
    ],
    "]": [
        [1,1],
        [ ,1],
        [ ,1],
        [ ,1],
        [ ,1],
        [1,1]
    ],
    "=": [
        [],
        [1,1,1,1,1],
        [],
        [1,1,1,1,1],
        [],
        []
    ],
    "/": [
        [ , , , ,1],
        [ , , ,1],
        [ , ,1],
        [ , ,1],
        [ ,1],
        [1]
    ],
    "\\": [
        [1],
        [ ,1],
        [ , ,1],
        [ , ,1],
        [ , , ,1],
        [ , , , ,1]
    ],
    "%": [
        [1, , , ,1],
        [1, , ,1],
        [ , ,1],
        [ , ,1],
        [ ,1, , ,1],
        [1, , , ,1]
    ],
    ".": [
        [],
        [],
        [],
        [],
        [],
        [1]
    ],
    "*": [
        [1, ,1],
        [ ,1],
        [1, ,1],
        [],
        []
    ],
    ":": [
        [],
        [1],
        [],
        [1],
        [],
        []
    ],
    ",": [
        [],
        [],
        [],
        [],
        [1],
        [1]
    ],
    ";": [
        [],
        [],
        [1],
        [],
        [1],
        [1]
    ],
    "!": [
        [1],
        [1],
        [1],
        [1],
        [],
        [1]
    ],
    "¡": [
        [1],
        [],
        [1],
        [1],
        [1],
        [1]
    ],
    "?": [
        [ ,1,1,1],
        [1, , , ,1],
        [ , ,1,1],
        [ , ,1],
        [],
        [ , ,1]
    ],
    "¿": [
        [ , ,1],
        [],
        [ , ,1],
        [ ,1,1],
        [1, , , ,1],
        [ ,1,1,1]
    ],
    '"':[
        [1, ,1],
        [1, ,1],
        [],
        [],
        [],
        []
    ],
    "<": [
        [ , ,1],
        [ ,1],
        [1],
        [1],
        [ ,1],
        [ , ,1]
    ],
    ">": [
        [1],
        [ ,1],
        [ , ,1],
        [ , ,1],
        [ ,1],
        [1]
    ],
    '\'':[
        [1],
        [1],
        [],
        [],
        [],
        []
    ],
    "°": [
        [1,1,1],
        [1, ,1],
        [1,1,1],
        [],
        [],
        []
    ],
    "|": [
        [1],
        [1],
        [1],
        [1],
        [1],
        [1]
    ],
    "♥": [
        [ ,1, ,1],
        [1,1,1,1,1],
        [1,1,1,1,1],
        [ ,1,1,1],
        [ , ,1],
        []
    ],
    "#": [
      [ ,1, ,1],
      [1,1,1,1,1],
      [ ,1, ,1],
      [1,1,1,1,1],
      [ ,1, ,1],
      []
    ],
    "^": [
      [ ,1],
      [1, ,1],
      [],
      [],
      [],
      []
    ],
    " ": [
        [ , , ],
        [ , , ],
        [ , , ],
        [ , , ],
        [ , , ],
        [ , , ]
    ],
    "@": [
        [],
        [],
        [],
        [],
        [],
        []
    ]
  },
  "rounded6x6": {
    "Name": "Rounded 6px",
    "Height": 6,
    "A": [
        [ ,1,1,1],
        [1, , , ,1],
        [1,1,1,1,1],
        [1, , , ,1],
        [1, , , ,1],
        [1, , , ,1]
    ],
    "B": [
        [1,1,1,1],
        [1, , , ,1],
        [1,1,1,1],
        [1, , , ,1],
        [1, , , ,1],
        [1,1,1,1]
    ],
    "C": [
        [ ,1,1,1],
        [1, , , ,1],
        [1],
        [1],
        [1, , , ,1],
        [ ,1,1,1]
    ],
    "D": [
        [1,1,1,1],
        [1, , , ,1],
        [1, , , ,1],
        [1, , , ,1],
        [1, , , ,1],
        [1,1,1,1]
    ],
    "E": [
        [1,1,1,1,1],
        [1],
        [1,1,1,1],
        [1],
        [1],
        [1,1,1,1,1]
    ],
    "F": [
        [1,1,1,1,1],
        [1],
        [1,1,1,1],
        [1],
        [1],
        [1]
    ],
    "G": [
        [ ,1,1,1,1],
        [1],
        [1, ,1,1,1],
        [1, , , ,1],
        [1, , , ,1],
        [ ,1,1,1, ]
    ],
    "H": [
        [1, , , ,1],
        [1, , , ,1],
        [1,1,1,1,1],
        [1, , , ,1],
        [1, , , ,1],
        [1, , , ,1]
    ],
    "I": [
        [1,1,1,1,1],
        [ , ,1],
        [ , ,1],
        [ , ,1],
        [ , ,1],
        [1,1,1,1,1]
    ],
    "J": [
        [1,1,1,1,1],
        [ , , , ,1],
        [ , , , ,1],
        [ , , , ,1],
        [1, , , ,1],
        [1,1,1,1,1]
    ],
    "K": [
        [1, , , ,1],
        [1, , ,1],
        [1,1,1],
        [1, , ,1],
        [1, , , ,1],
        [1, , , ,1]
    ],
    "L": [
        [1],
        [1],
        [1],
        [1],
        [1],
        [1,1,1,1,1]
    ],
    "M": [
        [1, , , ,1],
        [1,1, ,1,1],
        [1, ,1, ,1],
        [1, , , ,1],
        [1, , , ,1],
        [1, , , ,1]
    ],
    "N": [
        [1, , , ,1],
        [1,1, , ,1],
        [1, ,1, ,1],
        [1, , ,1,1],
        [1, , , ,1],
        [1, , , ,1]
    ],
    "Ñ": [
        [1,1,1,1,1],
        [ , , , , ],
        [1, , , ,1],
        [1,1, , ,1],
        [1, ,1, ,1],
        [1, , ,1,1]
    ],
    "O": [
        [ ,1,1,1],
        [1, , , ,1],
        [1, , , ,1],
        [1, , , ,1],
        [1, , , ,1],
        [ ,1,1,1]
    ],
    "P": [
        [1,1,1,1],
        [1, , , ,1],
        [1, , , ,1],
        [1,1,1,1],
        [1],
        [1]
    ],
    "Q": [
        [ ,1,1,1],
        [1, , , ,1],
        [1, , , ,1],
        [1, , , ,1],
        [1, , ,1, ],
        [ ,1,1, ,1]
    ],
    "R": [
        [1,1,1,1],
        [1, , , ,1],
        [1,1,1,1],
        [1, , , ,1],
        [1, , , ,1],
        [1, , , ,1]
    ],
    "S": [
        [ ,1,1,1,1],
        [1],
        [ ,1,1,1],
        [ , , , ,1],
        [ , , , ,1],
        [1,1,1,1]
    ],
    "T": [
        [1,1,1,1,1],
        [ , ,1],
        [ , ,1],
        [ , ,1],
        [ , ,1],
        [ , ,1]
    ],
    "U": [
        [1, , , ,1],
        [1, , , ,1],
        [1, , , ,1],
        [1, , , ,1],
        [1, , , ,1],
        [ ,1,1,1]
    ],
    "V": [
        [1, , , ,1],
        [1, , , ,1],
        [1, , , ,1],
        [1, , , ,1],
        [ ,1, ,1],
        [ , ,1]
    ],
    "W": [
        [1, , , ,1],
        [1, , , ,1],
        [1, , , ,1],
        [1, , , ,1],
        [1, ,1, ,1],
        [ ,1, ,1, ]
    ],
    "X": [
        [1, , , ,1],
        [ ,1, ,1],
        [ , ,1],
        [ ,1, ,1],
        [1, , , ,1],
        [1, , , ,1]
    ],
    "Y": [
        [1, , , ,1],
        [ ,1, ,1],
        [ , ,1],
        [ , ,1],
        [ , ,1],
        [ , ,1]
    ],
    "Z": [
        [1,1,1,1,1],
        [ , , , ,1],
        [ , , ,1],
        [ , ,1],
        [ ,1],
        [1,1,1,1,1]
    ],
    "0": [
        [ ,1,1,1, ],
        [1, , , ,1],
        [1, , , ,1],
        [1, , , ,1],
        [1, , , ,1],
        [ ,1,1,1, ]
    ],
    "1": [
        [1,1,1],
        [ , ,1],
        [ , ,1],
        [ , ,1],
        [ , ,1],
        [1,1,1,1,1]
    ],
    "2": [
        [ ,1,1,1, ],
        [1, , , ,1],
        [ , , ,1],
        [ , ,1],
        [ ,1],
        [1,1,1,1,1]
    ],
    "3": [
        [ ,1,1,1],
        [1, , , ,1],
        [ , ,1,1, ],
        [ , , , ,1],
        [1, , , ,1],
        [ ,1,1,1]
    ],
    "4": [
        [1, , , ,1],
        [1, , , ,1],
        [1,1,1,1,1],
        [ , , , ,1],
        [ , , , ,1],
        [ , , , ,1]
    ],
    "5": [
        [1,1,1,1,1],
        [1],
        [1,1,1,1, ],
        [ , , , ,1],
        [ , , , ,1],
        [1,1,1,1]
    ],
    "6": [
        [ ,1,1,1,1],
        [1,],
        [1,1,1,1],
        [1, , , ,1],
        [1, , , ,1],
        [ ,1,1,1]
    ],
    "7": [
        [1,1,1,1,1],
        [ , , , ,1],
        [ , , ,1],
        [ , ,1],
        [ , ,1],
        [ , ,1]
    ],
    "8": [
      [ ,1,1,1],
      [1, , , ,1],
      [ ,1,1,1],
      [1, , , ,1],
      [1, , , ,1],
      [ ,1,1,1]
    ],
    "9": [
        [ ,1,1,1, ],
        [1, , , ,1],
        [ ,1,1,1,1],
        [ , , , ,1],
        [1, , , ,1],
        [ ,1,1,1, ]
    ],
    "+": [
        [ , ,1],
        [ , ,1],
        [1,1,1,1,1],
        [ , ,1],
        [ , ,1],
        []
    ],
    /*
    "+": [
        [],
        [ ,1],
        [1,1,1],
        [ ,1],
        []
    ],
    */
    "-": [
        [],
        [],
        [1,1,1,1,1],
        [],
        [],
        []
    ],
    "_": [
        [],
        [],
        [],
        [],
        [],
        [1,1,1,1,1]
    ],
    "(": [
        [ ,1],
        [1],
        [1],
        [1],
        [1],
        [ ,1]
    ],
    ")": [
        [1],
        [ ,1],
        [ ,1],
        [ ,1],
        [ ,1],
        [1]
    ],
    "{": [
        [ ,1,1],
        [ ,1],
        [1],
        [ ,1],
        [ ,1],
        [ ,1,1]
    ],
    "}": [
        [1,1],
        [ ,1],
        [ , ,1],
        [ ,1],
        [ ,1],
        [1,1]
    ],
    "[": [
        [1,1],
        [1],
        [1],
        [1],
        [1],
        [1,1]
    ],
    "]": [
        [1,1],
        [ ,1],
        [ ,1],
        [ ,1],
        [ ,1],
        [1,1]
    ],
    "=": [
        [],
        [1,1,1,1,1],
        [],
        [1,1,1,1,1],
        [],
        []
    ],
    "/": [
        [ , , , ,1],
        [ , , ,1],
        [ , ,1],
        [ , ,1],
        [ ,1],
        [1]
    ],
    "\\": [
        [1],
        [ ,1],
        [ , ,1],
        [ , ,1],
        [ , , ,1],
        [ , , , ,1]
    ],
    "%": [
        [1, , , ,1],
        [1, , ,1],
        [ , ,1],
        [ , ,1],
        [ ,1, , ,1],
        [1, , , ,1]
    ],
    ".": [
        [],
        [],
        [],
        [],
        [],
        [1]
    ],
    "*": [
        [1, ,1],
        [ ,1],
        [1, ,1],
        [],
        []
    ],
    ":": [
        [],
        [1],
        [],
        [1],
        [],
        []
    ],
    ",": [
        [],
        [],
        [],
        [],
        [1],
        [1]
    ],
    ";": [
        [],
        [],
        [1],
        [],
        [1],
        [1]
    ],
    "!": [
        [1],
        [1],
        [1],
        [1],
        [],
        [1]
    ],
    "¡": [
        [1],
        [],
        [1],
        [1],
        [1],
        [1]
    ],
    "?": [
        [ ,1,1,1],
        [1, , , ,1],
        [ , ,1,1],
        [ , ,1],
        [],
        [ , ,1]
    ],
    "¿": [
        [ , ,1],
        [],
        [ , ,1],
        [ ,1,1],
        [1, , , ,1],
        [ ,1,1,1]
    ],
    '"':[
        [1, ,1],
        [1, ,1],
        [],
        [],
        [],
        []
    ],
    "<": [
        [ , ,1],
        [ ,1],
        [1],
        [1],
        [ ,1],
        [ , ,1]
    ],
    ">": [
        [1],
        [ ,1],
        [ , ,1],
        [ , ,1],
        [ ,1],
        [1]
    ],
    '\'':[
        [1],
        [1],
        [],
        [],
        [],
        []
    ],
    "°": [
        [1,1,1],
        [1, ,1],
        [1,1,1],
        [],
        [],
        []
    ],
    "|": [
        [1],
        [1],
        [1],
        [1],
        [1],
        [1]
    ],
    "♥": [
        [ ,1, ,1],
        [1,1,1,1,1],
        [1,1,1,1,1],
        [ ,1,1,1],
        [ , ,1],
        []
    ],
    "#": [
      [ ,1, ,1],
      [1,1,1,1,1],
      [ ,1, ,1],
      [1,1,1,1,1],
      [ ,1, ,1],
      []
    ],
    "^": [
      [ ,1],
      [1, ,1],
      [],
      [],
      [],
      []
    ],
    " ": [
        [ , , ],
        [ , , ],
        [ , , ],
        [ , , ],
        [ , , ],
        [ , , ]
    ],
    "@": [
        [],
        [],
        [],
        [],
        [],
        []
    ]
  },
  "squared6x6": {
    "Name": "Squared 6px",
    "Height": 6,
    "A": [
        [1,1,1,1,1],
        [1, , , ,1],
        [1,1,1,1,1],
        [1, , , ,1],
        [1, , , ,1],
        [1, , , ,1]
    ],
    "B": [
        [1,1,1,1],
        [1, , , ,1],
        [1,1,1,1],
        [1, , , ,1],
        [1, , , ,1],
        [1,1,1,1]
    ],
    "C": [
        [1,1,1,1,1],
        [1],
        [1],
        [1],
        [1],
        [1,1,1,1,1]
    ],
    "D": [
        [1,1,1,1],
        [1, , , ,1],
        [1, , , ,1],
        [1, , , ,1],
        [1, , , ,1],
        [1,1,1,1]
    ],
    "E": [
        [1,1,1,1,1],
        [1],
        [1,1,1,1],
        [1],
        [1],
        [1,1,1,1,1]
    ],
    "F": [
        [1,1,1,1,1],
        [1],
        [1,1,1,1],
        [1],
        [1],
        [1]
    ],
    "G": [
        [1,1,1,1,1],
        [1],
        [1, ,1,1,1],
        [1, , , ,1],
        [1, , , ,1],
        [1,1,1,1,1]
    ],
    "H": [
        [1, , , ,1],
        [1, , , ,1],
        [1,1,1,1,1],
        [1, , , ,1],
        [1, , , ,1],
        [1, , , ,1]
    ],
    "I": [
        [1,1,1,1,1],
        [ , ,1],
        [ , ,1],
        [ , ,1],
        [ , ,1],
        [1,1,1,1,1]
    ],
    "J": [
        [1,1,1,1,1],
        [ , , , ,1],
        [ , , , ,1],
        [ , , , ,1],
        [1, , , ,1],
        [1,1,1,1,1]
    ],
    "K": [
        [1, , , ,1],
        [1, , ,1],
        [1,1,1],
        [1, , ,1],
        [1, , , ,1],
        [1, , , ,1]
    ],
    "L": [
        [1],
        [1],
        [1],
        [1],
        [1],
        [1,1,1,1,1]
    ],
    "M": [
        [1, , , ,1],
        [1,1, ,1,1],
        [1, ,1, ,1],
        [1, , , ,1],
        [1, , , ,1],
        [1, , , ,1]
    ],
    "N": [
        [1, , , ,1],
        [1,1, , ,1],
        [1, ,1, ,1],
        [1, , ,1,1],
        [1, , , ,1],
        [1, , , ,1]
    ],
    "Ñ": [
        [1,1,1,1,1],
        [ , , , , ],
        [1, , , ,1],
        [1,1, , ,1],
        [1, ,1, ,1],
        [1, , ,1,1]
    ],
    "O": [
        [1,1,1,1,1],
        [1, , , ,1],
        [1, , , ,1],
        [1, , , ,1],
        [1, , , ,1],
        [1,1,1,1,1]
    ],
    "P": [
        [1,1,1,1,1],
        [1, , , ,1],
        [1,1,1,1,1],
        [1],
        [1],
        [1]
    ],
    "Q": [
        [1,1,1,1,1],
        [1, , , ,1],
        [1, , , ,1],
        [1, , , ,1],
        [1, , ,1, ],
        [1,1,1, ,1]
    ],
    "R": [
        [1,1,1,1,1],
        [1, , , ,1],
        [1,1,1,1],
        [1, , , ,1],
        [1, , , ,1],
        [1, , , ,1]
    ],
    "S": [
        [1,1,1,1,1],
        [1],
        [1,1,1,1,1],
        [ , , , ,1],
        [ , , , ,1],
        [1,1,1,1,1]
    ],
    "T": [
        [1,1,1,1,1],
        [ , ,1],
        [ , ,1],
        [ , ,1],
        [ , ,1],
        [ , ,1]
    ],
    "U": [
        [1, , , ,1],
        [1, , , ,1],
        [1, , , ,1],
        [1, , , ,1],
        [1, , , ,1],
        [1,1,1,1,1]
    ],
    "V": [
        [1, , , ,1],
        [1, , , ,1],
        [1, , , ,1],
        [1, , , ,1],
        [ ,1, ,1],
        [ , ,1]
    ],
    "W": [
        [1, , , ,1],
        [1, , , ,1],
        [1, , , ,1],
        [1, , , ,1],
        [1, ,1, ,1],
        [1,1, ,1,1]
    ],
    "X": [
        [1, , , ,1],
        [ ,1, ,1],
        [ , ,1],
        [ ,1, ,1],
        [1, , , ,1],
        [1, , , ,1]
    ],
    "Y": [
        [1, , , ,1],
        [1, , , ,1],
        [1,1,1,1,1],
        [ , ,1],
        [ , ,1],
        [ , ,1]
    ],
    "Z": [
        [1,1,1,1,1],
        [ , , , ,1],
        [ , , ,1],
        [ , ,1],
        [ ,1],
        [1,1,1,1,1]
    ],
    "0": [
        [1,1,1,1,1],
        [1, , , ,1],
        [1,1, , ,1],
        [1, ,1, ,1],
        [1, , ,1,1],
        [1,1,1,1,1]
    ],
    "1": [
        [1,1,1],
        [ , ,1],
        [ , ,1],
        [ , ,1],
        [ , ,1],
        [1,1,1,1,1]
    ],
    "2": [
        [ ,1,1,1, ],
        [1, , , ,1],
        [ , , ,1],
        [ , ,1],
        [ ,1],
        [1,1,1,1,1]
    ],
    "3": [
        [ ,1,1,1],
        [1, , , ,1],
        [ , ,1,1, ],
        [ , , , ,1],
        [1, , , ,1],
        [ ,1,1,1]
    ],
    "4": [
        [1, , , ,1],
        [1, , , ,1],
        [1,1,1,1,1],
        [ , , , ,1],
        [ , , , ,1],
        [ , , , ,1]
    ],
    "5": [
        [1,1,1,1,1],
        [1],
        [1,1,1,1, ],
        [ , , , ,1],
        [ , , , ,1],
        [1,1,1,1]
    ],
    "6": [
        [ ,1,1,1,1],
        [1,],
        [1,1,1,1],
        [1, , , ,1],
        [1, , , ,1],
        [ ,1,1,1]
    ],
    "7": [
        [1,1,1,1,1],
        [ , , , ,1],
        [ , , ,1],
        [ , ,1],
        [ , ,1],
        [ , ,1]
    ],
    "8": [
        [ ,1,1,1],
        [1, , , ,1],
        [ ,1,1,1],
        [1, , , ,1],
        [1, , , ,1],
        [ ,1,1,1]
    ],
    "9": [
        [ ,1,1,1, ],
        [1, , , ,1],
        [ ,1,1,1,1],
        [ , , , ,1],
        [1, , , ,1],
        [ ,1,1,1, ]
    ],
    "+": [
        [ , ,1],
        [ , ,1],
        [1,1,1,1,1],
        [ , ,1],
        [ , ,1],
        []
    ],
    /*
    "+": [
        [],
        [ ,1],
        [1,1,1],
        [ ,1],
        []
    ],
    */
    "-": [
        [],
        [],
        [1,1,1,1,1],
        [],
        [],
        []
    ],
    "_": [
        [],
        [],
        [],
        [],
        [],
        [1,1,1,1,1]
    ],
    "(": [
        [ ,1],
        [1],
        [1],
        [1],
        [1],
        [ ,1]
    ],
    ")": [
        [1],
        [ ,1],
        [ ,1],
        [ ,1],
        [ ,1],
        [1]
    ],
    "{": [
        [ ,1,1],
        [ ,1],
        [1],
        [ ,1],
        [ ,1],
        [ ,1,1]
    ],
    "}": [
        [1,1],
        [ ,1],
        [ , ,1],
        [ ,1],
        [ ,1],
        [1,1]
    ],
    "[": [
        [1,1],
        [1],
        [1],
        [1],
        [1],
        [1,1]
    ],
    "]": [
        [1,1],
        [ ,1],
        [ ,1],
        [ ,1],
        [ ,1],
        [1,1]
    ],
    "=": [
        [],
        [1,1,1,1,1],
        [],
        [1,1,1,1,1],
        [],
        []
    ],
    "/": [
        [ , , , ,1],
        [ , , ,1],
        [ , ,1],
        [ , ,1],
        [ ,1],
        [1]
    ],
    "\\": [
        [1],
        [ ,1],
        [ , ,1],
        [ , ,1],
        [ , , ,1],
        [ , , , ,1]
    ],
    "%": [
        [1, , , ,1],
        [1, , ,1],
        [ , ,1],
        [ , ,1],
        [ ,1, , ,1],
        [1, , , ,1]
    ],
    ".": [
        [],
        [],
        [],
        [],
        [],
        [1]
    ],
    "*": [
        [1, ,1],
        [ ,1],
        [1, ,1],
        [],
        []
    ],
    ":": [
        [],
        [1],
        [],
        [1],
        [],
        []
    ],
    ",": [
        [],
        [],
        [],
        [],
        [1],
        [1]
    ],
    ";": [
        [],
        [],
        [1],
        [],
        [1],
        [1]
    ],
    "!": [
        [1],
        [1],
        [1],
        [1],
        [],
        [1]
    ],
    "¡": [
        [1],
        [],
        [1],
        [1],
        [1],
        [1]
    ],
    "?": [
        [ ,1,1,1],
        [1, , , ,1],
        [ , ,1,1],
        [ , ,1],
        [],
        [ , ,1]
    ],
    "¿": [
        [ , ,1],
        [],
        [ , ,1],
        [ ,1,1],
        [1, , , ,1],
        [ ,1,1,1]
    ],
    '"':[
        [1, ,1],
        [1, ,1],
        [],
        [],
        [],
        []
    ],
    "<": [
        [ , ,1],
        [ ,1],
        [1],
        [1],
        [ ,1],
        [ , ,1]
    ],
    ">": [
        [1],
        [ ,1],
        [ , ,1],
        [ , ,1],
        [ ,1],
        [1]
    ],
    '\'':[
        [1],
        [1],
        [],
        [],
        [],
        []
    ],
    "°": [
        [1,1,1],
        [1, ,1],
        [1,1,1],
        [],
        [],
        []
    ],
    "|": [
        [1],
        [1],
        [1],
        [1],
        [1],
        [1]
    ],
    "♥": [
        [ ,1, ,1],
        [1,1,1,1,1],
        [1,1,1,1,1],
        [ ,1,1,1],
        [ , ,1],
        []
    ],
    "#": [
      [ ,1, ,1],
      [1,1,1,1,1],
      [ ,1, ,1],
      [1,1,1,1,1],
      [ ,1, ,1],
      []
    ],
    "^": [
      [ ,1],
      [1, ,1],
      [],
      [],
      [],
      []
    ],
    " ": [
        [ , , ],
        [ , , ],
        [ , , ],
        [ , , ],
        [ , , ],
        [ , , ]
    ],
    "@": [
        [],
        [],
        [],
        [],
        [],
        []
    ]
  },
  "cubecraft6x5": {
    "Name": "Cubecraft 6px",
    "Height": 6,
    "A": [
      [1,1,1,1,1],
      [1,1,1,1,1],
      [1,1, ,1,1],
      [1,1,1,1,1],
      [1,1,1,1,1],
      [1,1, ,1,1]
    ],
    "B": [
      [1,1,1,1, ],
      [1,1, ,1,1],
      [1,1,1,1, ],
      [1,1, ,1,1],
      [1,1, ,1,1],
      [1,1,1,1, ]
    ],
    "C": [
      [ ,1,1,1,1],
      [1,1,1,1,1],
      [1,1, , , ],
      [1,1, , , ],
      [1,1,1,1,1],
      [ ,1,1,1,1]
    ],
    "D": [
      [1,1,1,1, ],
      [1,1,1,1,1],
      [1,1, ,1,1],
      [1,1, ,1,1],
      [1,1,1,1,1],
      [1,1,1,1, ]
    ],
    "E": [
      [1,1,1,1,1],
      [1,1,1,1,1],
      [1,1, , , ],
      [1,1,1,1, ],
      [1,1, , , ],
      [1,1,1,1,1]
    ],
    "F": [
      [1,1,1,1,1],
      [1,1,1,1,1],
      [1,1, , , ],
      [1,1,1,1, ],
      [1,1, , , ],
      [1,1, , , ]
    ],
    "G": [
      [ ,1,1,1,1, ],
      [1,1, , ,1,1],
      [1,1, , , , ],
      [1,1, ,1,1,1],
      [1,1, , ,1,1],
      [ ,1,1,1,1, ]
    ],
    "H": [
      [1,1, ,1,1],
      [1,1, ,1,1],
      [1,1,1,1,1],
      [1,1,1,1,1],
      [1,1, ,1,1],
      [1,1, ,1,1]
    ],
    "I": [
      [1,1],
      [1,1],
      [1,1],
      [1,1],
      [1,1],
      [1,1]
    ],
    "J": [
      [ , ,1,1],
      [ , ,1,1],
      [ , ,1,1],
      [ , ,1,1],
      [1,1,1,1],
      [1,1,1, ]
    ],
    "K": [
      [1,1, ,1,1,1],
      [1,1, ,1,1,1],
      [1,1,1,1, , ],
      [1,1,1,1,1, ],
      [1,1, ,1,1,1],
      [1,1, , ,1,1]
    ],
    "L": [
      [1,1, , , ],
      [1,1, , , ],
      [1,1, , , ],
      [1,1, , , ],
      [1,1,1,1,1],
      [1,1,1,1,1]
    ],
    "M": [
      [1,1, , , ,1,1],
      [1,1,1, ,1,1,1],
      [1,1,1,1,1,1,1],
      [1,1, ,1, ,1,1],
      [1,1, , , ,1,1],
      [1,1, , , ,1,1]
    ],
    "N": [
      [1,1, , ,1,1],
      [1,1,1, ,1,1],
      [1,1,1,1,1,1],
      [1,1,1,1,1,1],
      [1,1, ,1,1,1],
      [1,1, , ,1,1]
    ],
    "Ñ": [
      [1,1,1,1,1,1],
      [ , , , , , ],
      [1,1,1, ,1,1],
      [1,1,1,1,1,1],
      [1,1, ,1,1,1],
      [1,1, , ,1,1]
    ],
    "O": [
      [ ,1,1,1,1, ],
      [1,1,1,1,1,1],
      [1,1, , ,1,1],
      [1,1, , ,1,1],
      [1,1,1,1,1,1],
      [ ,1,1,1,1, ]
    ],
    "P": [
      [1,1,1,1, ],
      [1,1,1,1,1],
      [1,1, ,1,1],
      [1,1,1,1, ],
      [1,1, , , ],
      [1,1, , , ]
    ],
    "Q": [
      [ ,1,1,1,1, ],
      [1,1,1,1,1,1],
      [1,1, , ,1,1],
      [1,1, ,1,1,1],
      [1,1,1,1,1, ],
      [ ,1,1,1, ,1]
    ],
    "R": [
      [1,1,1,1, ],
      [1,1,1,1,1],
      [1,1, ,1,1],
      [1,1,1,1, ],
      [1,1, ,1,1],
      [1,1, ,1,1]
    ],
    "S": [
      [1,1,1,1],
      [1,1,1,1],
      [1,1, , ],
      [1,1,1,1],
      [ ,1,1,1],
      [1,1,1,1]
    ],
    "T": [
      [1,1,1,1,1,1],
      [1,1,1,1,1,1],
      [ , ,1,1, , ],
      [ , ,1,1, , ],
      [ , ,1,1, , ],
      [ , ,1,1, , ]
    ],
    "U": [
      [1,1, , ,1,1],
      [1,1, , ,1,1],
      [1,1, , ,1,1],
      [1,1, , ,1,1],
      [1,1,1,1,1,1],
      [ ,1,1,1,1, ]
    ],
    "V": [
      [1,1, , ,1,1],
      [1,1, , ,1,1],
      [1,1, , ,1,1],
      [1,1, , ,1,1],
      [ ,1,1,1,1, ],
      [ , ,1,1, , ]
    ],
    "W": [
      [1,1, , , ,1,1],
      [1,1, , , ,1,1],
      [1,1, , , ,1,1],
      [1,1, ,1, ,1,1],
      [1,1,1,1,1,1,1],
      [ ,1,1, ,1,1, ]
    ],
    "X": [
      [1,1, , ,1,1],
      [1,1,1,1,1,1],
      [ ,1,1,1,1, ],
      [ ,1,1,1,1, ],
      [1,1,1,1,1,1],
      [1,1, , ,1,1]
    ],
    "Y": [
      [1,1, , ,1,1],
      [1,1, , ,1,1],
      [1,1,1,1,1,1],
      [ ,1,1,1,1, ],
      [ , ,1,1, , ],
      [ , ,1,1, , ]
    ],
    "Z": [
      [1,1,1,1,1,1],
      [1,1,1,1,1,1],
      [ , ,1,1,1, ],
      [ ,1,1,1, , ],
      [1,1,1,1,1,1],
      [1,1,1,1,1,1]
    ],
    "0": [
      [ ,1,1,1, ],
      [1,1, ,1,1],
      [1,1, ,1,1],
      [1,1, ,1,1],
      [1,1, ,1,1],
      [ ,1,1,1, ]
    ],
    "1": [
      [1,1,1, ],
      [1,1,1, ],
      [ ,1,1, ],
      [ ,1,1, ],
      [1,1,1,1],
      [1,1,1,1]
    ],
    "2": [
      [1,1,1,1,1],
      [1,1, ,1,1],
      [ , ,1,1, ],
      [ ,1,1, , ],
      [1,1,1,1,1],
      [1,1,1,1,1]
    ],
    "3": [
      [1,1,1,1,1],
      [1,1,1,1,1],
      [ , , ,1,1],
      [ ,1,1,1,1],
      [ , , ,1,1],
      [1,1,1,1,1]
    ],
    "4": [
      [1,1, ,1,1],
      [1,1, ,1,1],
      [1,1,1,1,1],
      [1,1,1,1,1],
      [ , , ,1,1],
      [ , , ,1,1]
    ],
    "5": [
      [1,1,1,1,1],
      [1,1,1,1,1],
      [1,1,1, , ],
      [1,1,1,1,1],
      [ , ,1,1,1],
      [1,1,1,1,1]
    ],
    "6": [
      [ ,1,1,1,1, ],
      [1,1, , ,1,1],
      [1,1, , , , ],
      [1,1,1,1,1,1],
      [1,1, , ,1,1],
      [ ,1,1,1,1, ]
    ],
    "7": [
      [1,1,1,1,1,1],
      [1,1,1,1,1,1],
      [ , , ,1,1, ],
      [ , ,1,1, , ],
      [ , ,1,1, , ],
      [ , ,1,1, , ]
    ],
    "8": [
      [ ,1,1,1, ],
      [1,1, ,1,1],
      [ ,1,1,1, ],
      [1,1, ,1,1],
      [1,1, ,1,1],
      [ ,1,1,1, ]
    ],
    "9": [
      [ ,1,1,1, ],
      [1,1, ,1,1],
      [1,1, ,1,1],
      [ ,1,1,1,1],
      [ , , ,1,1],
      [1,1,1,1, ]
    ],
    "+": [
      [ , ,1,1, , ],
      [ , ,1,1, , ],
      [1,1,1,1,1,1],
      [1,1,1,1,1,1],
      [ , ,1,1, , ],
      [ , ,1,1, , ]
    ],
    "-": [
      [ , , , , , ],
      [ , , , , , ],
      [1,1,1,1,1,1],
      [1,1,1,1,1,1],
      [ , , , , , ],
      [ , , , , , ]
    ],
    "_": [
      [ , , , , , ],
      [ , , , , , ],
      [ , , , , , ],
      [ , , , , , ],
      [1,1,1,1,1,1],
      [1,1,1,1,1,1]
    ],
    "(": [
      [ ,1,1],
      [1,1, ],
      [1,1, ],
      [1,1, ],
      [1,1, ],
      [ ,1,1]
    ],
    ")": [
      [1,1, ],
      [ ,1,1],
      [ ,1,1],
      [ ,1,1],
      [ ,1,1],
      [1,1, ]
    ],
    "{": [
      [ ,1,1],
      [ ,1, ],
      [1,1, ],
      [1,1, ],
      [ ,1, ],
      [ ,1,1]
    ],
    "}": [
      [1,1, ],
      [ ,1, ],
      [ ,1,1],
      [ ,1,1],
      [ ,1, ],
      [1,1, ]
    ],
    "[": [
      [1,1,1],
      [1,1,1],
      [1,1, ],
      [1,1, ],
      [1,1,1],
      [1,1,1]
    ],
    "]": [
      [1,1,1],
      [1,1,1],
      [ ,1,1],
      [ ,1,1],
      [1,1,1],
      [1,1,1]
    ],
    "=": [
      [ , , , , , ],
      [1,1,1,1,1,1],
      [ , , , , , ],
      [1,1,1,1,1,1],
      [ , , , , , ],
      [ , , , , , ]
    ],
    "/": [
      [ , , , ,1],
      [ , , ,1,1],
      [ , ,1,1, ],
      [ ,1,1, , ],
      [1,1, , , ],
      [1, , , , ]
    ],
    "\\": [
      [1, , , , ],
      [1,1, , , ],
      [ ,1,1, , ],
      [ , ,1,1, ],
      [ , , ,1,1],
      [ , , , ,1]
    ],
    "%": [
      [1, , , ,1],
      [ , , ,1,1],
      [ , ,1,1, ],
      [ ,1,1, , ],
      [1,1, , , ],
      [1, , , ,1]
    ],
    ".": [
      [ , ],
      [ , ],
      [ , ],
      [ , ],
      [1,1],
      [1,1]
    ],
    "*": [
      [1, ,1],
      [ ,1, ],
      [1, ,1],
      [ , , ],
      [ , , ],
      [ , , ]
    ],
    ":": [
      [ ],
      [ ],
      [1],
      [ ],
      [1],
      [ ]
    ],
    ";": [
      [ ],
      [ ],
      [1],
      [ ],
      [1],
      [1]
    ],
    "!": [
      [1,1],
      [1,1],
      [1,1],
      [1,1],
      [ , ],
      [1,1]
    ],
    "¡": [
      [1,1],
      [ , ],
      [1,1],
      [1,1],
      [1,1],
      [1,1]
    ],
    "?": [
      [ ,1,1,1,1, ],
      [1,1, ,1,1,1],
      [1, , ,1,1,1],
      [ , ,1,1,1, ],
      [ , , , , , ],
      [ , ,1,1, , ]
    ],
    "¿": [
      [ , ,1,1, , ],
      [ , , , , , ],
      [ ,1,1,1, , ],
      [1,1,1, , ,1],
      [1,1,1, ,1,1],
      [ ,1,1,1,1, ]
    ],
    "\"": [
      [1, ,1],
      [1, ,1],
      [ , , ],
      [ , , ],
      [ , , ],
      [ , , ]
    ],
    "<": [
      [ , ,1,1],
      [ ,1,1, ],
      [1,1, , ],
      [1,1, , ],
      [ ,1,1, ],
      [ , ,1,1]
    ],
    ">": [
      [1,1, , ],
      [ ,1,1, ],
      [ , ,1,1],
      [ , ,1,1],
      [ ,1,1, ],
      [1,1, , ]
    ],
    '\'': [
        [1],
        [1],
        [ ],
        [ ],
        [ ],
        [ ]
    ],
    "°": [
        [1,1,1],
        [1, ,1],
        [1,1,1],
        [ , , ],
        [ , , ],
        [ , , ]
    ],
    "|": [
        [1],
        [1],
        [1],
        [1],
        [1],
        [1]
    ],
    "♥": [
        [ ,1,1, ,1,1, ],
        [1,1,1,1,1,1,1],
        [1,1,1,1,1,1,1],
        [ ,1,1,1,1,1, ],
        [ , ,1,1,1, , ],
        [ , , ,1, , , ]
    ],
    "#": [
        [ ,1, ,1, ],
        [ ,1, ,1, ],
        [1,1,1,1,1],
        [ ,1, ,1, ],
        [1,1,1,1,1],
        [ ,1, ,1, ]
    ],
    " ": [
        [ , , ],
        [ , , ],
        [ , , ],
        [ , , ],
        [ , , ],
        [ , , ]
    ],
    "@": [
        [],
        [],
        [],
        [],
        [],
        []
    ]
  },
  "bloody7x5": {
    "Name": "Bloody 7px",
    "Height": 7,
    "0": [
      [ ,1,1,1, ],
      [1,1, ,1,1],
      [1,1, ,1,1],
      [1,1, ,1,1],
      [1,1, ,1,1],
      [1,1,1,1,1],
      [ ,1,1,1, ]
    ],
    "1": [
      [ ,1,1],
      [1,1,1],
      [ ,1,1],
      [ ,1,1],
      [ ,1,1],
      [ ,1,1],
      [ , ,1]
    ],
    "2": [
      [1,1,1,1, ],
      [1,1, ,1,1],
      [ , , ,1, ],
      [ ,1,1,1, ],
      [ ,1, , , ],
      [1,1, , , ],
      [ ,1,1,1,1]
    ],
    "3": [
      [1,1,1,1,1],
      [ , , ,1,1],
      [ , ,1,1, ],
      [ , , ,1,1],
      [1,1, ,1,1],
      [ ,1,1,1, ],
      [ , ,1, , ]
    ],
    "4": [
      [ ,1, , ,1, ],
      [1,1, ,1,1, ],
      [1,1, ,1,1, ],
      [1,1,1,1,1,1],
      [ , , ,1,1, ],
      [ , , ,1,1, ],
      [ , , , ,1, ]
    ],
    "5": [
      [1,1,1,1, ],
      [1,1, , , ],
      [1,1,1,1, ],
      [1,1,1,1,1],
      [ , , ,1,1],
      [ , , ,1,1],
      [ ,1,1,1, ]
    ],
    "6": [
      [ ,1,1, , ],
      [1,1, , , ],
      [1,1,1,1, ],
      [1,1,1,1,1],
      [1,1, ,1,1],
      [1,1, ,1,1],
      [ ,1,1,1, ]
    ],
    "7": [
      [1,1,1,1,1],
      [ , ,1,1,1],
      [ , ,1,1,1],
      [ ,1,1,1, ],
      [1,1,1, , ],
      [1,1, , , ],
      [ ,1, , , ]
    ],
    "8": [
      [ ,1,1,1,1, ],
      [ ,1,1, ,1,1],
      [ ,1,1,1,1,1],
      [1,1,1,1,1,1],
      [1,1, , , ,1],
      [1,1,1,1,1,1],
      [ , ,1,1,1, ]
    ],
    "9": [
      [ ,1,1,1, ],
      [1,1, ,1,1],
      [1,1, ,1,1],
      [1,1,1,1,1],
      [ ,1,1,1,1],
      [ , , ,1,1],
      [ , ,1,1, ]
    ],
    "A": [
      [ ,1,1,1, ],
      [1,1, ,1,1],
      [1,1,1,1,1],
      [1,1,1,1,1],
      [1,1, ,1,1],
      [1,1, , ,1],
      [ ,1, , , ]
    ],
    "B": [
      [ ,1,1,1, ],
      [1,1, ,1,1],
      [1,1,1,1, ],
      [1,1,1,1,1],
      [1,1, ,1,1],
      [1,1,1,1, ],
      [ ,1,1, , ]
    ],
    "C": [
      [ ,1,1,1, ],
      [1,1, ,1,1],
      [1,1, , , ],
      [1,1, , , ],
      [1,1, , , ],
      [1,1,1,1, ],
      [ ,1,1,1, ]
    ],
    "D": [
      [1,1,1,1,1, ],
      [ ,1,1, ,1,1],
      [ ,1,1, ,1,1],
      [ ,1,1, ,1,1],
      [ ,1,1, ,1,1],
      [ ,1,1,1,1, ],
      [ , ,1,1, , ]
    ],
    "E": [
      [ ,1,1,1,1],
      [1,1, , , ],
      [1,1,1,1, ],
      [1,1, , , ],
      [1,1, ,1, ],
      [ ,1,1,1, ],
      [ ,1, , , ]
    ],
    "F": [
      [1,1,1,1,1],
      [1,1, , , ],
      [1,1,1,1, ],
      [1,1,1,1, ],
      [1,1, , , ],
      [1,1, , , ],
      [ ,1, , , ]
    ],
    "G": [
      [ ,1,1, , ],
      [1,1, , , ],
      [1,1, ,1,1],
      [1,1, ,1,1],
      [1,1,1,1,1],
      [ ,1,1, ,1],
      [ , , , ,1]
    ],
    "H": [
      [1, , ,1, ],
      [1,1, ,1,1],
      [1,1, ,1,1],
      [1,1,1,1,1],
      [1,1, ,1,1],
      [1,1, ,1,1],
      [ ,1, , ,1]
    ],
    "I": [
      [ ,1],
      [1,1],
      [1,1],
      [1,1],
      [1,1],
      [1,1],
      [1, ]
    ],
    "J": [
      [ , ,1,1],
      [ , ,1,1],
      [ , ,1,1],
      [ , ,1,1],
      [1, ,1,1],
      [1,1,1,1],
      [1,1,1, ]
    ],
    "K": [
      [ ,1, , ,1],
      [1,1, ,1,1],
      [1,1,1,1, ],
      [1,1, ,1,1],
      [1,1, ,1,1],
      [1,1, , ,1],
      [ ,1, , , ]
    ],
    "L": [
      [ ,1, ],
      [1,1, ],
      [1,1, ],
      [1,1, ],
      [1,1, ],
      [1,1, ],
      [ ,1,1]
    ],
    "M": [
      [ ,1, , , ,1,1, ],
      [1,1,1, ,1,1,1,1],
      [1,1,1,1,1, ,1,1],
      [1,1, ,1,1, ,1,1],
      [1,1, , ,1, ,1,1],
      [1, , , , , ,1,1],
      [ , , , , , ,1, ]
    ],
    "N": [
      [1,1, , ,1,1],
      [1,1,1, ,1,1],
      [1,1,1,1,1,1],
      [1,1,1,1,1,1],
      [1,1, ,1,1,1],
      [1,1, , ,1, ],
      [ ,1, , , , ]
    ],
    "Ñ": [
      [1,1,1,1,1,1],
      [ , , , , , ],
      [1,1, , ,1,1],
      [1,1,1, ,1,1],
      [1,1,1,1,1,1],
      [1,1, ,1,1,1],
      [1, , , ,1, ]
    ],
    "O": [
      [ ,1,1,1,1, ],
      [1,1, ,1,1,1],
      [1,1, , ,1,1],
      [1,1, , ,1,1],
      [1,1, , ,1,1],
      [ ,1,1,1,1,1],
      [ , ,1,1,1, ]
    ],
    "P": [
      [1,1,1,1, ],
      [1,1, ,1,1],
      [1,1, ,1,1],
      [1,1,1,1, ],
      [1,1, , , ],
      [1,1, , , ],
      [ ,1, , , ]
    ],
    "Q": [
      [ ,1,1,1,1, ],
      [1,1, , ,1,1],
      [1,1, , ,1,1],
      [1,1,1, ,1,1],
      [1,1,1,1,1, ],
      [ , ,1,1, , ],
      [ , , ,1,1, ]
    ],
    "R": [
      [ ,1,1,1, ],
      [1,1, ,1,1],
      [1,1,1,1,1],
      [1,1,1,1, ],
      [1,1, ,1,1],
      [1,1, , ,1],
      [ ,1, , , ]
    ],
    "S": [
      [ ,1,1,1, ],
      [1,1, , , ],
      [1,1,1,1,1],
      [1,1,1,1,1],
      [ , , ,1,1],
      [ , , ,1,1],
      [ ,1,1,1, ]
    ],
    "T": [
      [1,1,1,1,1],
      [ ,1,1, , ],
      [ ,1,1, , ],
      [ ,1,1, , ],
      [ ,1,1, , ],
      [ ,1,1, , ],
      [ , ,1, , ]
    ],
    "U": [
      [1,1, ,1, ],
      [1,1, ,1,1],
      [1,1, ,1,1],
      [1,1, ,1,1],
      [1,1, ,1,1],
      [ ,1,1,1,1],
      [ , , , ,1]
    ],
    "V": [
      [ , , ,1, ],
      [ , , ,1,1],
      [1, , ,1,1],
      [1,1, ,1,1],
      [1,1, ,1,1],
      [ ,1,1,1, ],
      [ , ,1, , ]
    ],
    "W": [
      [1, , , , , ,1, ],
      [1,1, , , , ,1,1],
      [1,1, , ,1, ,1,1],
      [1,1, ,1,1, ,1,1],
      [1,1,1,1,1, ,1,1],
      [1,1,1, ,1,1,1,1],
      [ ,1, , , ,1,1, ]
    ],
    "X": [
      [1, , , ,1, ],
      [1,1, ,1,1,1],
      [ ,1,1,1,1, ],
      [ , ,1,1, , ],
      [ ,1,1,1,1, ],
      [ ,1,1, ,1,1],
      [ , , , ,1, ]
    ],
    "Y": [
      [ ,1, , ,1],
      [1,1, , ,1],
      [1,1,1, ,1],
      [ ,1,1,1,1],
      [ , , , ,1],
      [ ,1,1,1,1],
      [ , ,1,1, ]
    ],
    "Z": [
      [1,1,1,1, ],
      [1, ,1,1,1],
      [ , ,1,1, ],
      [ , ,1,1, ],
      [ ,1,1, , ],
      [1,1, , , ],
      [ ,1,1,1,1]
    ],
    "+": [
      [ , , ],
      [ , , ],
      [ ,1, ],
      [1,1,1],
      [ ,1, ],
      [ , , ],
      [ , , ]
    ],
    "-": [
      [ , , ],
      [ , , ],
      [ , , ],
      [1,1,1],
      [ , , ],
      [ , , ],
      [ , , ]
    ],
    "_": [
      [ , , ],
      [ , , ],
      [ , , ],
      [ , , ],
      [ , , ],
      [ , , ],
      [1,1,1]
    ],
    "(": [
      [ ,1,1],
      [1,1, ],
      [1,1, ],
      [1,1, ],
      [1,1, ],
      [1,1, ],
      [ ,1,1]
    ],
    ")": [
      [1,1, ],
      [ ,1,1],
      [ ,1,1],
      [ ,1,1],
      [ ,1,1],
      [ ,1,1],
      [1,1, ]
    ],
    "{": [
      [ , ,1,1],
      [ ,1,1, ],
      [ ,1,1, ],
      [1,1, , ],
      [ ,1,1, ],
      [ ,1,1, ],
      [ , ,1,1]
    ],
    "}": [
      [1,1, , ],
      [ ,1,1, ],
      [ ,1,1, ],
      [ , ,1,1],
      [ ,1,1, ],
      [ ,1,1, ],
      [1,1, , ]
    ],
    "[": [
      [1,1,1],
      [1,1, ],
      [1,1, ],
      [1,1, ],
      [1,1, ],
      [1,1, ],
      [1,1,1]
    ],
    "]": [
      [1,1,1],
      [ ,1,1],
      [ ,1,1],
      [ ,1,1],
      [ ,1,1],
      [ ,1,1],
      [1,1,1]
    ],
    "=": [
      [ , , ],
      [ , , ],
      [1,1,1],
      [ , , ],
      [1,1,1],
      [ , , ],
      [ , , ]
    ],
    "/": [
      [ , , , ,1],
      [ , , ,1,1],
      [ , ,1,1, ],
      [ , ,1, , ],
      [ ,1,1, , ],
      [1,1, , , ],
      [1, , , , ]
    ],
    "\\": [
      [1, , , , ],
      [1,1, , , ],
      [ ,1,1, , ],
      [ , ,1, , ],
      [ , ,1,1, ],
      [ , , ,1,1],
      [ , , , ,1]
    ],
    "%": [
      [1,1, , ,1],
      [1,1, ,1,1],
      [ , ,1,1, ],
      [ , ,1, , ],
      [ ,1,1, , ],
      [1,1, ,1,1],
      [1, , ,1,1]
    ],
    ".": [
      [ , ],
      [ , ],
      [ , ],
      [ , ],
      [ , ],
      [1,1],
      [1,1]
    ],
    "*": [
      [1, ,1],
      [ ,1, ],
      [1, ,1],
      [ , , ],
      [ , , ],
      [ , , ],
      [ , , ]
    ],
    ":": [
      [ , ],
      [1,1],
      [1,1],
      [ , ],
      [1,1],
      [1,1],
      [ , ]
    ],
    ",": [
      [ , ],
      [ , ],
      [ , ],
      [ , ],
      [1,1],
      [1,1],
      [ ,1]
    ],
    ";": [
      [ , ],
      [ , ],
      [1,1],
      [ , ],
      [1,1],
      [1,1],
      [ ,1]
    ],
    "!": [
      [ ,1,1],
      [1,1,1],
      [1,1,1],
      [1,1, ],
      [ ,1, ],
      [ , , ],
      [1,1, ]
    ],
    "¡": [
      [ ,1,1],
      [ , , ],
      [ ,1, ],
      [ ,1,1],
      [1,1,1],
      [1,1,1],
      [1,1, ]
    ],
    "?": [
      [ ,1,1,1,1],
      [1,1, ,1,1],
      [ , , ,1,1],
      [ , ,1,1, ],
      [ ,1,1, , ],
      [ , , , , ],
      [ ,1,1, , ]
    ],
    "¿": [
      [ , ,1,1, ],
      [ , , , , ],
      [ , ,1,1, ],
      [ ,1,1, , ],
      [1,1, , , ],
      [1,1, ,1,1],
      [1,1,1,1, ]
    ],
    "\"": [
      [1,1, ,1,1],
      [1,1, ,1,1],
      [ ,1, , ,1],
      [ , , , , ],
      [ , , , , ],
      [ , , , , ],
      [ , , , , ]
    ],
    "<": [
      [ , , ,1,1],
      [ , ,1,1, ],
      [ ,1,1, , ],
      [1,1, , , ],
      [ ,1,1, , ],
      [ , ,1,1, ],
      [ , , ,1,1]
    ],
    ">": [
      [1,1, , , ],
      [ ,1,1, , ],
      [ , ,1,1, ],
      [ , , ,1,1],
      [ , ,1,1, ],
      [ ,1,1, , ],
      [1,1, , , ]
    ],
    "'": [
      [1,1],
      [1,1],
      [ ,1],
      [ , ],
      [ , ],
      [ , ],
      [ , ]
    ],
    "°": [
      [ ,1,1, ],
      [1, , ,1],
      [1, , ,1],
      [ ,1,1, ],
      [ , , , ],
      [ , , , ],
      [ , , , ]
    ],
    "|": [
      [1,1],
      [1,1],
      [1,1],
      [1,1],
      [1,1],
      [1,1],
      [ ,1]
    ],
    "♥": [
      [ ,1,1, , , ,1,1, ],
      [1,1,1,1, ,1,1,1,1],
      [1,1,1,1,1,1,1,1,1],
      [ ,1,1,1,1,1,1,1, ],
      [ , ,1,1,1,1,1, , ],
      [ , , ,1,1,1, , , ],
      [ , , , ,1, , , , ]
    ],
    "#": [
      [ , ,1, ,1,1, ],
      [ ,1,1, ,1,1, ],
      [1,1,1,1,1,1,1],
      [ ,1,1, ,1,1, ],
      [1,1,1,1,1,1,1],
      [ ,1,1, ,1,1, ],
      [ ,1, , ,1, , ]
    ],
    "^": [
      [ , ,1, , ],
      [ ,1,1,1, ],
      [1,1, ,1,1],
      [1, , , ,1],
      [ , , , , ],
      [ , , , , ],
      [ , , , , ]
    ],
    " ": [
      [ , , ],
      [ , , ],
      [ , , ],
      [ , , ],
      [ , , ],
      [ , , ],
      [ , , ]
    ],
    "@": [
      [],
      [],
      [],
      [],
      [],
      [],
      []
    ]
  },
  "pixel7x5": {
    //Disabled: true,
    "Name": "Pixel 7px",
    "Height": 7,
    "A": [
      [ , ,1, , ],
      [ ,1, ,1, ],
      [1, , , ,1],
      [1, , , ,1],
      [1,1,1,1,1],
      [1, , , ,1],
      [1, , , ,1]
    ],
    "B": [
      [ ,1,1,1, ],
      [1, , , ,1],
      [1, , , ,1],
      [1, ,1,1, ],
      [1, , , ,1],
      [1, , , ,1],
      [ ,1,1,1, ]
    ],
    "C": [
      [ ,1,1,1, ],
      [1, , , ,1],
      [1, , , ,1],
      [1, , , , ],
      [1, , , ,1],
      [1, , , ,1],
      [ ,1,1,1, ]
    ],
    "D": [
      [1,1,1, , ],
      [1, , ,1, ],
      [1, , , ,1],
      [1, , , ,1],
      [1, , , ,1],
      [1, , ,1, ],
      [1,1,1, , ]
    ],
    "E": [
      [ ,1,1,1, ],
      [1, , , ,1],
      [1, , , , ],
      [1,1,1, , ],
      [1, , , , ],
      [1, , , ,1],
      [ ,1,1,1, ]
    ],
    "F": [
      [1,1,1,1, ],
      [1, , , ,1],
      [1, , , , ],
      [1,1,1,1, ],
      [1, , , , ],
      [1, , , , ],
      [1, , , , ]
    ],
    "G": [
      [ ,1,1,1, ],
      [1, , , ,1],
      [1, , , ,1],
      [1, ,1, , ],
      [1, , ,1,1],
      [1, , , ,1],
      [ ,1,1,1, ]
    ],
    "H": [
      [1, , , ,1],
      [1, , , ,1],
      [1, , , ,1],
      [1,1,1,1,1],
      [1, , , ,1],
      [1, , , ,1],
      [1, , , ,1]
    ],
    "I": [
      [1,1,1],
      [ ,1, ],
      [ ,1, ],
      [ ,1, ],
      [ ,1, ],
      [ ,1, ],
      [1,1,1]
    ],
    "J": [
      [ ,1,1,1, ],
      [ , , , ,1],
      [ , , , ,1],
      [ , , , ,1],
      [1, , , ,1],
      [1, , , ,1],
      [ ,1,1,1, ]
    ],
    "K": [
      [ ,1, , ,1],
      [1, , ,1, ],
      [1, ,1, , ],
      [1,1, , , ],
      [1, ,1, , ],
      [1, , ,1, ],
      [1, , , ,1]
    ],
    "L": [
      [1, , , , ],
      [1, , , , ],
      [1, , , , ],
      [1, , , , ],
      [1, , , , ],
      [1, , , ,1],
      [ ,1,1,1, ]
    ],
    "M": [
      [ ,1, , , ,1, ],
      [1, ,1, ,1, ,1],
      [1, ,1, ,1, ,1],
      [1, , ,1, , ,1],
      [1, , ,1, , ,1],
      [1, , ,1, , ,1],
      [1, , , , , ,1]
    ],
    "N": [
      [1, , , ,1],
      [1,1, , ,1],
      [1, ,1, ,1],
      [1, ,1, ,1],
      [1, ,1, ,1],
      [1, , ,1,1],
      [1, , , ,1]
    ],
    "Ñ": [
      [1,1,1,1,1],
      [ , , , , ],
      [1, , , ,1],
      [1,1, , ,1],
      [1, ,1, ,1],
      [1, , ,1,1],
      [1, , , ,1]
    ],
    "O": [
      [ ,1,1,1, ],
      [1, , , ,1],
      [1, , , ,1],
      [1, , , ,1],
      [1, , , ,1],
      [1, , , ,1],
      [ ,1,1,1, ]
    ],
    "P": [
      [ ,1,1,1, ],
      [1, , , ,1],
      [1, , , ,1],
      [1, , , ,1],
      [1,1,1,1, ],
      [1, , , , ],
      [1, , , , ]
    ],
    "Q": [
      [ ,1,1,1, ],
      [1, , , ,1],
      [1, , , ,1],
      [1, , , ,1],
      [1, ,1, ,1],
      [1, , ,1, ],
      [ ,1,1, ,1]
    ],
    "R": [
      [1,1,1,1, ],
      [1, , , ,1],
      [1, , , ,1],
      [1, , , ,1],
      [1,1,1,1, ],
      [1, , ,1, ],
      [1, , , ,1]
    ],
    "S": [
      [ ,1,1,1, ],
      [1, , , ,1],
      [1, , , , ],
      [ ,1,1,1, ],
      [ , , , ,1],
      [1, , , ,1],
      [ ,1,1,1, ]
    ],
    "T": [
      [ ,1,1,1, ],
      [1, ,1, ,1],
      [ , ,1, , ],
      [ , ,1, , ],
      [ , ,1, , ],
      [ , ,1, , ],
      [ , ,1, , ]
    ],
    "U": [
      [1, , , ,1],
      [1, , , ,1],
      [1, , , ,1],
      [1, , , ,1],
      [1, , , ,1],
      [1, , , ,1],
      [ ,1,1,1, ]
    ],
    "V": [
      [1, , , ,1],
      [1, , , ,1],
      [1, , , ,1],
      [1, , , ,1],
      [ ,1, ,1, ],
      [ ,1, ,1, ],
      [ , ,1, , ]
    ],
    "W": [
      [1, , , , , ,1],
      [1, , ,1, , ,1],
      [1, , ,1, , ,1],
      [1, , ,1, , ,1],
      [1, ,1, ,1, ,1],
      [1, ,1, ,1, ,1],
      [ ,1, , , ,1, ]
    ],
    "X": [
      [1, , , ,1],
      [ ,1, ,1, ],
      [ ,1, ,1, ],
      [ , ,1, , ],
      [ ,1, ,1, ],
      [ ,1, ,1, ],
      [1, , , ,1]
    ],
    "Y": [
      [1, , , ,1],
      [1, , , ,1],
      [ ,1, ,1, ],
      [ , ,1, , ],
      [ , ,1, , ],
      [ , ,1, , ],
      [ , ,1, , ]
    ],
    "Z": [
      [ ,1,1,1,1],
      [1, , , ,1],
      [ , , ,1, ],
      [ , ,1, , ],
      [ ,1, , , ],
      [1, , , ,1],
      [1,1,1,1, ]
    ],
    "0": [
      [ ,1,1,1, ],
      [1, , , ,1],
      [1, , ,1,1],
      [1, ,1, ,1],
      [1,1, , ,1],
      [1, , , ,1],
      [ ,1,1,1, ]
    ],
    "1": [
      [ ,1, ],
      [1, ,1],
      [ , ,1],
      [ , ,1],
      [ , ,1],
      [ , ,1],
      [ , ,1]
    ],
    "2": [
      [ ,1,1,1, ],
      [1, , , ,1],
      [ , , , ,1],
      [ ,1,1,1, ],
      [1, , , , ],
      [1, , , ,1],
      [ ,1,1,1, ]
    ],
    "3": [
      [ ,1,1,1, ],
      [1, , , ,1],
      [ , , , ,1],
      [ ,1,1,1, ],
      [ , , , ,1],
      [1, , , ,1],
      [ ,1,1,1, ]
    ],
    "4": [
      [ , , ,1,1],
      [ , ,1, ,1],
      [ ,1, , ,1],
      [1, , , ,1],
      [1,1,1,1,1],
      [ , , , ,1],
      [ , , , ,1]
    ],
    "5": [
      [1,1,1,1,1],
      [1, , , , ],
      [1,1,1,1, ],
      [ , , , ,1],
      [ , , , ,1],
      [1, , , ,1],
      [ ,1,1,1, ]
    ],
    "6": [
      [ ,1,1,1, ],
      [1, , , ,1],
      [1, , , , ],
      [1,1,1,1, ],
      [1, , , ,1],
      [1, , , ,1],
      [ ,1,1,1, ]
    ],
    "7": [
      [ ,1,1,1, ],
      [1, , , ,1],
      [ , , , ,1],
      [ , , , ,1],
      [ , , , ,1],
      [ , , , ,1],
      [ , , , ,1]
    ],
    "8": [
      [ ,1,1,1, ],
      [1, , , ,1],
      [1, , , ,1],
      [ ,1,1,1, ],
      [1, , , ,1],
      [1, , , ,1],
      [ ,1,1,1, ]
    ],
    "9": [
      [ ,1,1,1, ],
      [1, , , ,1],
      [1, , , ,1],
      [ ,1,1,1,1],
      [ , , , ,1],
      [1, , , ,1],
      [ ,1,1,1, ]
    ],
    "+": [
      [ , , , , ],
      [ , ,1, , ],
      [ , ,1, , ],
      [1,1,1,1,1],
      [ , ,1, , ],
      [ , ,1, , ],
      [ , , , , ]
    ],
    "-": [
      [ , , , ],
      [ , , , ],
      [ , , , ],
      [1,1,1,1],
      [ , , , ],
      [ , , , ],
      [ , , , ]
    ],
    "_": [
      [ , , , ],
      [ , , , ],
      [ , , , ],
      [ , , , ],
      [ , , , ],
      [ , , , ],
      [1,1,1,1],
    ],
    "(": [
      [ , ,1],
      [ ,1, ],
      [1, , ],
      [1, , ],
      [1, , ],
      [ ,1, ],
      [ , ,1]
    ],
    ")": [
      [1, , ],
      [ ,1, ],
      [ , ,1],
      [ , ,1],
      [ , ,1],
      [ ,1, ],
      [1, , ]
    ],
    "{": [
      [ , ,1, ],
      [ ,1, ,1],
      [ ,1, , ],
      [1, , , ],
      [ ,1, , ],
      [ ,1, ,1],
      [ , ,1, ]
    ],
    "}": [
      [ ,1, , ],
      [1, ,1, ],
      [ , ,1, ],
      [ , , ,1],
      [ , ,1, ],
      [1, ,1, ],
      [ ,1, , ]
    ],
    "[": [
      [ ,1,1],
      [1, , ],
      [1, , ],
      [1, , ],
      [1, , ],
      [1, , ],
      [ ,1,1]
    ],
    "]": [
      [1,1, ],
      [ , ,1],
      [ , ,1],
      [ , ,1],
      [ , ,1],
      [ , ,1],
      [1,1, ]
    ],
    "=": [
      [ , , , ],
      [ , , , ],
      [1,1,1,1],
      [ , , , ],
      [1,1,1,1],
      [ , , , ],
      [ , , , ]
    ],
    "/": [
      [ , , , ,1],
      [ , , ,1, ],
      [ , , ,1, ],
      [ , ,1, , ],
      [ ,1, , , ],
      [ ,1, , , ],
      [1, , , , ]
    ],
    "\\": [
      [1, , , , ],
      [ ,1, , , ],
      [ ,1, , , ],
      [ , ,1, , ],
      [ , , ,1, ],
      [ , , ,1, ],
      [ , , , ,1]
    ],
    "%": [
      [1, , , ,1],
      [ , , ,1, ],
      [ , , ,1, ],
      [ , ,1, , ],
      [ ,1, , , ],
      [ ,1, , , ],
      [1, , , ,1]
    ],
    ".": [
      [ ],
      [ ],
      [ ],
      [ ],
      [ ],
      [ ],
      [1]
    ],
    "*": [
      [ ,1, ],
      [1,1,1],
      [ ,1, ],
      [1, ,1],
      [ , , ],
      [ , , ],
      [ , , ]
    ],
    ":": [
      [ ],
      [ ],
      [1],
      [ ],
      [1],
      [ ],
      [ ]
    ],
    ";": [
      [ ],
      [ ],
      [ ],
      [1],
      [ ],
      [1],
      [1]
    ],
    "!": [
      [1],
      [1],
      [1],
      [1],
      [1],
      [ ],
      [1]
    ],
    "¡": [
      [1],
      [ ],
      [1],
      [1],
      [1],
      [1],
      [1]
    ],
    "?": [
      [ ,1,1,1, ],
      [1, , , ,1],
      [1, , , ,1],
      [ , , ,1, ],
      [ , ,1, , ],
      [ , , , , ],
      [ , ,1, , ]
    ],
    "¿": [
      [ , ,1, , ],
      [ , , , , ],
      [ , ,1, , ],
      [ ,1, , , ],
      [1, , , ,1],
      [1, , , ,1],
      [ ,1,1,1, ]
    ],
    "\"": [
      [1, ,1],
      [1, ,1],
      [ , , ],
      [ , , ],
      [ , , ],
      [ , , ],
      [ , , ]
    ],
    "<": [
      [ , , ,1],
      [ , ,1, ],
      [ ,1, , ],
      [1, , , ],
      [ ,1, , ],
      [ , ,1, ],
      [ , , ,1]
    ],
    ">": [
      [1, , , ],
      [ ,1, , ],
      [ , ,1, ],
      [ , , ,1],
      [ , ,1, ],
      [ ,1, , ],
      [1, , , ]
    ],
    '\'': [
        [1],
        [1],
        [ ],
        [ ],
        [ ],
        [ ],
        [ ]
    ],
    "°": [
        [ ,1,1, ],
        [1, , ,1],
        [1, , ,1],
        [ ,1,1, ],
        [ , , , ],
        [ , , , ],
        [ , , , ]
    ],
    "|": [
        [1],
        [1],
        [1],
        [1],
        [1],
        [1],
        [1]
    ],
    "♥": [
        [ ,1,1, ,1,1, ],
        [1,1,1,1,1,1,1],
        [1,1,1,1,1,1,1],
        [1,1,1,1,1,1,1],
        [ ,1,1,1,1,1, ],
        [ , ,1,1,1, , ],
        [ , , ,1, , , ]
    ],
    "#": [
        [ , , , , ],
        [ ,1, ,1, ],
        [1,1,1,1,1],
        [ ,1, ,1, ],
        [1,1,1,1,1],
        [ ,1, ,1, ],
        [ , , , , ]
    ],
    " ": [
        [ , , ],
        [ , , ],
        [ , , ],
        [ , , ],
        [ , , ],
        [ , , ],
        [ , , ]
    ],
    "@": [
        [],
        [],
        [],
        [],
        [],
        [],
        []
    ]
  },
  "cross7x7": {
    "Name": "Cross 7px",
    "Height": 7,
    "0": [
      [ , ,1, , ],
      [ ,1, ,1, ],
      [1, , , ,1],
      [1, , , ,1],
      [1, , , ,1],
      [ ,1, ,1, ],
      [ , ,1, , ]
    ],
    "1": [
      [1,1, ],
      [ ,1, ],
      [ ,1, ],
      [ ,1, ],
      [ ,1, ],
      [ ,1, ],
      [1,1,1]
    ],
    "2": [
      [ ,1,1,1,1],
      [1, , , ,1],
      [ , , , ,1],
      [ , , ,1, ],
      [ , ,1, , ],
      [ ,1, , ,1],
      [1,1,1,1,1]
    ],
    "3": [
      [ ,1,1,1,1],
      [1, , , ,1],
      [ , , ,1, ],
      [ , ,1,1, ],
      [ , , , ,1],
      [1, , , ,1],
      [ ,1,1,1, ]
    ],
    "4": [
      [1, , ,1, ],
      [1, , ,1, ],
      [1, , ,1, ],
      [1, , ,1, ],
      [1,1,1,1,1],
      [ , , ,1, ],
      [ , , ,1, ]
    ],
    "5": [
      [1,1,1,1,1],
      [1, , , ,1],
      [1, , , , ],
      [ ,1,1,1, ],
      [ , , , ,1],
      [1, , , ,1],
      [ ,1,1,1, ]
    ],
    "6": [
      [ , ,1,1, ],
      [ ,1, , ,1],
      [1, , , , ],
      [1, ,1,1, ],
      [1,1, , ,1],
      [ ,1, , ,1],
      [ , ,1,1, ]
    ],
    "7": [
      [ ,1,1,1,1],
      [1, , , ,1],
      [ , , ,1, ],
      [ , ,1, , ],
      [ , ,1, , ],
      [ , ,1, , ],
      [ , ,1, , ]
    ],
    "8": [
      [ ,1,1,1, ],
      [1, , , ,1],
      [1, , , ,1],
      [ ,1,1,1, ],
      [1, , , ,1],
      [1, , , ,1],
      [ ,1,1,1, ]
    ],
    "9": [
      [ ,1,1,1, ],
      [1, , , ,1],
      [1, , , ,1],
      [ ,1,1,1,1],
      [ , , , ,1],
      [1, , ,1, ],
      [ ,1,1, , ]
    ],
    "A": [
      [ , ,1,1,1, , ],
      [ ,1,1, ,1,1, ],
      [ ,1, , , ,1, ],
      [ ,1,1,1,1,1, ],
      [ ,1, , , ,1, ],
      [ ,1, , , ,1, ],
      [1, ,1, ,1, ,1]
    ],
    "B": [
      [1, ,1,1,1, ],
      [ ,1, , , ,1],
      [ ,1, , , ,1],
      [ ,1,1,1,1, ],
      [ ,1, , , ,1],
      [ ,1, , , ,1],
      [1, ,1,1,1, ]
    ],
    "C": [
      [ , ,1,1,1, ],
      [ ,1, , , ,1],
      [1, , , , , ],
      [1, , , , , ],
      [1, , , , , ],
      [ ,1, , , ,1],
      [ , ,1,1,1, ]
    ],
    "D": [
      [1, ,1,1, , ],
      [ ,1, , ,1, ],
      [ ,1, , , ,1],
      [ ,1, , , ,1],
      [ ,1, , , ,1],
      [ ,1, , ,1, ],
      [1, ,1,1, , ]
    ],
    "E": [
      [1, ,1,1,1,1],
      [ ,1, , , , ],
      [ ,1, , ,1, ],
      [ ,1,1,1, , ],
      [ ,1, , ,1, ],
      [ ,1, , , , ],
      [1, ,1,1,1,1]
    ],
    "F": [
      [1, ,1,1,1,1],
      [ ,1, , , , ],
      [ ,1, , ,1, ],
      [ ,1,1,1, , ],
      [ ,1, , ,1, ],
      [ ,1, , , , ],
      [1, ,1, , , ]
    ],
    "G": [
      [ , ,1,1,1, ],
      [ ,1, , , ,1],
      [1, , , , , ],
      [1, , , , , ],
      [1, , , ,1,1],
      [ ,1, , , ,1],
      [ , ,1,1,1, ]
    ],
    "H": [
      [1, ,1, ,1, ,1],
      [ ,1, , , ,1, ],
      [ ,1, , , ,1, ],
      [ ,1,1,1,1,1, ],
      [ ,1, , , ,1, ],
      [ ,1, , , ,1, ],
      [1, ,1, ,1, ,1]
    ],
    "I": [
      [1, ,1],
      [ ,1, ],
      [ ,1, ],
      [ ,1, ],
      [ ,1, ],
      [ ,1, ],
      [1, ,1]
    ],
    "J": [
      [ , ,1, ,1],
      [ , , ,1, ],
      [ , , ,1, ],
      [ , , ,1, ],
      [1, , ,1, ],
      [1, , ,1, ],
      [ ,1,1,1, ]
    ],
    "K": [
      [1, , , , ,1],
      [ ,1, , ,1, ],
      [ ,1, ,1, , ],
      [ ,1,1, , , ],
      [ ,1, ,1, , ],
      [ ,1, , ,1, ],
      [1, , , , ,1]
    ],
    "L": [
      [1, ,1, , ],
      [ ,1, , , ],
      [ ,1, , , ],
      [ ,1, , , ],
      [ ,1, , , ],
      [ ,1, , ,1],
      [1, ,1,1, ]
    ],
    "M": [
      [1, , , , , ,1],
      [ ,1, , , ,1, ],
      [ ,1,1, ,1,1, ],
      [ ,1, ,1, ,1, ],
      [ ,1, , , ,1, ],
      [ ,1, , , ,1, ],
      [1, , , , , ,1]
    ],
    "N": [
      [1, , , , , ,1],
      [ ,1, , , ,1, ],
      [ ,1,1, , ,1, ],
      [ ,1, ,1, ,1, ],
      [ ,1, , ,1,1, ],
      [ ,1, , , ,1, ],
      [1, , , , , ,1]
    ],
    "Ñ": [
      [1,1,1,1,1,1,1],
      [ , , , , , , ],
      [1,1, , , , ,1],
      [ ,1,1, , ,1, ],
      [ ,1, ,1, ,1, ],
      [ ,1, , ,1,1, ],
      [1, , , , ,1,1]
    ],
    "O": [
      [ , ,1,1,1, , ],
      [ ,1, , , ,1, ],
      [1, , , , , ,1],
      [1, , , , , ,1],
      [1, , , , , ,1],
      [ ,1, , , ,1, ],
      [ , ,1,1,1, , ]
    ],
    "P": [
      [1, ,1,1,1, ],
      [ ,1, , , ,1],
      [ ,1, , , ,1],
      [ ,1,1,1,1, ],
      [ ,1, , , , ],
      [ ,1, , , , ],
      [1, ,1, , , ]
    ],
    "Q": [
      [ , ,1,1,1, , ],
      [ ,1, , , ,1, ],
      [1, , , , , ,1],
      [1, , , , , ,1],
      [1, , , ,1, ,1],
      [ ,1, , , ,1, ],
      [ , ,1,1,1, ,1]
    ],
    "R": [
      [1, ,1,1,1, ],
      [ ,1, , , ,1],
      [ ,1, , , ,1],
      [ ,1,1,1,1, ],
      [ ,1, , ,1, ],
      [ ,1, , , ,1],
      [1, ,1, , ,1]
    ],
    "S": [
      [ ,1,1,1,1, ],
      [1, , , , ,1],
      [1, , , , , ],
      [1,1,1,1,1, ],
      [ , , , , ,1],
      [1, , , , ,1],
      [ ,1,1,1,1, ]
    ],
    "T": [
      [1, , , , , ,1],
      [ ,1,1,1,1,1, ],
      [1, , ,1, , ,1],
      [ , , ,1, , , ],
      [ , , ,1, , , ],
      [ , , ,1, , , ],
      [ , ,1, ,1, , ]
    ],
    // "T2": [
    //   [ ,1,1,1, ],
    //   [1, ,1, ,1],
    //   [ , ,1, , ],
    //   [ , ,1, , ],
    //   [ , ,1, , ],
    //   [ , ,1, , ],
    //   [ ,1, ,1, ]
    // ],
    "U": [
      [1, ,1, ,1, ,1],
      [ ,1, , , ,1, ],
      [ ,1, , , ,1, ],
      [ ,1, , , ,1, ],
      [ ,1, , , ,1, ],
      [ ,1, , , ,1, ],
      [ , ,1,1,1, , ]
    ],
    "V": [
      [1, ,1, ,1, ,1],
      [ ,1, , , ,1, ],
      [ ,1, , , ,1, ],
      [ , ,1, ,1, , ],
      [ , ,1, ,1, , ],
      [ , , ,1, , , ],
      [ , , ,1, , , ]
    ],
    "W": [
      [1, , , , , ,1],
      [ ,1, , , ,1, ],
      [ ,1, , , ,1, ],
      [ ,1, ,1, ,1, ],
      [ ,1,1, ,1,1, ],
      [ ,1, , , ,1, ],
      [1, , , , , ,1]
    ],
    "X": [
      [1, ,1, ,1, ,1],
      [ ,1, , , ,1, ],
      [ ,1, , , ,1, ],
      [ , ,1,1,1, , ],
      [ ,1, , , ,1, ],
      [ ,1, , , ,1, ],
      [1, ,1, ,1, ,1]
    ],
    "Y": [
      [1, ,1, ,1, ,1],
      [ ,1, , , ,1, ],
      [ ,1, , , ,1, ],
      [ , ,1, ,1, , ],
      [ , , ,1, , , ],
      [ , , ,1, , , ],
      [ , ,1, ,1, , ],
    ],
    "Z": [
      [ ,1,1,1,1,1,1],
      [1, , , , ,1, ],
      [ , , , ,1, , ],
      [ , , ,1, , , ],
      [ , ,1, , , , ],
      [ ,1, , , , ,1],
      [1,1,1,1,1,1, ]
    ],
    "+": [
      [ , ,1, ,1, , ],
      [ , , ,1, , , ],
      [1, , ,1, , ,1],
      [ ,1,1,1,1,1, ],
      [1, , ,1, , ,1],
      [ , , ,1, , , ],
      [ , ,1, ,1, , ]
    ],
    "-": [
      [ , , , , , ],
      [ , , , , , ],
      [1, , , , ,1],
      [ ,1,1,1,1, ],
      [1, , , , ,1],
      [ , , , , , ],
      [ , , , , , ]
    ],
    "_": [
      [ , , , , , ],
      [ , , , , , ],
      [ , , , , , ],
      [ , , , , , ],
      [1, , , , ,1],
      [ ,1,1,1,1, ],
      [1, , , , ,1]
    ],
    "(": [
      [ ,1],
      [1, ],
      [1, ],
      [1, ],
      [1, ],
      [1, ],
      [ ,1]
    ],
    ")": [
      [1, ],
      [ ,1],
      [ ,1],
      [ ,1],
      [ ,1],
      [ ,1],
      [1, ]
    ],
    "{": [
      [ , , , , , , ],
      [ , , , , , , ],
      [ , , , , , , ],
      [ , , , , , , ],
      [ , , , , , , ],
      [ , , , , , , ],
      [ , , , , , , ]
    ],
    "}": [
      [ , , , , , , ],
      [ , , , , , , ],
      [ , , , , , , ],
      [ , , , , , , ],
      [ , , , , , , ],
      [ , , , , , , ],
      [ , , , , , , ]
    ],
    "[": [
      [1,1],
      [1, ],
      [1, ],
      [1, ],
      [1, ],
      [1, ],
      [1,1]
    ],
    "]": [
      [1,1],
      [ ,1],
      [ ,1],
      [ ,1],
      [ ,1],
      [ ,1],
      [1,1]
    ],
    "=": [
      [ , , , , , ],
      [ , , , , , ],
      [1,1,1,1,1,1],
      [ , , , , , ],
      [1,1,1,1,1,1],
      [ , , , , , ],
      [ , , , , , ]
    ],
    "/": [
      [ , , , ,1],
      [ , , ,1, ],
      [ , , ,1, ],
      [ , ,1, , ],
      [ ,1, , , ],
      [ ,1, , , ],
      [1, , , , ]
    ],
    "\\": [
      [1, , , , ],
      [ ,1, , , ],
      [ ,1, , , ],
      [ , ,1, , ],
      [ , , ,1, ],
      [ , , ,1, ],
      [ , , , ,1]
    ],
    "%": [
      [1,1, , ,1],
      [1,1, ,1, ],
      [ , , ,1, ],
      [ , ,1, , ],
      [ ,1, , , ],
      [ ,1, ,1,1],
      [1, , ,1,1]
    ],
    ".": [
      [ ],
      [ ],
      [ ],
      [ ],
      [ ],
      [ ],
      [1]
    ],
    "*": [
      [1, ,1],
      [ ,1, ],
      [1, ,1],
      [ , , ],
      [ , , ],
      [ , , ],
      [ , , ]
    ],
    ":": [
      [ ],
      [ ],
      [1],
      [ ],
      [1],
      [ ],
      [ ]
    ],
    ",": [
      [ ],
      [ ],
      [ ],
      [ ],
      [ ],
      [1],
      [1]
    ],
    ";": [
      [ ],
      [ ],
      [ ],
      [1],
      [ ],
      [1],
      [1]
    ],
    "!": [
      [1],
      [1],
      [1],
      [1],
      [1],
      [ ],
      [1]
    ],
    "¡": [
      [1],
      [ ],
      [1],
      [1],
      [1],
      [1],
      [1]
    ],
    "?": [
      [ ,1,1,1, ],
      [1, , , ,1],
      [ , , , ,1],
      [ , , ,1, ],
      [ , ,1, , ],
      [ , , , , ],
      [ , ,1, , ]
    ],
    "¿": [
      [ , ,1, , ],
      [ , , , , ],
      [ , ,1, , ],
      [ ,1, , , ],
      [1, , , , ],
      [1, , , ,1],
      [ ,1,1,1, ]
    ],
    "\"": [
      [1, ,1],
      [1, ,1],
      [ , , ],
      [ , , ],
      [ , , ],
      [ , , ],
      [ , , ]
    ],
    "<": [
      [ , , ],
      [ , ,1],
      [ ,1, ],
      [1, , ],
      [ ,1, ],
      [ , ,1],
      [ , , ]
    ],
    ">": [
      [ , , ],
      [1, , ],
      [ ,1, ],
      [ , ,1],
      [ ,1, ],
      [1, , ],
      [ , , ]
    ],
    "'": [
      [1],
      [1],
      [ ],
      [ ],
      [ ],
      [ ],
      [ ]
    ],
    "°": [
      [ ,1,1, ],
      [1, , ,1],
      [1, , ,1],
      [ ,1,1, ],
      [ , , , ],
      [ , , , ],
      [ , , , ]
    ],
    "|": [
      [1],
      [1],
      [1],
      [1],
      [1],
      [1],
      [1]
    ],
    "♥": [
      [ ,1,1, ,1,1, ],
      [1,1,1,1,1,1,1],
      [1,1,1,1,1,1,1],
      [1,1,1,1,1,1,1],
      [ ,1,1,1,1,1, ],
      [ , ,1,1,1, , ],
      [ , , ,1, , , ]
    ],
    "#": [
      [ , , , , ],
      [ ,1, ,1, ],
      [1,1,1,1,1],
      [ ,1, ,1, ],
      [1,1,1,1,1],
      [ ,1, ,1, ],
      [ , , , , ]
    ],
    "^": [
      [ , ,1, , ],
      [ ,1, ,1, ],
      [1, , , ,1],
      [ , , , , ],
      [ , , , , ],
      [ , , , , ],
      [ , , , , ]
    ],
    " ": [
      [ , , ],
      [ , , ],
      [ , , ],
      [ , , ],
      [ , , ],
      [ , , ],
      [ , , ]
    ],
    "@": [
      [],
      [],
      [],
      [],
      [],
      [],
      []
    ]
  },
  "lines7x7": {
    "Name": "Lines 7px",
    "Height": 7,
    "0": [
      [1,1,1,1,1],
      [1, , , ,1],
      [1, , , ,1],
      [1, , , ,1],
      [1, , , ,1],
      [1, , , ,1],
      [1,1,1,1,1]
    ],
    "1": [
      [1,1, ],
      [1,1, ],
      [ ,1, ],
      [ ,1, ],
      [ ,1, ],
      [ ,1, ],
      [1,1,1]
    ],
    "2": [
      [1,1,1,1,1],
      [ , , , ,1],
      [ , , , ,1],
      [1,1,1,1,1],
      [1, , , , ],
      [1, , , , ],
      [1,1,1,1,1]
    ],
    "3": [
      [1,1,1, ],
      [1, ,1, ],
      [ , ,1, ],
      [ ,1,1,1],
      [ , , ,1],
      [1, , ,1],
      [1,1,1,1]
    ],
    "4": [
      [1, , ,1],
      [1, , ,1],
      [1, , ,1],
      [1, , ,1],
      [1,1,1,1],
      [ , , ,1],
      [ , , ,1]
    ],
    "5": [
      [1,1,1,1,1],
      [1, , , , ],
      [1,1,1,1,1],
      [ , , , ,1],
      [ , , , ,1],
      [1, , , ,1],
      [1,1,1,1,1]
    ],
    "6": [
      [1,1,1,1,1],
      [1, , , , ],
      [1, , , , ],
      [1, , , , ],
      [1,1,1,1,1],
      [1, , , ,1],
      [1,1,1,1,1]
    ],
    "7": [
      [1,1,1,1,1],
      [ , , , ,1],
      [ ,1,1,1,1],
      [ ,1, , , ],
      [ ,1, , , ],
      [ ,1, , , ],
      [ ,1, , , ]
    ],
    "8": [
      [ ,1,1,1, ],
      [ ,1, ,1, ],
      [ ,1, ,1, ],
      [1,1,1,1,1],
      [1, , , ,1],
      [1, , , ,1],
      [1,1,1,1,1]
    ],
    "9": [
      [1,1,1,1,1],
      [1, , , ,1],
      [1,1,1,1,1],
      [ , , , ,1],
      [ , , , ,1],
      [1, , , ,1],
      [1,1,1,1,1]
    ],
    "A": [
      [ , ,1,1,1, , ],
      [ , ,1, ,1, , ],
      [ , ,1, ,1, , ],
      [ ,1,1,1,1,1, ],
      [ ,1, , , ,1, ],
      [ ,1, , , ,1, ],
      [1,1, , , ,1,1]
    ],
    "B": [
      [1,1,1,1,1,1, ],
      [ ,1, , , ,1, ],
      [ ,1, , , ,1, ],
      [ ,1,1,1,1,1,1],
      [ ,1, , , , ,1],
      [ ,1, , , , ,1],
      [1,1,1,1,1,1,1]
    ],
    "C": [
      [1,1,1,1,1,1],
      [1, , , , ,1],
      [1, , , , ,1],
      [1, , , , , ],
      [1, , , , , ],
      [1, , , , ,1],
      [1,1,1,1,1,1]
    ],
    "D": [
      [1,1,1,1,1,1],
      [ ,1, , , ,1],
      [ ,1, , , ,1],
      [ ,1, , , ,1],
      [ ,1, , , ,1],
      [ ,1, , , ,1],
      [1,1, ,1,1,1]
    ],
    "E": [
      [1,1,1,1,1,1,1],
      [ ,1, , , , ,1],
      [ ,1, , , , ,1],
      [ ,1,1,1,1, , ],
      [ ,1, , , , , ],
      [ ,1, , , , ,1],
      [1,1,1,1,1,1,1]
    ],
    "F": [
      [1,1,1,1,1,1,1],
      [ ,1, , , , ,1],
      [ ,1, , , , ,1],
      [ ,1,1,1,1, , ],
      [ ,1, , , , , ],
      [ ,1, , , , , ],
      [ ,1,1, , , , ]
    ],
    "G": [
      [1,1,1,1,1,1],
      [1, , , , ,1],
      [1, , , , ,1],
      [1, , , , , ],
      [1, , ,1,1,1],
      [1, , , , ,1],
      [1,1,1,1,1,1]
    ],
    "H": [
      [1,1, , , ,1,1],
      [ ,1, , , ,1, ],
      [ ,1, , , ,1, ],
      [1,1,1,1,1,1,1],
      [ ,1, , , ,1, ],
      [ ,1, , , ,1, ],
      [1,1, , , ,1,1]
    ],
    "I": [
      [1,1, ],
      [ ,1, ],
      [ ,1, ],
      [ ,1, ],
      [ ,1, ],
      [ ,1, ],
      [ ,1,1]
    ],
    "J": [
      [ ,1,1,1,1,1],
      [ , , , , ,1],
      [ , , , , ,1],
      [1,1, , , ,1],
      [1, , , , ,1],
      [1, , , , ,1],
      [1,1,1,1,1,1]
    ],
    "K": [
      [1,1, , ,1,1,1],
      [ ,1, , ,1, , ],
      [ ,1, , ,1, , ],
      [ ,1,1,1,1,1, ],
      [ ,1, , , ,1, ],
      [ ,1, , , ,1, ],
      [1,1, , , ,1,1]
    ],
    "L": [
      [1,1, , , , , ],
      [ ,1, , , , , ],
      [ ,1, , , , , ],
      [ ,1, , , , , ],
      [ ,1, , , , ,1],
      [ ,1, , , , ,1],
      [1,1,1,1,1,1,1]
    ],
    "M": [
      [ ,1,1,1, ,1,1,1, ],
      [ ,1, ,1, ,1, ,1, ],
      [ ,1, ,1, ,1, ,1, ],
      [ ,1, ,1, ,1, ,1, ],
      [ ,1, ,1, ,1, ,1, ],
      [ ,1, ,1, ,1, ,1, ],
      [1,1, ,1,1,1, ,1,1]
    ],
    "N": [
      [ ,1,1,1, ,1,1],
      [ ,1, ,1, ,1, ],
      [ ,1, ,1, ,1, ],
      [ ,1, ,1, ,1, ],
      [ ,1, ,1, ,1, ],
      [ ,1, ,1, ,1, ],
      [1,1, ,1,1,1, ]
    ],
    "Ñ": [
      [ , ,1,1,1, , ],
      [ , , , , , , ],
      [ ,1,1,1, ,1,1],
      [ ,1, ,1, ,1, ],
      [ ,1, ,1, ,1, ],
      [ ,1, ,1, ,1, ],
      [1,1, ,1,1,1, ]
    ],
    "O": [
      [1,1,1,1,1],
      [1, , , ,1],
      [1, , , ,1],
      [1, , , ,1],
      [1, , , ,1],
      [1, , , ,1],
      [1,1,1,1,1]
    ],
    "P": [
      [1,1,1,1,1,1,1],
      [ ,1, , , , ,1],
      [ ,1, , , , ,1],
      [ ,1,1,1,1,1,1],
      [ ,1, , , , , ],
      [ ,1, , , , , ],
      [1,1, , , , , ]
    ],
    "Q": [
      [1,1,1,1,1],
      [1, , , ,1],
      [1, , , ,1],
      [1, , , ,1],
      [1, , , ,1],
      [1,1,1,1,1],
      [ , ,1, , ]
    ],
    "R": [
      [1,1,1,1,1, , ],
      [ ,1, , ,1, , ],
      [ ,1, , ,1, , ],
      [ ,1,1,1,1,1, ],
      [ ,1, , , ,1, ],
      [ ,1, , , ,1, ],
      [1,1, , , ,1,1]
    ],
    "S": [
      [1,1,1,1,1,1],
      [1, , , , ,1],
      [1, , , , ,1],
      [1, , , , , ],
      [1,1,1,1,1,1],
      [ , , , , ,1],
      [1,1,1,1,1,1]
    ],
    "T": [
      [1,1,1,1,1],
      [1, ,1, ,1],
      [1, ,1, ,1],
      [ , ,1, , ],
      [ , ,1, , ],
      [ , ,1, , ],
      [ , ,1,1, ]
    ],
    "U": [
      [1,1, , , ,1,1],
      [ ,1, , , ,1, ],
      [ ,1, , , ,1, ],
      [ ,1, , , ,1, ],
      [ ,1, , , ,1, ],
      [ ,1, , , ,1, ],
      [ ,1,1,1,1,1, ]
    ],
    "V": [
      [1,1, , , ,1,1],
      [ ,1, , , ,1, ],
      [ ,1, , , ,1, ],
      [ ,1,1, ,1,1, ],
      [ , ,1, ,1, , ],
      [ , ,1, ,1, , ],
      [ , ,1,1,1, , ]
    ],
    "W": [
      [1,1, , , , , ,1,1],
      [ ,1, , ,1, , ,1, ],
      [ ,1, , ,1, , ,1, ],
      [ ,1, , ,1, , ,1, ],
      [ ,1, , ,1, , ,1, ],
      [ ,1, , ,1, , ,1, ],
      [ ,1,1,1,1,1,1,1, ]
    ],
    "X": [
      [1,1, , , ,1,1],
      [ ,1, , , ,1, ],
      [ ,1,1,1,1,1, ],
      [ , , ,1, , , ],
      [ ,1,1,1,1,1, ],
      [ ,1, , , ,1, ],
      [1,1, , , ,1,1]
    ],
    "Y": [
      [1,1, , , ,1,1],
      [ ,1, , , ,1, ],
      [ ,1, , , ,1, ],
      [ ,1,1,1,1,1, ],
      [ , , , , ,1, ],
      [ ,1, , , ,1, ],
      [ ,1,1,1,1,1, ]
    ],
    "Z": [
      [1,1,1,1,1,1,1],
      [1, , , , , ,1],
      [ , , , , , ,1],
      [1,1,1,1,1,1,1],
      [1, , , , , , ],
      [1, , , , , ,1],
      [1,1,1,1,1,1,1]
    ],
    "+": [
      [ , , , , ],
      [ , ,1, , ],
      [ , ,1, , ],
      [1,1,1,1,1],
      [ , ,1, , ],
      [ , ,1, , ],
      [ , , , , ]
    ],
    "-": [
      [ , , , , ],
      [ , , , , ],
      [ , , , , ],
      [1,1,1,1,1],
      [ , , , , ],
      [ , , , , ],
      [ , , , , ]
    ],
    "_": [
      [ , , , , ],
      [ , , , , ],
      [ , , , , ],
      [ , , , , ],
      [ , , , , ],
      [ , , , , ],
      [1,1,1,1,1]
    ],
    "(": [
      [ ,1,1],
      [1, , ],
      [1, , ],
      [1, , ],
      [1, , ],
      [1, , ],
      [ ,1,1]
    ],
    ")": [
      [1,1, ],
      [ , ,1],
      [ , ,1],
      [ , ,1],
      [ , ,1],
      [ , ,1],
      [1,1, ]
    ],
    "{": [
      [ , ,1],
      [ ,1, ],
      [ ,1, ],
      [1, , ],
      [ ,1, ],
      [ ,1, ],
      [ , ,1]
    ],
    "}": [
      [1, , ],
      [ ,1, ],
      [ ,1, ],
      [ , ,1],
      [ ,1, ],
      [ ,1, ],
      [1, , ]
    ],
    "[": [
      [1,1],
      [1, ],
      [1, ],
      [1, ],
      [1, ],
      [1, ],
      [1,1]
    ],
    "]": [
      [1,1],
      [ ,1],
      [ ,1],
      [ ,1],
      [ ,1],
      [ ,1],
      [1,1]
    ],
    "=": [
      [ , , , , ],
      [ , , , , ],
      [1,1,1,1,1],
      [ , , , , ],
      [1,1,1,1,1],
      [ , , , , ],
      [ , , , , ]
    ],
    "/": [
      [ , , , ,1,1],
      [ , , , ,1, ],
      [ , , ,1,1, ],
      [ , ,1,1, , ],
      [ ,1,1, , , ],
      [ ,1, , , , ],
      [1,1, , , , ]
    ],
    "\\": [
      [1,1, , , , ],
      [ ,1, , , , ],
      [ ,1,1, , , ],
      [ , ,1,1, , ],
      [ , , ,1,1, ],
      [ , , , ,1, ],
      [ , , , ,1,1]
    ],
    "%": [
      [1,1, , ,1,1],
      [1,1, , ,1, ],
      [ , , ,1,1, ],
      [ , ,1,1, , ],
      [ ,1,1, , , ],
      [ ,1, , ,1,1],
      [1,1, , ,1,1]
    ],
    ".": [
      [ , ],
      [ , ],
      [ , ],
      [ , ],
      [ , ],
      [1,1],
      [1,1]
    ],
    "*": [
      [1, ,1],
      [ ,1, ],
      [1, ,1],
      [ , , ],
      [ , , ],
      [ , , ],
      [ , , ]
    ],
    ":": [
      [ , ],
      [1,1],
      [1,1],
      [ , ],
      [1,1],
      [1,1],
      [ , ]
    ],
    ",": [
      [ , ],
      [ , ],
      [ , ],
      [ , ],
      [1,1],
      [1,1],
      [ ,1]
    ],
    ";": [
      [ , ],
      [ , ],
      [1,1],
      [ , ],
      [1,1],
      [1,1],
      [ ,1]
    ],
    "!": [
      [1,1],
      [1,1],
      [1,1],
      [1,1],
      [1,1],
      [ , ],
      [1,1]
    ],
    "¡": [
      [1,1],
      [ , ],
      [1,1],
      [1,1],
      [1,1],
      [1,1],
      [1,1]
    ],
    "?": [
      [1,1,1,1,1],
      [1, , , ,1],
      [ , , , ,1],
      [ , ,1,1,1],
      [ , ,1, , ],
      [ , , , , ],
      [ , ,1, , ]
    ],
    "¿": [
      [ , ,1, , ],
      [ , , , , ],
      [ , ,1, , ],
      [1,1,1, , ],
      [1, , , , ],
      [1, , , ,1],
      [1,1,1,1,1]
    ],
    "\"": [
      [1,1, ,1,1],
      [1,1, ,1,1],
      [ ,1, , ,1],
      [ , , , , ],
      [ , , , , ],
      [ , , , , ],
      [ , , , , ]
    ],
    "<": [
      [ , , ,1],
      [ , ,1,1],
      [ ,1,1, ],
      [1,1, , ],
      [ ,1,1, ],
      [ , ,1,1],
      [ , , ,1]
    ],
    ">": [
      [1, , , ],
      [1,1, , ],
      [ ,1,1, ],
      [ , ,1,1],
      [ ,1,1, ],
      [1,1, , ],
      [1, , , ]
    ],
    "'": [
      [1,1],
      [1,1],
      [ ,1],
      [ , ],
      [ , ],
      [ , ],
      [ , ]
    ],
    "°": [
      [ ,1,1, ],
      [1, , ,1],
      [1, , ,1],
      [ ,1,1, ],
      [ , , , ],
      [ , , , ],
      [ , , , ]
    ],
    "|": [
      [1],
      [1],
      [1],
      [1],
      [1],
      [1],
      [1]
    ],
    "♥": [
      [ ,1,1, ,1,1, ],
      [1,1,1,1,1,1,1],
      [1,1,1,1,1,1,1],
      [1,1,1,1,1,1,1],
      [ ,1,1,1,1,1, ],
      [ , ,1,1,1, , ],
      [ , , ,1, , , ]
    ],
    "#": [
      [ , ,1, ,1, , ],
      [ , ,1, ,1, , ],
      [1,1,1,1,1,1,1],
      [ , ,1, ,1, , ],
      [1,1,1,1,1,1,1],
      [ , ,1, ,1, , ],
      [ , ,1, ,1, , ]
    ],
    "^": [
      [ , ,1, , ],
      [ ,1, ,1, ],
      [1, , , ,1],
      [ , , , , ],
      [ , , , , ],
      [ , , , , ],
      [ , , , , ]
    ],
    " ": [
      [ , ],
      [ , ],
      [ , ],
      [ , ],
      [ , ],
      [ , ],
      [ , ]
    ],
    "@": [
      [],
      [],
      [],
      [],
      [],
      [],
      []
    ]
  },
  "finalfantasy7x7": {
    Tier: 3,
    //Disabled: true,
    "Name": "Final Fantasy 7px",
    "Height": 7,
    "A": [
      [ , ,1,1,1, , ],
      [ , ,1,1,1, , ],
      [ , ,1, ,1, , ],
      [ ,1,1, ,1,1, ],
      [ ,1,1,1,1,1, ],
      [1,1, , , ,1,1],
      [1,1, , , ,1,1]
    ],
    "B": [
      [1,1,1,1,1,1, ],
      [1,1, , , ,1,1],
      [1,1, , , ,1,1],
      [1,1,1,1,1,1, ],
      [1,1, , , ,1,1],
      [1,1, , , ,1,1],
      [1,1,1,1,1,1, ]
    ],
    "C": [
      [ ,1,1,1,1,1, ],
      [1,1, , , ,1,1],
      [1,1, , , ,1,1],
      [1,1, , , , , ],
      [1,1, , , ,1,1],
      [1,1, , , ,1,1],
      [ ,1,1,1,1,1, ]
    ],
    "D": [
      [1,1,1,1,1, , ],
      [1,1, , ,1,1, ],
      [1,1, , , ,1,1],
      [1,1, , , ,1,1],
      [1,1, , , ,1,1],
      [1,1, , ,1,1, ],
      [1,1,1,1,1, , ]
    ],
    "E": [
      [1,1,1,1,1,1,1],
      [1,1, , , , , ],
      [1,1, , , ,1, ],
      [1,1,1,1,1,1, ],
      [1,1, , , ,1, ],
      [1,1, , , , , ],
      [1,1,1,1,1,1,1]
    ],
    "F": [
      [1,1,1,1,1,1,1],
      [1,1, , , , , ],
      [1,1, , , ,1, ],
      [1,1,1,1,1,1, ],
      [1,1, , , ,1, ],
      [1,1, , , , , ],
      [1,1, , , , , ]
    ],
    "G": [
      [ ,1,1,1,1,1, ],
      [1,1, , , ,1,1],
      [1,1, , , , , ],
      [1,1, , ,1,1,1],
      [1,1, , , , ,1],
      [1,1, , , ,1,1],
      [ ,1,1,1,1,1, ]
    ],
    "H": [
      [1,1, , , ,1,1],
      [1,1, , , ,1,1],
      [1,1, , , ,1,1],
      [1,1,1,1,1,1,1],
      [1,1, , , ,1,1],
      [1,1, , , ,1,1],
      [1,1, , , ,1,1]
    ],
    "I": [
      [1,1,1,1],
      [ ,1,1, ],
      [ ,1,1, ],
      [ ,1,1, ],
      [ ,1,1, ],
      [ ,1,1, ],
      [1,1,1,1]
    ],
    "J": [
      [ , , , ,1,1,1],
      [ , , , , ,1,1],
      [ , , , , ,1,1],
      [ , , , , ,1,1],
      [1,1, , , ,1,1],
      [1,1, , , ,1,1],
      [ ,1,1,1,1,1, ]
    ],
    "K": [
      [1,1, , , ,1,1],
      [1,1, , ,1,1, ],
      [1,1, ,1,1, , ],
      [1,1,1,1, , , ],
      [1,1, ,1,1, , ],
      [1,1, , ,1,1, ],
      [1,1, , , ,1,1]
    ],
    "L": [
      [1,1, , , , , ],
      [1,1, , , , , ],
      [1,1, , , , , ],
      [1,1, , , , , ],
      [1,1, , , , , ],
      [1,1, , , , ,1],
      [1,1,1,1,1,1,1]
    ],
    "M": [
      [1,1, , , ,1,1],
      [1,1, , , ,1,1],
      [1,1,1, ,1,1,1],
      [1,1,1,1,1,1,1],
      [1,1, ,1, ,1,1],
      [1,1, , , ,1,1],
      [1,1, , , ,1,1]
    ],
    "N": [
      [1,1, , , ,1,1],
      [1,1, , , ,1,1],
      [1,1,1, , ,1,1],
      [1,1,1,1, ,1,1],
      [1,1, ,1,1,1,1],
      [1,1, , ,1,1,1],
      [1,1, , , ,1,1]
    ],
    "Ñ": [
      [1,1,1,1,1,1,1],
      [ , , , , , , ],
      [1,1, , , ,1,1],
      [1,1,1, , ,1,1],
      [1,1, ,1, ,1,1],
      [1,1, , ,1,1,1],
      [1,1, , , ,1,1]
    ],
    "O": [
      [ ,1,1,1,1,1, ],
      [1,1, , , ,1,1],
      [1,1, , , ,1,1],
      [1,1, , , ,1,1],
      [1,1, , , ,1,1],
      [1,1, , , ,1,1],
      [ ,1,1,1,1,1, ]
    ],
    "P": [
      [1,1,1,1,1,1, ],
      [1,1, , , ,1,1],
      [1,1, , , ,1,1],
      [1,1, , , ,1,1],
      [1,1,1,1,1,1, ],
      [1,1, , , , , ],
      [1,1, , , , , ]
    ],
    "Q": [
      [ ,1,1,1,1,1, ],
      [1,1, , , ,1,1],
      [1,1, , , ,1,1],
      [1,1, , , ,1,1],
      [1,1, ,1,1, ,1],
      [1,1, , ,1,1, ],
      [ ,1,1,1, ,1,1]
    ],
    "R": [
      [1,1,1,1,1,1, ],
      [1,1, , , ,1,1],
      [1,1, , , ,1,1],
      [1,1,1,1,1,1, ],
      [1,1, ,1,1, , ],
      [1,1, , ,1,1, ],
      [1,1, , , ,1,1]
    ],
    "S": [
      [ ,1,1,1,1,1, ],
      [1,1, , , ,1,1],
      [1,1, , , , , ],
      [ ,1,1,1,1,1, ],
      [ , , , , ,1,1],
      [1,1, , , ,1,1],
      [ ,1,1,1,1,1, ]
    ],
    "T": [
      [1,1,1,1,1,1,1,1],
      [1, , ,1,1, , ,1],
      [ , , ,1,1, , , ],
      [ , , ,1,1, , , ],
      [ , , ,1,1, , , ],
      [ , , ,1,1, , , ],
      [ , ,1,1,1,1, , ]
    ],
    "U": [
      [1,1, , , ,1,1],
      [1,1, , , ,1,1],
      [1,1, , , ,1,1],
      [1,1, , , ,1,1],
      [1,1, , , ,1,1],
      [1,1, , , ,1,1],
      [ ,1,1,1,1,1, ]
    ],
    "V": [
      [1,1, , , ,1,1],
      [1,1, , , ,1,1],
      [ ,1, , , ,1, ],
      [ ,1,1, ,1,1, ],
      [ ,1,1, ,1,1, ],
      [ , ,1,1,1, , ],
      [ , ,1,1,1, , ]
    ],
    "W": [
      [1,1, , , ,1,1],
      [1,1, , , ,1,1],
      [1,1, ,1, ,1,1],
      [1,1, ,1, ,1,1],
      [1,1,1,1,1,1,1],
      [1,1,1, ,1,1,1],
      [ ,1, , , ,1, ]
    ],
    "X": [
      [1, , , , , ,1],
      [1,1, , , ,1,1],
      [ ,1,1, ,1,1, ],
      [ , ,1,1,1, , ],
      [ , ,1,1,1, , ],
      [ ,1,1, ,1,1, ],
      [1,1, , , ,1,1]
    ],
    "Y": [
      [1,1, , , , ,1,1],
      [ ,1,1, , ,1,1, ],
      [ , ,1,1,1,1, , ],
      [ , , ,1,1, , , ],
      [ , , ,1,1, , , ],
      [ , , ,1,1, , , ],
      [ , ,1,1,1,1, , ]
    ],
    "Z": [
      [1,1,1,1,1,1,1],
      [1, , , , ,1,1],
      [ , , , ,1,1, ],
      [ , , ,1,1, , ],
      [ , ,1,1, , , ],
      [ ,1,1, , , ,1],
      [1,1,1,1,1,1,1]
    ],
    "0": [
      [ ,1,1,1,1,1, ],
      [1,1, , , ,1,1],
      [1,1, , , ,1,1],
      [1,1, , , ,1,1],
      [1,1, , , ,1,1],
      [1,1, , , ,1,1],
      [ ,1,1,1,1,1, ]
    ],
    "1": [
      [ ,1,1, ],
      [1,1,1, ],
      [ ,1,1, ],
      [ ,1,1, ],
      [ ,1,1, ],
      [ ,1,1, ],
      [1,1,1,1]
    ],
    "2": [
      [ ,1,1,1,1,1, ],
      [1,1, , , ,1,1],
      [1,1, , , ,1,1],
      [ , , , ,1,1, ],
      [ , ,1,1, , , ],
      [ ,1,1, , , , ],
      [1,1,1,1,1,1,1]
    ],
    "3": [
      [ ,1,1,1,1,1, ],
      [1,1, , , ,1,1],
      [1,1, , , ,1,1],
      [ , , ,1,1,1, ],
      [1,1, , , ,1,1],
      [1,1, , , ,1,1],
      [ ,1,1,1,1,1, ]
    ],
    "4": [
      [ , , ,1,1,1, ],
      [ , ,1,1,1,1, ],
      [ ,1,1, ,1,1, ],
      [ ,1, , ,1,1, ],
      [1,1, , ,1,1, ],
      [1,1,1,1,1,1,1],
      [ , , , ,1,1, ]
    ],
    "5": [
      [1,1,1,1,1,1,1],
      [1,1, , , , , ],
      [1,1,1,1,1,1, ],
      [ , , , , ,1,1],
      [ , , , , ,1,1],
      [1,1, , , ,1,1],
      [ ,1,1,1,1,1, ]
    ],
    "6": [
      [ ,1,1,1,1,1, ],
      [1,1, , , ,1,1],
      [1,1, , , , , ],
      [1,1,1,1,1,1, ],
      [1,1, , , ,1,1],
      [1,1, , , ,1,1],
      [ ,1,1,1,1,1, ]
    ],
    "7": [
      [1,1,1,1,1,1,1],
      [1,1, , , ,1,1],
      [1,1, , , ,1,1],
      [ , , , ,1,1, ],
      [ , , ,1,1, , ],
      [ , ,1,1, , , ],
      [ , ,1,1, , , ]
    ],
    "8": [
      [ ,1,1,1,1,1, ],
      [1,1, , , ,1,1],
      [1,1, , , ,1,1],
      [ ,1,1,1,1,1, ],
      [1,1, , , ,1,1],
      [1,1, , , ,1,1],
      [ ,1,1,1,1,1, ]
    ],
    "9": [
      [ ,1,1,1,1,1, ],
      [1,1, , , ,1,1],
      [1,1, , , ,1,1],
      [ ,1,1,1,1,1,1],
      [ , , , , ,1,1],
      [1,1, , , ,1,1],
      [ ,1,1,1,1,1, ]
    ],
    "+": [
      [ , , , , ],
      [ , ,1, , ],
      [ , ,1, , ],
      [1,1,1,1,1],
      [ , ,1, , ],
      [ , ,1, , ],
      [ , , , , ]
    ],
    "-": [
      [ , , , ],
      [ , , , ],
      [ , , , ],
      [1,1,1,1],
      [ , , , ],
      [ , , , ],
      [ , , , ]
    ],
    "_": [
      [ , , , ],
      [ , , , ],
      [ , , , ],
      [ , , , ],
      [ , , , ],
      [ , , , ],
      [1,1,1,1],
    ],
    "(": [
      [ , ,1],
      [ ,1, ],
      [1, , ],
      [1, , ],
      [1, , ],
      [ ,1, ],
      [ , ,1]
    ],
    ")": [
      [1, , ],
      [ ,1, ],
      [ , ,1],
      [ , ,1],
      [ , ,1],
      [ ,1, ],
      [1, , ]
    ],
    "{": [
      [ ,1,1,1],
      [ ,1, , ],
      [ ,1, , ],
      [1,1, , ],
      [ ,1, , ],
      [ ,1, , ],
      [ ,1,1,1]
    ],
    "}": [
      [1,1,1, ],
      [ , ,1, ],
      [ , ,1, ],
      [ , ,1,1],
      [ , ,1, ],
      [ , ,1, ],
      [1,1,1, ]
    ],
    "[": [
      [ ,1,1],
      [1, , ],
      [1, , ],
      [1, , ],
      [1, , ],
      [1, , ],
      [ ,1,1]
    ],
    "]": [
      [1,1, ],
      [ , ,1],
      [ , ,1],
      [ , ,1],
      [ , ,1],
      [ , ,1],
      [1,1, ]
    ],
    "=": [
      [ , , , ],
      [ , , , ],
      [1,1,1,1],
      [ , , , ],
      [1,1,1,1],
      [ , , , ],
      [ , , , ]
    ],
    "/": [
      [ , , , ,1],
      [ , , ,1, ],
      [ , , ,1, ],
      [ , ,1, , ],
      [ ,1, , , ],
      [ ,1, , , ],
      [1, , , , ]
    ],
    "\\": [
      [1, , , , ],
      [ ,1, , , ],
      [ ,1, , , ],
      [ , ,1, , ],
      [ , , ,1, ],
      [ , , ,1, ],
      [ , , , ,1]
    ],
    "%": [
      [1,1, , ,1],
      [1,1, ,1, ],
      [ , , ,1, ],
      [ , ,1, , ],
      [ ,1, , , ],
      [ ,1, ,1,1],
      [1, , ,1,1]
    ],
    ".": [
      [ , ],
      [ , ],
      [ , ],
      [ , ],
      [ , ],
      [1,1],
      [1,1]
    ],
    "*": [
      [ ,1, ],
      [1,1,1],
      [ ,1, ],
      [1, ,1],
      [ , , ],
      [ , , ],
      [ , , ]
    ],
    ":": [
      [ , ],
      [1,1],
      [1,1],
      [ , ],
      [1,1],
      [1,1],
      [ , ]
    ],
    ";": [
      [ , ],
      [ , ],
      [ , ],
      [1,1],
      [1,1],
      [ ,1],
      [1, ]
    ],
    "!": [
      [1,1],
      [1,1],
      [1,1],
      [1,1],
      [1,1],
      [ , ],
      [1,1]
    ],
    "¡": [
      [1,1],
      [ , ],
      [1,1],
      [1,1],
      [1,1],
      [1,1],
      [1,1]
    ],
    "?": [
      [ ,1,1,1, ],
      [1, , , ,1],
      [1, , , ,1],
      [ , , ,1, ],
      [ , ,1, , ],
      [ , , , , ],
      [ , ,1, , ]
    ],
    "¿": [
      [ , ,1, , ],
      [ , , , , ],
      [ , ,1, , ],
      [ ,1, , , ],
      [1, , , ,1],
      [1, , , ,1],
      [ ,1,1,1, ]
    ],
    "\"": [
      [1,1, ,1,1],
      [1,1, ,1,1],
      [ ,1, , ,1],
      [1, , ,1, ],
      [ , , , , ],
      [ , , , , ],
      [ , , , , ]
    ],
    "<": [
      [ , , ,1],
      [ , ,1, ],
      [ ,1, , ],
      [1, , , ],
      [ ,1, , ],
      [ , ,1, ],
      [ , , ,1]
    ],
    ">": [
      [1, , , ],
      [ ,1, , ],
      [ , ,1, ],
      [ , , ,1],
      [ , ,1, ],
      [ ,1, , ],
      [1, , , ]
    ],
    '\'': [
        [1,1],
        [1,1],
        [ ,1],
        [1, ],
        [ , ],
        [ , ],
        [ , ]
    ],
    "°": [
        [ ,1,1, ],
        [1, , ,1],
        [1, , ,1],
        [ ,1,1, ],
        [ , , , ],
        [ , , , ],
        [ , , , ]
    ],
    "|": [
        [1],
        [1],
        [1],
        [1],
        [1],
        [1],
        [1]
    ],
    "♥": [
        [ ,1,1, ,1,1, ],
        [1,1,1,1,1,1,1],
        [1,1,1,1,1,1,1],
        [1,1,1,1,1,1,1],
        [ ,1,1,1,1,1, ],
        [ , ,1,1,1, , ],
        [ , , ,1, , , ]
    ],
    "#": [
        [ , , , , ],
        [ ,1, ,1, ],
        [1,1,1,1,1],
        [ ,1, ,1, ],
        [1,1,1,1,1],
        [ ,1, ,1, ],
        [ , , , , ]
    ],
    " ": [
        [ , , ],
        [ , , ],
        [ , , ],
        [ , , ],
        [ , , ],
        [ , , ],
        [ , , ]
    ],
    "@": [
        [],
        [],
        [],
        [],
        [],
        [],
        []
    ]
  },
  "big8x7": {
    "Name": "Big 8px",
    "Height": 8,
    "A": [
      [ , ,1,1,1, , ],
      [ ,1,1, ,1,1, ],
      [1,1, , , ,1,1],
      [1,1, , , ,1,1],
      [1,1,1,1,1,1,1],
      [1,1, , , ,1,1],
      [1,1, , , ,1,1],
      [1,1, , , ,1,1]
    ],
    "B": [
      [1,1,1,1,1,1, ],
      [1,1, , , ,1,1],
      [1,1, , , ,1,1],
      [1,1,1,1,1,1, ],
      [1,1, , , ,1,1],
      [1,1, , , ,1,1],
      [1,1, , , ,1,1],
      [1,1,1,1,1,1, ]
    ],
    "C": [
      [ ,1,1,1,1,1, ],
      [1,1, , , ,1,1],
      [1,1, , , ,1,1],
      [1,1, , , , , ],
      [1,1, , , , , ],
      [1,1, , , ,1,1],
      [1,1, , , ,1,1],
      [ ,1,1,1,1,1, ]
    ],
    "D": [
      [1,1,1,1,1, , ],
      [1,1, , ,1,1, ],
      [1,1, , , ,1,1],
      [1,1, , , ,1,1],
      [1,1, , , ,1,1],
      [1,1, , , ,1,1],
      [1,1, , ,1,1, ],
      [1,1,1,1,1, , ]
    ],
    "E": [
      [1,1,1,1,1,1,1],
      [1,1, , , , , ],
      [1,1, , , , , ],
      [1,1,1,1,1, , ],
      [1,1, , , , , ],
      [1,1, , , , , ],
      [1,1, , , , , ],
      [1,1,1,1,1,1,1]
    ],
    "F": [
      [1,1,1,1,1,1,1],
      [1,1, , , , , ],
      [1,1, , , , , ],
      [1,1,1,1,1, , ],
      [1,1, , , , , ],
      [1,1, , , , , ],
      [1,1, , , , , ],
      [1,1, , , , , ]
    ],
    "G": [
      [ ,1,1,1,1,1, ],
      [1,1, , , ,1,1],
      [1,1, , , ,1,1],
      [1,1, , , , , ],
      [1,1, ,1,1,1,1],
      [1,1, , , ,1,1],
      [1,1, , , ,1,1],
      [ ,1,1,1,1,1, ]
    ],
    "H": [
      [1,1, , , ,1,1],
      [1,1, , , ,1,1],
      [1,1, , , ,1,1],
      [1,1,1,1,1,1,1],
      [1,1,1,1,1,1,1],
      [1,1, , , ,1,1],
      [1,1, , , ,1,1],
      [1,1, , , ,1,1]
    ],
    "I": [
      [1,1,1,1,1,1,1],
      [ , ,1,1,1, , ],
      [ , ,1,1,1, , ],
      [ , ,1,1,1, , ],
      [ , ,1,1,1, , ],
      [ , ,1,1,1, , ],
      [ , ,1,1,1, , ],
      [1,1,1,1,1,1,1]
    ],
    "J": [
      [1,1,1,1,1,1,1],
      [1,1,1,1,1,1,1],
      [ , , , , ,1,1],
      [ , , , , ,1,1],
      [ , , , , ,1,1],
      [ , , , , ,1,1],
      [1,1,1,1,1,1,1],
      [1,1,1,1,1,1, ]
    ],
    "K": [
      [1,1, , , ,1,1],
      [1,1, , ,1,1, ],
      [1,1, ,1,1, , ],
      [1,1,1,1, , , ],
      [1,1, ,1,1, , ],
      [1,1, , ,1,1, ],
      [1,1, , , ,1,1],
      [1,1, , , ,1,1]
    ],
    "L": [
      [1,1, , , , , ],
      [1,1, , , , , ],
      [1,1, , , , , ],
      [1,1, , , , , ],
      [1,1, , , , , ],
      [1,1, , , , , ],
      [1,1, , , , , ],
      [1,1,1,1,1,1,1]
    ],
    "M": [
      [1, , , , , ,1],
      [1,1, , , ,1,1],
      [1,1,1, ,1,1,1],
      [1,1,1,1,1,1,1],
      [1,1,1,1,1,1,1],
      [1,1, ,1, ,1,1],
      [1,1, , , ,1,1],
      [1,1, , , ,1,1]
    ],
    "N": [
      [1, , , , ,1,1],
      [1,1, , , ,1,1],
      [1,1,1, , ,1,1],
      [1,1,1,1, ,1,1],
      [1,1, ,1,1,1,1],
      [1,1, , ,1,1,1],
      [1,1, , , ,1,1],
      [1,1, , , , ,1]
    ],
    "Ñ": [
      [1,1,1,1,1,1,1],
      [ , , , , , , ],
      [1,1, , , ,1,1],
      [1,1,1, , ,1,1],
      [1,1,1,1,1,1,1],
      [1,1,1,1,1,1,1],
      [1,1, , ,1,1,1],
      [1,1, , , ,1,1]
    ],
    "O": [
      [ ,1,1,1,1,1, ],
      [1,1, , , ,1,1],
      [1,1, , , ,1,1],
      [1,1, , , ,1,1],
      [1,1, , , ,1,1],
      [1,1, , , ,1,1],
      [1,1, , , ,1,1],
      [ ,1,1,1,1,1, ]
    ],
    "P": [
      [1,1,1,1,1,1, ],
      [1,1, , , ,1,1],
      [1,1, , , ,1,1],
      [1,1, , , ,1,1],
      [1,1,1,1,1,1, ],
      [1,1, , , , , ],
      [1,1, , , , , ],
      [1,1, , , , , ]
    ],
    "Q": [
      [ ,1,1,1,1,1, ],
      [1,1, , , ,1,1],
      [1,1, , , ,1,1],
      [1,1, , , ,1,1],
      [1,1, , , ,1,1],
      [1,1, , , ,1,1],
      [1,1, , ,1,1, ],
      [ ,1,1,1, ,1,1]
    ],
    "R": [
      [1,1,1,1,1,1, ],
      [1,1, , , ,1,1],
      [1,1, , , ,1,1],
      [1,1,1,1,1,1, ],
      [1,1, , , ,1,1],
      [1,1, , , ,1,1],
      [1,1, , , ,1,1],
      [1,1, , , ,1,1]
    ],
    "S": [
      [ ,1,1,1,1,1, ],
      [1,1, , , ,1,1],
      [1,1, , , , , ],
      [ ,1,1,1,1,1, ],
      [ , , , , ,1,1],
      [ , , , , ,1,1],
      [1,1, , , ,1,1],
      [ ,1,1,1,1,1, ]
    ],
    "T": [
      [1,1,1,1,1,1,1],
      [ , ,1,1,1, , ],
      [ , ,1,1,1, , ],
      [ , ,1,1,1, , ],
      [ , ,1,1,1, , ],
      [ , ,1,1,1, , ],
      [ , ,1,1,1, , ],
      [ , ,1,1,1, , ]
    ],
    "U": [
      [1,1, , , ,1,1],
      [1,1, , , ,1,1],
      [1,1, , , ,1,1],
      [1,1, , , ,1,1],
      [1,1, , , ,1,1],
      [1,1, , , ,1,1],
      [1,1, , , ,1,1],
      [ ,1,1,1,1,1, ]
    ],
    "V": [
      [1,1, , , ,1,1],
      [1,1, , , ,1,1],
      [1,1, , , ,1,1],
      [1,1, , , ,1,1],
      [1,1, , , ,1,1],
      [ ,1,1, ,1,1, ],
      [ , ,1,1,1, , ],
      [ , , ,1, , , ]
    ],
    "W": [
      [1,1, , , ,1,1],
      [1,1, , , ,1,1],
      [1,1, , , ,1,1],
      [1,1, , , ,1,1],
      [1,1, ,1, ,1,1],
      [1,1,1,1,1,1,1],
      [1,1,1,1,1,1,1],
      [ ,1, , , ,1, ]
    ],
    "X": [
      [1,1, , , ,1,1],
      [1,1, , , ,1,1],
      [ ,1,1, ,1,1, ],
      [ , ,1,1,1, , ],
      [ , ,1,1,1, , ],
      [ ,1,1, ,1,1, ],
      [1,1,1, , ,1,1],
      [1,1, , , ,1,1]
    ],
    "Y": [
      [1,1, , , ,1,1],
      [1,1, , , ,1,1],
      [1,1,1, ,1,1,1],
      [ ,1,1,1,1,1, ],
      [ , ,1,1,1, , ],
      [ , ,1,1,1, , ],
      [ , ,1,1,1, , ],
      [ , ,1,1,1, , ]
    ],
    "Z": [
      [1,1,1,1,1,1,1],
      [1,1, , ,1,1,1],
      [1, , ,1,1,1,1],
      [ , ,1,1,1,1, ],
      [ ,1,1,1,1, , ],
      [1,1,1,1, , ,1],
      [1,1,1, , ,1,1],
      [1,1,1,1,1,1,1]
    ],
    "0": [
      [ ,1,1,1,1,1, ],
      [1,1, , , ,1,1],
      [1,1, , ,1,1,1],
      [1,1, ,1, ,1,1],
      [1,1, ,1, ,1,1],
      [1,1,1, , ,1,1],
      [1,1, , , ,1,1],
      [ ,1,1,1,1,1, ]
    ],
    "1": [
      [ , ,1,1,1, , ],
      [ ,1,1,1,1, , ],
      [1,1,1,1,1, , ],
      [ , ,1,1,1, , ],
      [ , ,1,1,1, , ],
      [ , ,1,1,1, , ],
      [ , ,1,1,1, , ],
      [1,1,1,1,1,1,1]
    ],
    "2": [
      [ , ,1,1,1,1, ],
      [1,1, , , ,1,1],
      [1,1, , , ,1,1],
      [ , , , ,1,1, ],
      [ , , ,1,1, , ],
      [ , ,1,1, , , ],
      [ ,1,1, , ,1,1],
      [1,1,1,1,1,1,1]
    ],
    "3": [
      [ ,1,1,1,1,1, ],
      [1,1, , , ,1,1],
      [1,1, , , ,1,1],
      [ , , ,1,1,1, ],
      [ , , , , ,1,1],
      [1,1, , , ,1,1],
      [1,1, , , ,1,1],
      [ ,1,1,1,1,1, ]
    ],
    "4": [
      [ , , , ,1,1,1],
      [ , , ,1,1,1,1],
      [ , ,1,1, ,1,1],
      [ ,1,1, , ,1,1],
      [1,1,1,1,1,1,1],
      [1,1,1,1,1,1,1],
      [ , , , , ,1,1],
      [ , , , , ,1,1]
    ],
    "5": [
      [1,1,1,1,1,1,1],
      [1,1, , , , , ],
      [1,1, , , , , ],
      [1,1,1,1,1,1, ],
      [ , , , , ,1,1],
      [ , , , , ,1,1],
      [1,1, , , ,1,1],
      [ ,1,1,1,1,1, ]
    ],
    "6": [
      [ ,1,1,1,1,1, ],
      [1,1, , , ,1,1],
      [1,1, , , ,1,1],
      [1,1, , , , , ],
      [1,1,1,1,1,1,1],
      [1,1, , , ,1,1],
      [1,1, , , ,1,1],
      [ ,1,1,1,1,1, ]
    ],
    "7": [
      [1,1,1,1,1,1,1],
      [1,1, , , ,1,1],
      [ , , , ,1,1,1],
      [ , , ,1,1,1, ],
      [ , ,1,1,1, , ],
      [ , ,1,1,1, , ],
      [ , ,1,1,1, , ],
      [ , ,1,1,1, , ]
    ],
    "8": [
      [ ,1,1,1,1,1, ],
      [1,1, , , ,1,1],
      [1,1, , , ,1,1],
      [ ,1,1,1,1,1, ],
      [1,1, , , ,1,1],
      [1,1, , , ,1,1],
      [1,1, , , ,1,1],
      [ ,1,1,1,1,1, ]
    ],
    "9": [
      [ ,1,1,1,1,1, ],
      [1,1, , , ,1,1],
      [1,1, , , ,1,1],
      [1,1, , , ,1,1],
      [ ,1,1,1,1,1,1],
      [ , , , , ,1,1],
      [1,1, , , ,1,1],
      [ ,1,1,1,1,1, ]
    ],
    "+": [
      [ , , , , , ],
      [ , ,1,1, , ],
      [ , ,1,1, , ],
      [1,1,1,1,1,1],
      [1,1,1,1,1,1],
      [ , ,1,1, , ],
      [ , ,1,1, , ],
      [ , , , , , ]
    ],
    "-": [
      [ , , , , , , ],
      [ , , , , , , ],
      [ , , , , , , ],
      [1,1,1,1,1,1,1],
      [1,1,1,1,1,1,1],
      [ , , , , , , ],
      [ , , , , , , ],
      [ , , , , , , ]
    ],
    "_": [
      [ , , , , , , ],
      [ , , , , , , ],
      [ , , , , , , ],
      [ , , , , , , ],
      [ , , , , , , ],
      [ , , , , , , ],
      [1,1,1,1,1,1,1],
      [1,1,1,1,1,1,1]
    ],
    "(": [
      [ , ,1,1],
      [ ,1,1, ],
      [1,1, , ],
      [1,1, , ],
      [1,1, , ],
      [1,1, , ],
      [ ,1,1, ],
      [ , ,1,1]
    ],
    ")": [
      [1,1, , ],
      [ ,1,1, ],
      [ , ,1,1],
      [ , ,1,1],
      [ , ,1,1],
      [ , ,1,1],
      [ ,1,1, ],
      [1,1, , ]
    ],
    "{": [
      [ ,1,1,1,1],
      [ ,1,1, , ],
      [ ,1,1, , ],
      [1,1, , , ],
      [1,1, , , ],
      [ ,1,1, , ],
      [ ,1,1, , ],
      [ ,1,1,1,1]
    ],
    "}": [
      [ , ,1,1,1,1, ],
      [ , , , ,1,1, ],
      [ , , , ,1,1, ],
      [ , , , , ,1,1],
      [ , , , , ,1,1],
      [ , , , ,1,1, ],
      [ , , , ,1,1, ],
      [ , ,1,1,1,1, ]
    ],
    "[": [
      [1,1,1,1],
      [1,1, , ],
      [1,1, , ],
      [1,1, , ],
      [1,1, , ],
      [1,1, , ],
      [1,1, , ],
      [1,1,1,1]
    ],
    "]": [
      [1,1,1,1],
      [ , ,1,1],
      [ , ,1,1],
      [ , ,1,1],
      [ , ,1,1],
      [ , ,1,1],
      [ , ,1,1],
      [1,1,1,1]
    ],
    "=": [
      [ , , , , , , ],
      [ , , , , , , ],
      [1,1,1,1,1,1,1],
      [1,1,1,1,1,1,1],
      [ , , , , , , ],
      [1,1,1,1,1,1,1],
      [1,1,1,1,1,1,1],
      [ , , , , , , ]
    ],
    "/": [
      [ , , , , ,1,1],
      [ , , , , ,1,1],
      [ , , , ,1,1, ],
      [ , , ,1,1, , ],
      [ , ,1,1, , , ],
      [ ,1,1, , , , ],
      [1,1, , , , , ],
      [1,1, , , , , ]
    ],
    "\\": [
      [1,1, , , , , ],
      [1,1, , , , , ],
      [ ,1,1, , , , ],
      [ , ,1,1, , , ],
      [ , , ,1,1, , ],
      [ , , , ,1,1, ],
      [ , , , , ,1,1],
      [ , , , , ,1,1]
    ],
    "%": [
      [1,1, , , ,1,1],
      [1,1, , , ,1,1],
      [ , , , ,1,1, ],
      [ , , ,1,1, , ],
      [ , ,1,1, , , ],
      [ ,1,1, , , , ],
      [1,1, , , ,1,1],
      [1,1, , , ,1,1]
    ],
    ".": [
      [ , ],
      [ , ],
      [ , ],
      [ , ],
      [ , ],
      [ , ],
      [1,1],
      [1,1]
    ],
    "*": [
      [1, ,1, ,1],
      [ ,1,1,1, ],
      [1,1,1,1,1],
      [ ,1,1,1, ],
      [1, ,1, ,1],
      [ , , , , ],
      [ , , , , ],
      [ , , , , ]
    ],
    ":": [
      [ , ],
      [ , ],
      [1,1],
      [1,1],
      [ , ],
      [1,1],
      [1,1],
      [ , ]
    ],
    ";": [
      [ , ],
      [ , ],
      [ , ],
      [1,1],
      [ , ],
      [1,1],
      [1,1],
      [ ,1]
    ],
    "!": [
      [1,1],
      [1,1],
      [1,1],
      [1,1],
      [1,1],
      [ , ],
      [1,1],
      [1,1]
    ],
    "¡": [
      [1,1],
      [1,1],
      [ , ],
      [1,1],
      [1,1],
      [1,1],
      [1,1],
      [1,1]
    ],
    "?": [
      [ ,1,1,1,1,1, ],
      [1,1, , , ,1,1],
      [1,1, , , ,1,1],
      [ , , ,1,1,1, ],
      [ , ,1,1,1, , ],
      [ , ,1,1,1, , ],
      [ , , , , , , ],
      [ , ,1,1,1, , ]
    ],
    "¿": [
      [ , ,1,1,1, , ],
      [ , , , , , , ],
      [ , ,1,1,1, , ],
      [ , ,1,1,1, , ],
      [ ,1,1,1, , , ],
      [1,1, , , ,1,1],
      [1,1, , , ,1,1],
      [ ,1,1,1,1,1, ]
    ],
    "\"": [
      [1,1, ,1,1],
      [1,1, ,1,1],
      [1,1, ,1,1],
      [ , , , , ],
      [ , , , , ],
      [ , , , , ],
      [ , , , , ],
      [ , , , , ]
    ],
    "<": [
      [ , , ,1,1],
      [ , ,1,1, ],
      [ ,1,1, , ],
      [1,1, , , ],
      [1,1, , , ],
      [ ,1,1, , ],
      [ , ,1,1, ],
      [ , , ,1,1]
    ],
    ">": [
      [1,1, , , ],
      [ ,1,1, , ],
      [ , ,1,1, ],
      [ , , ,1,1],
      [ , , ,1,1],
      [ , ,1,1, ],
      [ ,1,1, , ],
      [1,1, , , ]
    ],
    '\'': [
      [1,1],
      [1,1],
      [1,1],
      [ , ],
      [ , ],
      [ , ],
      [ , ],
      [ , ]
    ],
    "°": [
      [ ,1,1, ],
      [1, , ,1],
      [1, , ,1],
      [ ,1,1, ],
      [ , , , ],
      [ , , , ],
      [ , , , ],
      [ , , , ]
    ],
    "|": [
      [1,1],
      [1,1],
      [1,1],
      [1,1],
      [1,1],
      [1,1],
      [1,1],
      [1,1]
    ],
    "♥": [
      [ ,1,1, , , ,1,1, ],
      [1,1,1,1, ,1,1,1,1],
      [1,1,1,1,1,1,1,1,1],
      [1,1,1,1,1,1,1,1,1],
      [ ,1,1,1,1,1,1,1, ],
      [ , ,1,1,1,1,1, , ],
      [ , , ,1,1,1, , , ],
      [ , , , ,1, , , , ]
    ],
    "#": [
      [ ,1,1, ,1,1, ],
      [ ,1,1, ,1,1, ],
      [1,1,1,1,1,1,1],
      [1,1,1,1,1,1,1],
      [ ,1,1, ,1,1, ],
      [1,1,1,1,1,1,1],
      [1,1,1,1,1,1,1],
      [ ,1,1, ,1,1, ]
    ],
    " ": [
      [ , , ],
      [ , , ],
      [ , , ],
      [ , , ],
      [ , , ],
      [ , , ],
      [ , , ],
      [ , , ]
    ],
    "@": [
      [],
      [],
      [],
      [],
      [],
      [],
      [],
      []
    ]
  },
  "minecraft8x9": {
    Tier: 3,
    //Disabled: true,
    "Name": "Minecraft 8px",
    "Height": 8,
    "A": [
      [1,1,1,1,1,1,1],
      [1,1,1,1,1,1,1],
      [1,1,1, ,1,1,1],
      [1,1,1, ,1,1,1],
      [1,1,1,1,1,1,1],
      [1,1,1,1,1,1,1],
      [1,1,1, ,1,1,1],
      [1,1,1, ,1,1,1]
    ],
    "B": [
      [1,1,1,1,1,1, ],
      [1,1,1,1,1,1,1],
      [1,1,1, ,1,1,1],
      [1,1,1,1,1,1, ],
      [1,1,1,1,1,1,1],
      [1,1,1, ,1,1,1],
      [1,1,1,1,1,1,1],
      [1,1,1,1,1,1, ]
    ],
    "C": [
      [ ,1,1,1,1,1,1],
      [1,1,1,1,1,1,1],
      [1,1,1,1,1,1,1],
      [1,1,1, , , , ],
      [1,1,1, , , , ],
      [1,1,1,1,1,1,1],
      [1,1,1,1,1,1,1],
      [ ,1,1,1,1,1,1]
    ],
    "D": [
      [1,1,1,1,1,1, ],
      [1,1,1,1,1,1,1],
      [1,1,1, ,1,1,1],
      [1,1,1, ,1,1,1],
      [1,1,1, ,1,1,1],
      [1,1,1, ,1,1,1],
      [1,1,1,1,1,1,1],
      [1,1,1,1,1,1, ]
    ],
    "E": [
      [1,1,1,1,1,1,1],
      [1,1,1,1,1,1,1],
      [1,1,1, , , , ],
      [1,1,1,1,1,1,1],
      [1,1,1,1,1,1,1],
      [1,1,1, , , , ],
      [1,1,1,1,1,1,1],
      [1,1,1,1,1,1,1]
    ],
    "F": [
      [1,1,1,1,1,1,1],
      [1,1,1,1,1,1,1],
      [1,1,1, , , , ],
      [1,1,1,1,1,1,1],
      [1,1,1,1,1,1,1],
      [1,1,1, , , , ],
      [1,1,1, , , , ],
      [1,1,1, , , , ]
    ],
    "G": [
      [ ,1,1,1,1,1,1],
      [1,1,1,1,1,1,1],
      [1,1,1, , , , ],
      [1,1,1, ,1,1,1],
      [1,1,1, ,1,1,1],
      [1,1,1, , ,1,1],
      [1,1,1,1,1,1,1],
      [ ,1,1,1,1,1,1]
    ],
    "H": [
      [1,1,1, ,1,1,1],
      [1,1,1, ,1,1,1],
      [1,1,1, ,1,1,1],
      [1,1,1,1,1,1,1],
      [1,1,1,1,1,1,1],
      [1,1,1, ,1,1,1],
      [1,1,1, ,1,1,1],
      [1,1,1, ,1,1,1]
    ],
    "I": [
      [1,1,1],
      [1,1,1],
      [1,1,1],
      [1,1,1],
      [1,1,1],
      [1,1,1],
      [1,1,1],
      [1,1,1]
    ],
    "J": [
      [ ,1,1,1,1,1,1],
      [ ,1,1,1,1,1,1],
      [ , , , ,1,1,1],
      [ , , , ,1,1,1],
      [ , , , ,1,1,1],
      [ , , , ,1,1,1],
      [1,1,1,1,1,1,1],
      [1,1,1,1,1,1,1]
    ],
    "K": [
      [1,1, , , ,1,1],
      [1,1, , ,1,1,1],
      [1,1, ,1,1,1, ],
      [1,1,1,1,1, , ],
      [1,1,1,1,1,1, ],
      [1,1, ,1,1,1,1],
      [1,1, , ,1,1,1],
      [1,1, , , ,1,1]
    ],
    "L": [
      [1,1,1, , , , ],
      [1,1,1, , , , ],
      [1,1,1, , , , ],
      [1,1,1, , , , ],
      [1,1,1, , , , ],
      [1,1,1, , , , ],
      [1,1,1,1,1,1,1],
      [1,1,1,1,1,1,1]
    ],
    "M": [
      [1,1, , , , ,1,1],
      [1,1,1, , ,1,1,1],
      [1,1,1,1,1,1,1,1],
      [1,1,1,1,1,1,1,1],
      [1,1,1,1,1,1,1,1],
      [1,1, ,1,1, ,1,1],
      [1,1, , , , ,1,1],
      [1,1, , , , ,1,1]
    ],
    "N": [
      [1,1, , , ,1,1],
      [1,1,1, , ,1,1],
      [1,1,1,1, ,1,1],
      [1,1,1,1,1,1,1],
      [1,1,1,1,1,1,1],
      [1,1, ,1,1,1,1],
      [1,1, , ,1,1,1],
      [1,1, , , ,1,1]
    ],
    "Ñ": [
      [1,1,1,1,1,1,1],
      [ , , , , , , ],
      [1,1, , , ,1,1],
      [1,1,1, , ,1,1],
      [1,1,1,1, ,1,1],
      [1,1, ,1,1,1,1],
      [1,1, , ,1,1,1],
      [1,1, , , ,1,1]
    ],
    "O": [
      [ ,1,1,1,1,1, ],
      [1,1,1,1,1,1,1],
      [1,1,1,1,1,1,1],
      [1,1,1, ,1,1,1],
      [1,1,1, ,1,1,1],
      [1,1,1,1,1,1,1],
      [1,1,1,1,1,1,1],
      [ ,1,1,1,1,1, ]
    ],
    "P": [
      [1,1,1,1,1,1,1],
      [1,1,1,1,1,1,1],
      [1,1,1, ,1,1,1],
      [1,1,1,1,1,1,1],
      [1,1,1,1,1,1,1],
      [1,1,1, , , , ],
      [1,1,1, , , , ],
      [1,1,1, , , , ]
    ],
    "Q": [
      [ ,1,1,1,1,1, ],
      [1,1,1,1,1,1,1],
      [1,1, , , ,1,1],
      [1,1, , , ,1,1],
      [1,1, , , ,1,1],
      [1,1, , ,1,1,1],
      [1,1,1,1,1,1, ],
      [ ,1,1,1,1, ,1]
    ],
    "R": [
      [1,1,1,1,1,1,1],
      [1,1,1,1,1,1,1],
      [1,1,1, , ,1,1],
      [1,1,1,1,1,1, ],
      [1,1,1,1,1,1,1],
      [1,1,1, , ,1,1],
      [1,1,1, , ,1,1],
      [1,1,1, , ,1,1]
    ],
    "S": [
      [1,1,1,1,1,1,1],
      [1,1,1,1,1,1,1],
      [1,1,1, , , , ],
      [1,1,1,1,1,1,1],
      [1,1,1,1,1,1,1],
      [ , , , ,1,1,1],
      [1,1,1,1,1,1,1],
      [1,1,1,1,1,1,1]
    ],
    "T": [
      [1,1,1,1,1,1,1],
      [1,1,1,1,1,1,1],
      [ , ,1,1,1, , ],
      [ , ,1,1,1, , ],
      [ , ,1,1,1, , ],
      [ , ,1,1,1, , ],
      [ , ,1,1,1, , ],
      [ , ,1,1,1, , ]
    ],
    "U": [
      [1,1,1, ,1,1,1],
      [1,1,1, ,1,1,1],
      [1,1,1, ,1,1,1],
      [1,1,1, ,1,1,1],
      [1,1,1, ,1,1,1],
      [1,1,1, ,1,1,1],
      [1,1,1, ,1,1,1],
      [1,1,1,1,1,1,1]
    ],
    "V": [
      [1,1,1, ,1,1,1],
      [1,1,1, ,1,1,1],
      [1,1,1, ,1,1,1],
      [1,1,1, ,1,1,1],
      [1,1,1, ,1,1,1],
      [1,1,1, ,1,1,1],
      [ ,1,1,1,1,1, ],
      [ , ,1,1,1, , ]
    ],
    "W": [
      [1,1, , , ,1,1],
      [1,1, , , ,1,1],
      [1,1, , , ,1,1],
      [1,1, ,1, ,1,1],
      [1,1,1,1,1,1,1],
      [1,1,1,1,1,1,1],
      [1,1,1, ,1,1,1],
      [1,1, , , ,1,1]
    ],
    "X": [
      [1,1, , , ,1,1],
      [1,1,1, ,1,1,1],
      [ ,1,1,1,1,1, ],
      [ , ,1,1,1, , ],
      [ , ,1,1,1, , ],
      [ ,1,1,1,1,1, ],
      [1,1,1, ,1,1,1],
      [1,1, , , ,1,1]
    ],
    "Y": [
      [1,1,1, ,1,1,1],
      [1,1,1, ,1,1,1],
      [1,1,1, ,1,1,1],
      [1,1,1, ,1,1,1],
      [1,1,1, ,1,1,1],
      [ ,1,1,1,1,1, ],
      [ , ,1,1,1, , ],
      [ , ,1,1,1, , ]
    ],
    "Z": [
      [1,1,1,1,1,1,1],
      [1,1,1,1,1,1,1],
      [ , , ,1,1,1,1],
      [ , ,1,1,1,1, ],
      [ ,1,1,1,1, , ],
      [1,1,1, , , , ],
      [1,1,1,1,1,1,1],
      [1,1,1,1,1,1,1]
    ],
    "0": [
      [ ,1,1,1,1,1, ],
      [1,1,1,1,1,1,1],
      [1,1, , , ,1,1],
      [1,1, ,1,1,1,1],
      [1,1,1,1, ,1,1],
      [1,1, , , ,1,1],
      [1,1,1,1,1,1,1],
      [ ,1,1,1,1,1, ]
    ],
    "1": [
      [ , ,1,1,1],
      [ ,1,1,1,1],
      [1,1,1,1,1],
      [1,1,1,1,1],
      [ , ,1,1,1],
      [ , ,1,1,1],
      [ , ,1,1,1],
      [ , ,1,1,1]
    ],
    "2": [
      [ ,1,1,1,1,1, ],
      [1,1,1,1,1,1,1],
      [1,1, , ,1,1,1],
      [ , , ,1,1,1, ],
      [ , ,1,1,1, , ],
      [ ,1,1,1, , , ],
      [1,1,1,1,1,1,1],
      [1,1,1,1,1,1,1]
    ],
    "3": [
      [1,1,1,1,1,1, ],
      [1,1,1,1,1,1,1],
      [ , , , , ,1,1],
      [1,1,1,1,1,1, ],
      [1,1,1,1,1,1, ],
      [ , , , , ,1,1],
      [1,1,1,1,1,1,1],
      [1,1,1,1,1,1, ]
    ],
    "4": [
      [ , , ,1,1,1, ],
      [ , ,1,1,1,1, ],
      [ ,1,1,1,1,1, ],
      [1,1,1, ,1,1, ],
      [1,1,1,1,1,1,1],
      [1,1,1,1,1,1,1],
      [ , , , ,1,1, ],
      [ , , , ,1,1, ]
    ],
    "5": [
      [1,1,1,1,1,1,1],
      [1,1,1,1,1,1,1],
      [1,1, , , , , ],
      [1,1,1,1,1,1, ],
      [ ,1,1,1,1,1,1],
      [ , , , ,1,1,1],
      [1,1,1,1,1,1,1],
      [1,1,1,1,1,1, ]
    ],
    "6": [
      [ ,1,1,1,1,1,1],
      [1,1,1,1,1,1,1],
      [1,1, , , , , ],
      [1,1,1,1,1,1, ],
      [1,1,1,1,1,1,1],
      [1,1, , , ,1,1],
      [1,1,1,1,1,1,1],
      [ ,1,1,1,1,1, ]
    ],
    "7": [
      [1,1,1,1,1,1,1],
      [1,1,1,1,1,1,1],
      [ , , , ,1,1,1],
      [ , , ,1,1,1, ],
      [ , ,1,1,1, , ],
      [ , ,1,1, , , ],
      [ , ,1,1, , , ],
      [ , ,1,1, , , ]
    ],
    "8": [
      [ ,1,1,1,1,1, ],
      [1,1,1,1,1,1,1],
      [1,1,1, ,1,1,1],
      [ ,1,1,1,1,1, ],
      [1,1,1,1,1,1,1],
      [1,1,1, ,1,1,1],
      [1,1,1,1,1,1,1],
      [ ,1,1,1,1,1, ]
    ],
    "9": [
      [ ,1,1,1,1,1, ],
      [1,1,1,1,1,1,1],
      [1,1, , , ,1,1],
      [1,1,1,1,1,1,1],
      [ ,1,1,1,1,1,1],
      [ , , , , ,1,1],
      [1,1,1,1,1,1,1],
      [1,1,1,1,1,1, ]
    ],
    "+": [
      [ , , , , , ],
      [ , ,1,1, , ],
      [ , ,1,1, , ],
      [1,1,1,1,1,1],
      [1,1,1,1,1,1],
      [ , ,1,1, , ],
      [ , ,1,1, , ],
      [ , , , , , ]
    ],
    "-": [
      [ , , , , , , ],
      [ , , , , , , ],
      [ , , , , , , ],
      [1,1,1,1,1,1,1],
      [1,1,1,1,1,1,1],
      [ , , , , , , ],
      [ , , , , , , ],
      [ , , , , , , ]
    ],
    "_": [
      [ , , , , , , ],
      [ , , , , , , ],
      [ , , , , , , ],
      [ , , , , , , ],
      [ , , , , , , ],
      [ , , , , , , ],
      [1,1,1,1,1,1,1],
      [1,1,1,1,1,1,1]
    ],
    "(": [
      [ , ,1,1],
      [ ,1,1, ],
      [1,1, , ],
      [1,1, , ],
      [1,1, , ],
      [1,1, , ],
      [ ,1,1, ],
      [ , ,1,1]
    ],
    ")": [
      [1,1, , ],
      [ ,1,1, ],
      [ , ,1,1],
      [ , ,1,1],
      [ , ,1,1],
      [ , ,1,1],
      [ ,1,1, ],
      [1,1, , ]
    ],
    "{": [
      [ ,1,1,1,1],
      [ ,1,1, , ],
      [ ,1,1, , ],
      [1,1, , , ],
      [1,1, , , ],
      [ ,1,1, , ],
      [ ,1,1, , ],
      [ ,1,1,1,1]
    ],
    "}": [
      [ , ,1,1,1,1, ],
      [ , , , ,1,1, ],
      [ , , , ,1,1, ],
      [ , , , , ,1,1],
      [ , , , , ,1,1],
      [ , , , ,1,1, ],
      [ , , , ,1,1, ],
      [ , ,1,1,1,1, ]
    ],
    "[": [
      [1,1,1,1],
      [1,1, , ],
      [1,1, , ],
      [1,1, , ],
      [1,1, , ],
      [1,1, , ],
      [1,1, , ],
      [1,1,1,1]
    ],
    "]": [
      [1,1,1,1],
      [ , ,1,1],
      [ , ,1,1],
      [ , ,1,1],
      [ , ,1,1],
      [ , ,1,1],
      [ , ,1,1],
      [1,1,1,1]
    ],
    "=": [
      [ , , , , , , ],
      [ , , , , , , ],
      [1,1,1,1,1,1,1],
      [1,1,1,1,1,1,1],
      [ , , , , , , ],
      [1,1,1,1,1,1,1],
      [1,1,1,1,1,1,1],
      [ , , , , , , ]
    ],
    "/": [
      [ , , , , ,1,1],
      [ , , , , ,1,1],
      [ , , , ,1,1, ],
      [ , , ,1,1, , ],
      [ , ,1,1, , , ],
      [ ,1,1, , , , ],
      [1,1, , , , , ],
      [1,1, , , , , ]
    ],
    "\\": [
      [1,1, , , , , ],
      [1,1, , , , , ],
      [ ,1,1, , , , ],
      [ , ,1,1, , , ],
      [ , , ,1,1, , ],
      [ , , , ,1,1, ],
      [ , , , , ,1,1],
      [ , , , , ,1,1]
    ],
    "%": [
      [1,1, , , ,1,1],
      [1,1, , , ,1,1],
      [ , , , ,1,1, ],
      [ , , ,1,1, , ],
      [ , ,1,1, , , ],
      [ ,1,1, , , , ],
      [1,1, , , ,1,1],
      [1,1, , , ,1,1]
    ],
    ".": [
      [ , ],
      [ , ],
      [ , ],
      [ , ],
      [ , ],
      [ , ],
      [1,1],
      [1,1]
    ],
    "*": [
      [1, ,1, ,1],
      [ ,1,1,1, ],
      [1,1,1,1,1],
      [ ,1,1,1, ],
      [1, ,1, ,1],
      [ , , , , ],
      [ , , , , ],
      [ , , , , ]
    ],
    ":": [
      [ , ],
      [ , ],
      [1,1],
      [1,1],
      [ , ],
      [1,1],
      [1,1],
      [ , ]
    ],
    ";": [
      [ , ],
      [ , ],
      [ , ],
      [1,1],
      [ , ],
      [1,1],
      [1,1],
      [ ,1]
    ],
    "!": [
      [1,1],
      [1,1],
      [1,1],
      [1,1],
      [1,1],
      [ , ],
      [1,1],
      [1,1]
    ],
    "¡": [
      [1,1],
      [1,1],
      [ , ],
      [1,1],
      [1,1],
      [1,1],
      [1,1],
      [1,1]
    ],
    "?": [
      [ ,1,1,1,1,1, ],
      [1,1, , , ,1,1],
      [1,1, , , ,1,1],
      [ , , ,1,1,1, ],
      [ , ,1,1,1, , ],
      [ , ,1,1,1, , ],
      [ , , , , , , ],
      [ , ,1,1,1, , ]
    ],
    "¿": [
      [ , ,1,1,1, , ],
      [ , , , , , , ],
      [ , ,1,1,1, , ],
      [ , ,1,1,1, , ],
      [ ,1,1,1, , , ],
      [1,1, , , ,1,1],
      [1,1, , , ,1,1],
      [ ,1,1,1,1,1, ]
    ],
    "\"": [
      [1,1, ,1,1],
      [1,1, ,1,1],
      [1,1, ,1,1],
      [ , , , , ],
      [ , , , , ],
      [ , , , , ],
      [ , , , , ],
      [ , , , , ]
    ],
    "<": [
      [ , , ,1,1],
      [ , ,1,1, ],
      [ ,1,1, , ],
      [1,1, , , ],
      [1,1, , , ],
      [ ,1,1, , ],
      [ , ,1,1, ],
      [ , , ,1,1]
    ],
    ">": [
      [1,1, , , ],
      [ ,1,1, , ],
      [ , ,1,1, ],
      [ , , ,1,1],
      [ , , ,1,1],
      [ , ,1,1, ],
      [ ,1,1, , ],
      [1,1, , , ]
    ],
    '\'': [
      [1,1],
      [1,1],
      [1,1],
      [ , ],
      [ , ],
      [ , ],
      [ , ],
      [ , ]
    ],
    "°": [
      [ ,1,1, ],
      [1, , ,1],
      [1, , ,1],
      [ ,1,1, ],
      [ , , , ],
      [ , , , ],
      [ , , , ],
      [ , , , ]
    ],
    "|": [
      [1,1],
      [1,1],
      [1,1],
      [1,1],
      [1,1],
      [1,1],
      [1,1],
      [1,1]
    ],
    "♥": [
      [ ,1,1, , , ,1,1, ],
      [1,1,1,1, ,1,1,1,1],
      [1,1,1,1,1,1,1,1,1],
      [1,1,1,1,1,1,1,1,1],
      [ ,1,1,1,1,1,1,1, ],
      [ , ,1,1,1,1,1, , ],
      [ , , ,1,1,1, , , ],
      [ , , , ,1, , , , ]
    ],
    "#": [
      [ ,1,1, ,1,1, ],
      [ ,1,1, ,1,1, ],
      [1,1,1,1,1,1,1],
      [1,1,1,1,1,1,1],
      [ ,1,1, ,1,1, ],
      [1,1,1,1,1,1,1],
      [1,1,1,1,1,1,1],
      [ ,1,1, ,1,1, ]
    ],
    " ": [
      [ , , ],
      [ , , ],
      [ , , ],
      [ , , ],
      [ , , ],
      [ , , ],
      [ , , ],
      [ , , ]
    ],
    "@": [
      [],
      [],
      [],
      [],
      [],
      [],
      [],
      []
    ]
  },
  "giant9x7": {
    "Name": "Giant 9px",
    "Height": 9,
    "A": [
      [ , ,1,1,1, , ],
      [ ,1,1,1,1,1, ],
      [1,1,1, ,1,1,1],
      [1,1, , , ,1,1],
      [1,1,1,1,1,1,1],
      [1,1,1,1,1,1,1],
      [1,1, , , ,1,1],
      [1,1, , , ,1,1],
      [1,1, , , ,1,1]
    ],
    "B": [
      [1,1,1,1,1,1, ],
      [1,1,1,1,1,1,1],
      [1,1, , , ,1,1],
      [1,1,1,1,1,1, ],
      [1,1,1,1,1,1,1],
      [1,1, , , ,1,1],
      [1,1, , , ,1,1],
      [1,1,1,1,1,1,1],
      [1,1,1,1,1,1, ]
    ],
    "C": [
      [ ,1,1,1,1,1, ],
      [1,1,1,1,1,1,1],
      [1,1, , , ,1,1],
      [1,1, , , , , ],
      [1,1, , , , , ],
      [1,1, , , , , ],
      [1,1, , , ,1,1],
      [1,1,1,1,1,1,1],
      [ ,1,1,1,1,1, ]
    ],
    "D": [
      [1,1,1,1,1,1, ],
      [1,1,1,1,1,1,1],
      [1,1, , , ,1,1],
      [1,1, , , ,1,1],
      [1,1, , , ,1,1],
      [1,1, , , ,1,1],
      [1,1, , , ,1,1],
      [1,1,1,1,1,1,1],
      [1,1,1,1,1,1, ]
    ],
    "E": [
      [1,1,1,1,1,1,1],
      [1,1,1,1,1,1,1],
      [1,1, , , , , ],
      [1,1,1,1,1, , ],
      [1,1,1,1,1, , ],
      [1,1, , , , , ],
      [1,1, , , , , ],
      [1,1,1,1,1,1,1],
      [1,1,1,1,1,1,1]
    ],
    "F": [
      [1,1,1,1,1,1,1],
      [1,1,1,1,1,1,1],
      [1,1, , , , , ],
      [1,1,1,1,1, , ],
      [1,1,1,1,1, , ],
      [1,1, , , , , ],
      [1,1, , , , , ],
      [1,1, , , , , ],
      [1,1, , , , , ]
    ],
    "G": [
      [ ,1,1,1,1,1,1],
      [1,1,1,1,1,1,1],
      [1,1, , , , , ],
      [1,1, , , , , ],
      [1,1, , ,1,1,1],
      [1,1, , ,1,1,1],
      [1,1, , , ,1,1],
      [1,1,1,1,1,1,1],
      [ ,1,1,1,1,1,1]
    ],
    "H": [
      [1,1, , , ,1,1],
      [1,1, , , ,1,1],
      [1,1, , , ,1,1],
      [1,1,1,1,1,1,1],
      [1,1,1,1,1,1,1],
      [1,1, , , ,1,1],
      [1,1, , , ,1,1],
      [1,1, , , ,1,1],
      [1,1, , , ,1,1]
    ],
    "I": [
      [1,1,1,1,1,1],
      [1,1,1,1,1,1],
      [ , ,1,1, , ],
      [ , ,1,1, , ],
      [ , ,1,1, , ],
      [ , ,1,1, , ],
      [ , ,1,1, , ],
      [1,1,1,1,1,1],
      [1,1,1,1,1,1]
    ],
    "J": [
      [ , , , , ,1,1],
      [ , , , , ,1,1],
      [ , , , , ,1,1],
      [ , , , , ,1,1],
      [ , , , , ,1,1],
      [ , , , , ,1,1],
      [1,1, , , ,1,1],
      [1,1,1,1,1,1,1],
      [ ,1,1,1,1,1, ]
    ],
    "K": [
      [1,1, , , ,1,1],
      [1,1, , ,1,1,1],
      [1,1, ,1,1,1, ],
      [1,1,1,1,1, , ],
      [1,1,1,1, , , ],
      [1,1,1,1,1, , ],
      [1,1, ,1,1,1, ],
      [1,1, , ,1,1,1],
      [1,1, , , ,1,1]
    ],
    "L": [
      [1,1, , , , , ],
      [1,1, , , , , ],
      [1,1, , , , , ],
      [1,1, , , , , ],
      [1,1, , , , , ],
      [1,1, , , , , ],
      [1,1, , , , , ],
      [1,1,1,1,1,1,1],
      [1,1,1,1,1,1,1]
    ],
    "M": [
      [1, , , , , ,1],
      [1,1, , , ,1,1],
      [1,1,1, ,1,1,1],
      [1,1,1,1,1,1,1],
      [1,1,1,1,1,1,1],
      [1,1, ,1, ,1,1],
      [1,1, , , ,1,1],
      [1,1, , , ,1,1],
      [1,1, , , ,1,1]
    ],
    "N": [
      [1, , , , ,1,1],
      [1,1, , , ,1,1],
      [1,1,1, , ,1,1],
      [1,1,1,1, ,1,1],
      [1,1,1,1,1,1,1],
      [1,1, ,1,1,1,1],
      [1,1, , ,1,1,1],
      [1,1, , , ,1,1],
      [1,1, , , , ,1]
    ],
    "Ñ": [
      [1,1,1,1,1,1,1],
      [1,1,1,1,1,1,1],
      [ , , , , , , ],
      [1,1,1, , ,1,1],
      [1,1,1,1, ,1,1],
      [1,1,1,1,1,1,1],
      [1,1,1,1,1,1,1],
      [1,1, ,1,1,1,1],
      [1,1, , ,1,1,1]
    ],
    "O": [
      [ ,1,1,1,1,1, ],
      [1,1,1,1,1,1,1],
      [1,1, , , ,1,1],
      [1,1, , , ,1,1],
      [1,1, , , ,1,1],
      [1,1, , , ,1,1],
      [1,1, , , ,1,1],
      [1,1,1,1,1,1,1],
      [ ,1,1,1,1,1, ]
    ],
    "P": [
      [1,1,1,1,1,1, ],
      [1,1,1,1,1,1,1],
      [1,1, , , ,1,1],
      [1,1, , , ,1,1],
      [1,1,1,1,1,1,1],
      [1,1,1,1,1,1, ],
      [1,1, , , , , ],
      [1,1, , , , , ],
      [1,1, , , , , ]
    ],
    "Q": [
      [ ,1,1,1,1,1, ],
      [1,1,1,1,1,1,1],
      [1,1, , , ,1,1],
      [1,1, , , ,1,1],
      [1,1, , , ,1,1],
      [1,1, , , ,1,1],
      [1,1,1,1,1,1,1],
      [ ,1,1,1,1,1, ],
      [ , , , ,1,1,1]
    ],
    "R": [
      [1,1,1,1,1,1, ],
      [1,1,1,1,1,1,1],
      [1,1, , , ,1,1],
      [1,1, , , ,1,1],
      [1,1,1,1,1,1,1],
      [1,1,1,1,1,1, ],
      [1,1, ,1,1,1, ],
      [1,1, , ,1,1,1],
      [1,1, , , ,1,1]
    ],
    "S": [
      [ ,1,1,1,1,1, ],
      [1,1,1,1,1,1,1],
      [1,1, , , ,1,1],
      [1,1,1,1, , , ],
      [ ,1,1,1,1,1, ],
      [ , , ,1,1,1,1],
      [1,1, , , ,1,1],
      [1,1,1,1,1,1,1],
      [ ,1,1,1,1,1, ]
    ],
    "T": [
      [1,1,1,1,1,1],
      [1,1,1,1,1,1],
      [ , ,1,1, , ],
      [ , ,1,1, , ],
      [ , ,1,1, , ],
      [ , ,1,1, , ],
      [ , ,1,1, , ],
      [ , ,1,1, , ],
      [ , ,1,1, , ]
    ],
    "U": [
      [1,1, , , ,1,1],
      [1,1, , , ,1,1],
      [1,1, , , ,1,1],
      [1,1, , , ,1,1],
      [1,1, , , ,1,1],
      [1,1, , , ,1,1],
      [1,1, , , ,1,1],
      [1,1,1,1,1,1,1],
      [ ,1,1,1,1,1, ]
    ],
    "V": [
      [1,1, , , ,1,1],
      [1,1, , , ,1,1],
      [1,1, , , ,1,1],
      [1,1, , , ,1,1],
      [1,1, , , ,1,1],
      [1,1,1, ,1,1,1],
      [ ,1,1,1,1,1, ],
      [ , ,1,1,1, , ],
      [ , , ,1, , , ]
    ],
    "W": [
      [1,1, , , , ,1,1],
      [1,1, , , , ,1,1],
      [1,1, ,1,1, ,1,1],
      [1,1, ,1,1, ,1,1],
      [1,1, ,1,1, ,1,1],
      [1,1, ,1,1, ,1,1],
      [1,1,1,1,1,1,1,1],
      [1,1,1, , ,1,1,1],
      [1,1, , , , ,1,1]
    ],
    "X": [
      [1,1, , , , ,1,1],
      [1,1,1, , ,1,1,1],
      [ ,1,1,1,1,1,1, ],
      [ , ,1,1,1,1, , ],
      [ , , ,1,1, , , ],
      [ , ,1,1,1,1, , ],
      [ ,1,1,1,1,1,1, ],
      [1,1,1, , ,1,1,1],
      [1,1, , , , ,1,1]
    ],
    "Y": [
      [1,1, , , , ,1,1],
      [1,1, , , , ,1,1],
      [1,1, , , , ,1,1],
      [1,1,1, , ,1,1,1],
      [ ,1,1,1,1,1,1, ],
      [ , ,1,1,1,1, , ],
      [ , , ,1,1, , , ],
      [ , , ,1,1, , , ],
      [ , , ,1,1, , , ]
    ],
    "Z": [
      [1,1,1,1,1,1,1],
      [1,1,1,1,1,1,1],
      [ , , , ,1,1,1],
      [ , , ,1,1,1, ],
      [ , ,1,1,1, , ],
      [ ,1,1,1, , , ],
      [1,1,1, , , , ],
      [1,1,1,1,1,1,1],
      [1,1,1,1,1,1,1]
    ],
    "0": [
      [ ,1,1,1,1,1, ],
      [1,1,1,1,1,1,1],
      [1,1, , , ,1,1],
      [1,1, , , ,1,1],
      [1,1, , , ,1,1],
      [1,1, , , ,1,1],
      [1,1, , , ,1,1],
      [1,1,1,1,1,1,1],
      [ ,1,1,1,1,1, ]
    ],
    "1": [
      [ , ,1,1,1, , ],
      [ ,1,1,1,1, , ],
      [1,1,1,1,1, , ],
      [ , ,1,1,1, , ],
      [ , ,1,1,1, , ],
      [ , ,1,1,1, , ],
      [ , ,1,1,1, , ],
      [1,1,1,1,1,1,1],
      [1,1,1,1,1,1,1]
    ],
    "2": [
      [ ,1,1,1,1,1, ],
      [1,1,1,1,1,1,1],
      [1,1, , ,1,1,1],
      [ , , , ,1,1,1],
      [ , , ,1,1,1, ],
      [ , ,1,1,1, , ],
      [ ,1,1,1, , , ],
      [1,1,1,1,1,1,1],
      [1,1,1,1,1,1,1]
    ],
    "3": [
      [ ,1,1,1,1,1, ],
      [1,1,1,1,1,1,1],
      [1,1, , , ,1,1],
      [ , , , , ,1,1],
      [ , , , ,1,1, ],
      [ , , , , ,1,1],
      [1,1, , , ,1,1],
      [1,1,1,1,1,1,1],
      [ ,1,1,1,1,1, ]
    ],
    "4": [
      [ , , , ,1,1,1],
      [ , , ,1,1,1,1],
      [ , ,1,1, ,1,1],
      [ ,1,1, , ,1,1],
      [1,1, , , ,1,1],
      [1,1,1,1,1,1,1],
      [1,1,1,1,1,1,1],
      [ , , , , ,1,1],
      [ , , , , ,1,1]
    ],
    "5": [
      [1,1,1,1,1,1,1],
      [1,1,1,1,1,1,1],
      [1,1, , , , , ],
      [1,1, , , , , ],
      [1,1,1,1,1,1, ],
      [1,1,1,1,1,1,1],
      [ , , , , ,1,1],
      [1,1,1,1,1,1,1],
      [1,1,1,1,1,1, ]
    ],
    "6": [
      [ ,1,1,1,1,1, ],
      [1,1,1,1,1,1,1],
      [1,1, , , ,1,1],
      [1,1, , , , , ],
      [1,1,1,1,1,1, ],
      [1,1,1,1,1,1,1],
      [1,1, , , ,1,1],
      [1,1,1,1,1,1,1],
      [ ,1,1,1,1,1, ]
    ],
    "7": [
      [1,1,1,1,1,1,1],
      [1,1,1,1,1,1,1],
      [ , , , , ,1,1],
      [ , , , ,1,1, ],
      [ , , ,1,1, , ],
      [ , ,1,1, , , ],
      [ , ,1,1, , , ],
      [ , ,1,1, , , ],
      [ , ,1,1, , , ]
    ],
    "8": [
      [ ,1,1,1,1,1, ],
      [1,1,1,1,1,1,1],
      [1,1, , , ,1,1],
      [1,1,1,1,1,1,1],
      [ ,1,1,1,1,1, ],
      [1,1, , , ,1,1],
      [1,1, , , ,1,1],
      [1,1,1,1,1,1,1],
      [ ,1,1,1,1,1, ]
    ],
    "9": [
      [ ,1,1,1,1,1, ],
      [1,1,1,1,1,1,1],
      [1,1, , , ,1,1],
      [1,1, , , ,1,1],
      [1,1,1,1,1,1,1],
      [ ,1,1,1,1,1,1],
      [ , , , , ,1,1],
      [1,1,1,1,1,1,1],
      [1,1,1,1,1,1, ]
    ],
    "+": [
      [ , , , , , ],
      [ , ,1,1, , ],
      [ , ,1,1, , ],
      [1,1,1,1,1,1],
      [1,1,1,1,1,1],
      [ , ,1,1, , ],
      [ , ,1,1, , ],
      [ , , , , , ],
      [ , , , , , ]
    ],
    "-": [
      [ , , , , , ],
      [ , , , , , ],
      [ , , , , , ],
      [1,1,1,1,1,1],
      [1,1,1,1,1,1],
      [ , , , , , ],
      [ , , , , , ],
      [ , , , , , ],
      [ , , , , , ]
    ],
    "_": [
      [ , , , , , ],
      [ , , , , , ],
      [ , , , , , ],
      [ , , , , , ],
      [ , , , , , ],
      [ , , , , , ],
      [ , , , , , ],
      [1,1,1,1,1,1],
      [1,1,1,1,1,1]
    ],
    "(": [
      [ ,1,1],
      [1,1,1],
      [1,1, ],
      [1,1, ],
      [1,1, ],
      [1,1, ],
      [1,1, ],
      [1,1,1],
      [ ,1,1]
    ],
    ")": [
      [1,1, ],
      [1,1,1],
      [ ,1,1],
      [ ,1,1],
      [ ,1,1],
      [ ,1,1],
      [ ,1,1],
      [1,1,1],
      [1,1, ]
    ],
    "{": [
      [ , ,1,1],
      [ ,1,1,1],
      [ ,1,1, ],
      [ ,1,1, ],
      [1,1, , ],
      [ ,1,1, ],
      [ ,1,1, ],
      [ ,1,1,1],
      [ , ,1,1]
    ],
    "}": [
      [1,1, , ],
      [1,1,1, ],
      [ ,1,1, ],
      [ ,1,1, ],
      [ , ,1,1],
      [ ,1,1, ],
      [ ,1,1, ],
      [1,1,1, ],
      [1,1, , ]
    ],
    "[": [
      [1,1,1],
      [1,1,1],
      [1,1, ],
      [1,1, ],
      [1,1, ],
      [1,1, ],
      [1,1, ],
      [1,1,1],
      [1,1,1]
    ],
    "]": [
      [1,1,1],
      [1,1,1],
      [ ,1,1],
      [ ,1,1],
      [ ,1,1],
      [ ,1,1],
      [ ,1,1],
      [1,1,1],
      [1,1,1]
    ],
    "=": [
      [ , , , , , ],
      [ , , , , , ],
      [1,1,1,1,1,1],
      [1,1,1,1,1,1],
      [ , , , , , ],
      [1,1,1,1,1,1],
      [1,1,1,1,1,1],
      [ , , , , , ],
      [ , , , , , ]
    ],
    "/": [
      [ , , , ,1,1],
      [ , , ,1,1,1],
      [ , , ,1,1, ],
      [ , ,1,1,1, ],
      [ , ,1,1, , ],
      [ ,1,1,1, , ],
      [ ,1,1, , , ],
      [1,1,1, , , ],
      [1,1, , , , ]
    ],
    "\\": [
      [1,1, , , , ],
      [1,1,1, , , ],
      [ ,1,1, , , ],
      [ ,1,1,1, , ],
      [ , ,1,1, , ],
      [ , ,1,1,1, ],
      [ , , ,1,1, ],
      [ , , ,1,1,1],
      [ , , , ,1,1]
    ],
    "%": [
      [1,1, , ,1,1],
      [1,1, ,1,1,1],
      [ , , ,1,1, ],
      [ , ,1,1,1, ],
      [ , ,1,1, , ],
      [ ,1,1,1, , ],
      [ ,1,1, , , ],
      [1,1,1, ,1,1],
      [1,1, , ,1,1]
    ],
    "*": [
      [1, ,1, ,1],
      [ ,1,1,1, ],
      [1,1,1,1,1],
      [ ,1,1,1, ],
      [1, ,1, ,1],
      [ , , , , ],
      [ , , , , ],
      [ , , , , ],
      [ , , , , ]
    ],
    ":": [
      [ , ],
      [ , ],
      [1,1],
      [1,1],
      [ , ],
      [1,1],
      [1,1],
      [ , ],
      [ , ]
    ],
    ",": [
      [ , ],
      [ , ],
      [ , ],
      [ , ],
      [ , ],
      [ , ],
      [1,1],
      [1,1],
      [ ,1]
    ],
    ".": [
      [ , ],
      [ , ],
      [ , ],
      [ , ],
      [ , ],
      [ , ],
      [ , ],
      [1,1],
      [1,1]
    ],
    ",": [
      [ , ],
      [ , ],
      [ , ],
      [1,1],
      [1,1],
      [ , ],
      [1,1],
      [1,1],
      [ ,1]
    ],
    "!": [
      [1,1],
      [1,1],
      [1,1],
      [1,1],
      [1,1],
      [1,1],
      [ , ],
      [1,1],
      [1,1]
    ],
    "¡": [
      [1,1],
      [1,1],
      [ , ],
      [1,1],
      [1,1],
      [1,1],
      [1,1],
      [1,1],
      [1,1]
    ],
    "?": [
      [ ,1,1,1,1, ],
      [1,1, , ,1,1],
      [1,1, , ,1,1],
      [ , , , ,1,1],
      [ , ,1,1,1,1],
      [ , ,1,1, , ],
      [ , , , , , ],
      [ , ,1,1, , ],
      [ , ,1,1, , ]
    ],
    "¿": [
      [ , ,1,1, , ],
      [ , ,1,1, , ],
      [ , , , , , ],
      [ , ,1,1, , ],
      [1,1,1,1, , ],
      [1,1, , , , ],
      [1,1, , ,1,1],
      [1,1, , ,1,1],
      [ ,1,1,1,1, ]
    ],
    "\"": [
      [1,1, ,1,1],
      [1,1, ,1,1],
      [1,1, ,1,1],
      [ , , , , ],
      [ , , , , ],
      [ , , , , ],
      [ , , , , ],
      [ , , , , ],
      [ , , , , ]
    ],
    "<": [
      [ , , , ,1,1],
      [ , , ,1,1,1],
      [ , ,1,1,1, ],
      [ ,1,1,1, , ],
      [1,1,1, , , ],
      [ ,1,1,1, , ],
      [ , ,1,1,1, ],
      [ , , ,1,1,1],
      [ , , , ,1,1]
    ],
    ">": [
      [1,1, , , , ],
      [1,1,1, , , ],
      [ ,1,1,1, , ],
      [ , ,1,1,1, ],
      [ , , ,1,1,1],
      [ , ,1,1,1, ],
      [ ,1,1,1, , ],
      [1,1,1, , , ],
      [1,1, , , , ]
    ],
    "'": [
      [1,1],
      [1,1],
      [1,1],
      [ , ],
      [ , ],
      [ , ],
      [ , ],
      [ , ],
      [ , ]
    ],
    "°": [
      [ ,1,1,1, ],
      [1,1, ,1,1],
      [1, , , ,1],
      [1,1, ,1,1],
      [ ,1,1,1, ],
      [ , , , , ],
      [ , , , , ],
      [ , , , , ],
      [ , , , , ]
    ],
    "|": [
      [1,1],
      [1,1],
      [1,1],
      [1,1],
      [1,1],
      [1,1],
      [1,1],
      [1,1],
      [1,1]
    ],
    "♥": [
      [ , , , , , , ],
      [ ,1,1, ,1,1, ],
      [1,1,1,1,1,1,1],
      [1,1,1,1,1,1,1],
      [ ,1,1,1,1,1, ],
      [ , ,1,1,1, , ],
      [ , , ,1, , , ],
      [ , , , , , , ],
      [ , , , , , , ]
    ],
    "#": [
      [ , ,1,1, ,1,1, , ],
      [ , ,1,1, ,1,1, , ],
      [1,1,1,1,1,1,1,1,1],
      [1,1,1,1,1,1,1,1,1],
      [ , ,1,1, ,1,1, , ],
      [1,1,1,1,1,1,1,1,1],
      [1,1,1,1,1,1,1,1,1],
      [ , ,1,1, ,1,1, , ],
      [ , ,1,1, ,1,1, , ]
    ],
    "^": [
      [ , ,1, , ],
      [ ,1,1,1, ],
      [1,1, ,1,1],
      [1, , , ,1],
      [ , , , , ],
      [ , , , , ],
      [ , , , , ],
      [ , , , , ],
      [ , , , , ]
    ],
    " ": [
        [ , , ],
        [ , , ],
        [ , , ],
        [ , , ],
        [ , , ],
        [ , , ],
        [ , , ],
        [ , , ],
        [ , , ]
    ],
    "@": [
        [],
        [],
        [],
        [],
        [],
        [],
        [],
        [],
        []
    ]
  },
  "bigger11x7": {
    "Name": "Bigger 11px",
    "Height": 11,
    "A": [
      [ ,1,1,1,1,1, ],
      [1,1,1,1,1,1,1],
      [1,1, , , ,1,1],
      [1,1, , , ,1,1],
      [1,1, , , ,1,1],
      [1,1, , , ,1,1],
      [1,1, , , ,1,1],
      [1,1,1,1,1,1,1],
      [1,1,1,1,1,1,1],
      [1,1, , , ,1,1],
      [1,1, , , ,1,1]
    ],
    "B": [
      [1,1,1,1,1,1, ],
      [1,1,1,1,1,1,1],
      [1,1, , , ,1,1],
      [1,1, , , ,1,1],
      [1,1,1,1,1,1, ],
      [1,1,1,1,1,1,1],
      [1,1, , , ,1,1],
      [1,1, , , ,1,1],
      [1,1, , , ,1,1],
      [1,1,1,1,1,1,1],
      [1,1,1,1,1,1, ]
    ],
    "C": [
      [ ,1,1,1,1,1, ],
      [1,1,1,1,1,1,1],
      [1,1, , , , , ],
      [1,1, , , , , ],
      [1,1, , , , , ],
      [1,1, , , , , ],
      [1,1, , , , , ],
      [1,1, , , , , ],
      [1,1, , , , , ],
      [1,1,1,1,1,1,1],
      [ ,1,1,1,1,1, ]
    ],
    "D": [
      [1,1,1,1,1,1, ],
      [1,1,1,1,1,1,1],
      [1,1, , , ,1,1],
      [1,1, , , ,1,1],
      [1,1, , , ,1,1],
      [1,1, , , ,1,1],
      [1,1, , , ,1,1],
      [1,1, , , ,1,1],
      [1,1, , , ,1,1],
      [1,1,1,1,1,1,1],
      [1,1,1,1,1,1, ]
    ],
    "E": [
      [1,1,1,1,1,1,1],
      [1,1,1,1,1,1,1],
      [1,1, , , , , ],
      [1,1, , , , , ],
      [1,1,1,1,1, , ],
      [1,1,1,1,1, , ],
      [1,1, , , , , ],
      [1,1, , , , , ],
      [1,1, , , , , ],
      [1,1,1,1,1,1,1],
      [1,1,1,1,1,1,1]
    ],
    "F": [
      [1,1,1,1,1,1,1],
      [1,1,1,1,1,1,1],
      [1,1, , , , , ],
      [1,1, , , , , ],
      [1,1,1,1,1, , ],
      [1,1,1,1,1, , ],
      [1,1, , , , , ],
      [1,1, , , , , ],
      [1,1, , , , , ],
      [1,1, , , , , ],
      [1,1, , , , , ]
    ],
    "G": [
      [ ,1,1,1,1,1, ],
      [1,1,1,1,1,1,1],
      [1,1, , , , , ],
      [1,1, , , , , ],
      [1,1, , ,1,1,1],
      [1,1, , ,1,1,1],
      [1,1, , , ,1,1],
      [1,1, , , ,1,1],
      [1,1, , , ,1,1],
      [1,1,1,1,1,1,1],
      [ ,1,1,1,1,1,1]
    ],
    "H": [
      [1,1, , , ,1,1],
      [1,1, , , ,1,1],
      [1,1, , , ,1,1],
      [1,1, , , ,1,1],
      [1,1,1,1,1,1,1],
      [1,1,1,1,1,1,1],
      [1,1, , , ,1,1],
      [1,1, , , ,1,1],
      [1,1, , , ,1,1],
      [1,1, , , ,1,1],
      [1,1, , , ,1,1]
    ],
    "I": [
      [1,1],
      [1,1],
      [1,1],
      [1,1],
      [1,1],
      [1,1],
      [1,1],
      [1,1],
      [1,1],
      [1,1],
      [1,1]
    ],
    "J": [
      [ , , ,1,1],
      [ , , ,1,1],
      [ , , ,1,1],
      [ , , ,1,1],
      [ , , ,1,1],
      [ , , ,1,1],
      [ , , ,1,1],
      [ , , ,1,1],
      [ , , ,1,1],
      [1,1,1,1,1],
      [1,1,1,1, ]
    ],
    "K": [
      [1,1, , , ,1,1],
      [1,1, , ,1,1,1],
      [1,1, ,1,1,1, ],
      [1,1,1,1,1, , ],
      [1,1,1,1, , , ],
      [1,1,1, , , , ],
      [1,1,1,1, , , ],
      [1,1,1,1,1, , ],
      [1,1, ,1,1,1, ],
      [1,1, , ,1,1,1],
      [1,1, , , ,1,1]
    ],
    "L": [
      [1,1, , , , ],
      [1,1, , , , ],
      [1,1, , , , ],
      [1,1, , , , ],
      [1,1, , , , ],
      [1,1, , , , ],
      [1,1, , , , ],
      [1,1, , , , ],
      [1,1, , , , ],
      [1,1,1,1,1,1],
      [1,1,1,1,1,1]
    ],
    "M": [
      [1, , , , , , , ,1],
      [1,1, , , , , ,1,1],
      [1,1,1, , , ,1,1,1],
      [1,1,1,1, ,1,1,1,1],
      [1,1,1,1,1,1,1,1,1],
      [1,1,1,1,1,1,1,1,1],
      [1,1, ,1,1,1, ,1,1],
      [1,1, , ,1, , ,1,1],
      [1,1, , , , , ,1,1],
      [1,1, , , , , ,1,1],
      [1,1, , , , , ,1,1]
    ],
    "N": [
      [1,1, , , ,1,1],
      [1,1, , , ,1,1],
      [1,1,1, , ,1,1],
      [1,1,1, , ,1,1],
      [1,1,1,1, ,1,1],
      [1,1,1,1, ,1,1],
      [1,1, ,1,1,1,1],
      [1,1, ,1,1,1,1],
      [1,1, , ,1,1,1],
      [1,1, , ,1,1,1],
      [1,1, , , ,1,1]
    ],
    "Ñ": [
      [1,1,1,1,1,1,1],
      [1,1,1,1,1,1,1],
      [ , , , , , , ],
      [1,1, , , ,1,1],
      [1,1,1, , ,1,1],
      [1,1,1, , ,1,1],
      [1,1,1,1, ,1,1],
      [1,1,1,1,1,1,1],
      [1,1, ,1,1,1,1],
      [1,1, , ,1,1,1],
      [1,1, , , ,1,1]
    ],
    "O": [
      [ ,1,1,1,1,1, ],
      [1,1,1,1,1,1,1],
      [1,1, , , ,1,1],
      [1,1, , , ,1,1],
      [1,1, , , ,1,1],
      [1,1, , , ,1,1],
      [1,1, , , ,1,1],
      [1,1, , , ,1,1],
      [1,1, , , ,1,1],
      [1,1,1,1,1,1,1],
      [ ,1,1,1,1,1, ]
    ],
    "P": [
      [1,1,1,1,1,1, ],
      [1,1,1,1,1,1,1],
      [1,1, , , ,1,1],
      [1,1, , , ,1,1],
      [1,1, , , ,1,1],
      [1,1,1,1,1,1,1],
      [1,1,1,1,1,1, ],
      [1,1, , , , , ],
      [1,1, , , , , ],
      [1,1, , , , , ],
      [1,1, , , , , ]
    ],
    "Q": [
      [ ,1,1,1,1,1, ],
      [1,1,1,1,1,1,1],
      [1,1, , , ,1,1],
      [1,1, , , ,1,1],
      [1,1, , , ,1,1],
      [1,1, , , ,1,1],
      [1,1, , , ,1,1],
      [1,1, ,1,1,1,1],
      [1,1,1,1,1,1,1],
      [ ,1,1,1,1,1, ],
      [ , , , ,1,1,1]
    ],
    "R": [
      [1,1,1,1,1,1, ],
      [1,1,1,1,1,1,1],
      [1,1, , , ,1,1],
      [1,1, , , ,1,1],
      [1,1, , , ,1,1],
      [1,1,1,1,1,1, ],
      [1,1,1,1,1,1,1],
      [1,1, , , ,1,1],
      [1,1, , , ,1,1],
      [1,1, , , ,1,1],
      [1,1, , , ,1,1]
    ],
    "S": [
      [ ,1,1,1,1,1, ],
      [1,1,1,1,1,1,1],
      [1,1, , , , , ],
      [1,1, , , , , ],
      [1,1,1,1,1,1, ],
      [ ,1,1,1,1,1,1],
      [ , , , , ,1,1],
      [ , , , , ,1,1],
      [ , , , , ,1,1],
      [1,1,1,1,1,1,1],
      [ ,1,1,1,1,1, ]
    ],
    "T": [
      [1,1,1,1,1,1],
      [1,1,1,1,1,1],
      [ , ,1,1, , ],
      [ , ,1,1, , ],
      [ , ,1,1, , ],
      [ , ,1,1, , ],
      [ , ,1,1, , ],
      [ , ,1,1, , ],
      [ , ,1,1, , ],
      [ , ,1,1, , ],
      [ , ,1,1, , ]
    ],
    "U": [
      [1,1, , , ,1,1],
      [1,1, , , ,1,1],
      [1,1, , , ,1,1],
      [1,1, , , ,1,1],
      [1,1, , , ,1,1],
      [1,1, , , ,1,1],
      [1,1, , , ,1,1],
      [1,1, , , ,1,1],
      [1,1, , , ,1,1],
      [1,1,1,1,1,1,1],
      [ ,1,1,1,1,1, ]
    ],
    "V": [
      [1,1, , , ,1,1],
      [1,1, , , ,1,1],
      [1,1, , , ,1,1],
      [1,1, , , ,1,1],
      [1,1, , , ,1,1],
      [1,1, , , ,1,1],
      [1,1,1, ,1,1,1],
      [ ,1,1, ,1,1, ],
      [ ,1,1,1,1,1, ],
      [ , ,1,1,1, , ],
      [ , , ,1, , , ]
    ],
    "W": [
      [1,1, , , , , , ,1,1],
      [1,1, , , , , , ,1,1],
      [1,1, , , , , , ,1,1],
      [1,1, , , , , , ,1,1],
      [1,1,1, ,1,1, ,1,1,1],
      [ ,1,1, ,1,1, ,1,1, ],
      [ ,1,1,1,1,1,1,1,1, ],
      [ ,1,1,1,1,1,1,1,1, ],
      [ , ,1,1, , ,1,1, , ],
      [ , ,1,1, , ,1,1, , ],
      [ , ,1,1, , ,1,1, , ]
    ],
    "X": [
      [1,1, , , ,1,1],
      [1,1, , , ,1,1],
      [1,1, , , ,1,1],
      [ ,1,1, ,1,1, ],
      [ ,1,1,1,1,1, ],
      [ , ,1,1,1, , ],
      [ ,1,1,1,1,1, ],
      [ ,1,1, ,1,1, ],
      [1,1, , , ,1,1],
      [1,1, , , ,1,1],
      [1,1, , , ,1,1]
    ],
    "Y": [
      [1,1, , , , ,1,1],
      [1,1, , , , ,1,1],
      [1,1,1, , ,1,1,1],
      [ ,1,1, , ,1,1, ],
      [ ,1,1,1,1,1,1, ],
      [ , ,1,1,1,1, , ],
      [ , ,1,1,1,1, , ],
      [ , , ,1,1, , , ],
      [ , , ,1,1, , , ],
      [ , , ,1,1, , , ],
      [ , , ,1,1, , , ]
    ],
    "Z": [
      [1,1,1,1,1,1,1],
      [1,1,1,1,1,1,1],
      [ , , , , ,1,1],
      [ , , , ,1,1,1],
      [ , , ,1,1,1, ],
      [ , ,1,1,1, , ],
      [ ,1,1,1, , , ],
      [1,1,1, , , , ],
      [1,1, , , , , ],
      [1,1,1,1,1,1,1],
      [1,1,1,1,1,1,1]
    ],
    "0": [
      [ ,1,1,1,1,1, ],
      [1,1,1,1,1,1,1],
      [1,1, , , ,1,1],
      [1,1, , , ,1,1],
      [1,1, , , ,1,1],
      [1,1, , , ,1,1],
      [1,1, , , ,1,1],
      [1,1, , , ,1,1],
      [1,1, , , ,1,1],
      [1,1,1,1,1,1,1],
      [ ,1,1,1,1,1, ]
    ],
    "1": [
      [ , ,1,1],
      [ ,1,1,1],
      [1,1,1,1],
      [1,1,1,1],
      [ , ,1,1],
      [ , ,1,1],
      [ , ,1,1],
      [ , ,1,1],
      [ , ,1,1],
      [ , ,1,1],
      [ , ,1,1]
    ],
    "2": [
      [ ,1,1,1,1,1, ],
      [1,1,1,1,1,1,1],
      [1,1, , , ,1,1],
      [ , , , , ,1,1],
      [ , , , ,1,1,1],
      [ , , ,1,1,1, ],
      [ , ,1,1,1, , ],
      [ ,1,1,1, , , ],
      [1,1,1, , , , ],
      [1,1,1,1,1,1,1],
      [1,1,1,1,1,1,1]
    ],
    "3": [
      [ ,1,1,1,1,1, ],
      [1,1,1,1,1,1,1],
      [1,1, , , ,1,1],
      [ , , , , ,1,1],
      [ , ,1,1,1,1, ],
      [ , ,1,1,1,1, ],
      [ , , , , ,1,1],
      [ , , , , ,1,1],
      [1,1, , , ,1,1],
      [1,1,1,1,1,1,1],
      [ ,1,1,1,1,1, ]
    ],
    "4": [
      [ , , , ,1,1,1, ],
      [ , , ,1,1,1,1, ],
      [ , ,1,1,1,1,1, ],
      [ ,1,1, , ,1,1, ],
      [1,1,1, , ,1,1, ],
      [1,1, , , ,1,1, ],
      [1,1,1,1,1,1,1,1],
      [1,1,1,1,1,1,1,1],
      [ , , , , ,1,1, ],
      [ , , , , ,1,1, ],
      [ , , , , ,1,1, ]
    ],
    "5": [
      [1,1,1,1,1,1, ],
      [1,1,1,1,1,1, ],
      [1,1, , , , , ],
      [1,1, , , , , ],
      [1,1,1,1,1,1, ],
      [1,1,1,1,1,1,1],
      [ , , , , ,1,1],
      [ , , , , ,1,1],
      [1,1, , , ,1,1],
      [1,1,1,1,1,1,1],
      [ ,1,1,1,1,1, ]
    ],
    "6": [
      [ ,1,1,1,1,1, ],
      [1,1,1,1,1,1,1],
      [1,1, , , , , ],
      [1,1,1,1,1,1, ],
      [1,1,1,1,1,1,1],
      [1,1, , , ,1,1],
      [1,1, , , ,1,1],
      [1,1, , , ,1,1],
      [1,1, , , ,1,1],
      [1,1,1,1,1,1,1],
      [ ,1,1,1,1,1, ]
    ],
    "7": [
      [1,1,1,1,1,1,1],
      [1,1,1,1,1,1,1],
      [ , , , ,1,1, ],
      [ , , , ,1,1, ],
      [ , , ,1,1, , ],
      [ , , ,1,1, , ],
      [ , ,1,1, , , ],
      [ , ,1,1, , , ],
      [ , ,1,1, , , ],
      [ , ,1,1, , , ],
      [ , ,1,1, , , ]
    ],
    "8": [
      [ ,1,1,1,1,1, ],
      [1,1,1,1,1,1,1],
      [1,1, , , ,1,1],
      [1,1, , , ,1,1],
      [ ,1,1,1,1,1, ],
      [ ,1,1,1,1,1, ],
      [1,1, , , ,1,1],
      [1,1, , , ,1,1],
      [1,1, , , ,1,1],
      [1,1,1,1,1,1,1],
      [ ,1,1,1,1,1, ]
    ],
    "9": [
      [ ,1,1,1,1,1, ],
      [1,1,1,1,1,1,1],
      [1,1, , , ,1,1],
      [1,1, , , ,1,1],
      [1,1, , , ,1,1],
      [1,1,1,1,1,1,1],
      [ ,1,1,1,1,1,1],
      [ , , , , ,1,1],
      [1,1, , , ,1,1],
      [1,1,1,1,1,1,1],
      [ ,1,1,1,1,1, ]
    ],
    "+": [
      [ , , , , , ],
      [ , , , , , ],
      [ , ,1,1, , ],
      [ , ,1,1, , ],
      [1,1,1,1,1,1],
      [1,1,1,1,1,1],
      [ , ,1,1, , ],
      [ , ,1,1, , ],
      [ , , , , , ],
      [ , , , , , ],
      [ , , , , , ]
    ],
    "-": [
      [ , , , , , ],
      [ , , , , , ],
      [ , , , , , ],
      [ , , , , , ],
      [1,1,1,1,1,1],
      [1,1,1,1,1,1],
      [ , , , , , ],
      [ , , , , , ],
      [ , , , , , ],
      [ , , , , , ],
      [ , , , , , ]
    ],
    "_": [
      [ , , , , , ],
      [ , , , , , ],
      [ , , , , , ],
      [ , , , , , ],
      [ , , , , , ],
      [ , , , , , ],
      [ , , , , , ],
      [ , , , , , ],
      [ , , , , , ],
      [1,1,1,1,1,1],
      [1,1,1,1,1,1]
    ],
    "(": [
      [ , ,1,1],
      [ ,1,1, ],
      [1,1, , ],
      [1,1, , ],
      [1,1, , ],
      [1,1, , ],
      [1,1, , ],
      [1,1, , ],
      [1,1, , ],
      [ ,1,1, ],
      [ , ,1,1]
    ],
    ")": [
      [1,1, , ],
      [ ,1,1, ],
      [ , ,1,1],
      [ , ,1,1],
      [ , ,1,1],
      [ , ,1,1],
      [ , ,1,1],
      [ , ,1,1],
      [ , ,1,1],
      [ ,1,1, ],
      [1,1, , ]
    ],
    "{": [
      [ , , ,1,1],
      [ , ,1,1, ],
      [ ,1,1, , ],
      [ ,1,1, , ],
      [ ,1,1, , ],
      [1,1, , , ],
      [ ,1,1, , ],
      [ ,1,1, , ],
      [ ,1,1, , ],
      [ , ,1,1, ],
      [ , , ,1,1]
    ],
    "}": [
      [1,1, , , ],
      [ ,1,1, , ],
      [ , ,1,1, ],
      [ , ,1,1, ],
      [ , ,1,1, ],
      [ , , ,1,1],
      [ , ,1,1, ],
      [ , ,1,1, ],
      [ , ,1,1, ],
      [ ,1,1, , ],
      [1,1, , , ]
    ],
    "[": [
      [ ,1,1],
      [1,1, ],
      [1,1, ],
      [1,1, ],
      [1,1, ],
      [1,1, ],
      [1,1, ],
      [1,1, ],
      [1,1, ],
      [1,1, ],
      [ ,1,1]
    ],
    "]": [
      [1,1, ],
      [ ,1,1],
      [ ,1,1],
      [ ,1,1],
      [ ,1,1],
      [ ,1,1],
      [ ,1,1],
      [ ,1,1],
      [ ,1,1],
      [ ,1,1],
      [1,1, ]
    ],
    "=": [
      [ , , , , , ],
      [ , , , , , ],
      [ , , , , , ],
      [1,1,1,1,1,1],
      [1,1,1,1,1,1],
      [ , , , , , ],
      [1,1,1,1,1,1],
      [1,1,1,1,1,1],
      [ , , , , , ],
      [ , , , , , ],
      [ , , , , , ]
    ],
    "/": [
      [ , , , ,1,1],
      [ , , ,1,1,1],
      [ , , ,1,1, ],
      [ , ,1,1,1, ],
      [ , ,1,1,1, ],
      [ , ,1,1, , ],
      [ ,1,1,1, , ],
      [ ,1,1,1, , ],
      [ ,1,1, , , ],
      [1,1,1, , , ],
      [1,1, , , , ]
    ],
    "\\": [
      [1,1, , , , ],
      [1,1,1, , , ],
      [ ,1,1, , , ],
      [ ,1,1,1, , ],
      [ ,1,1,1, , ],
      [ , ,1,1, , ],
      [ , ,1,1,1, ],
      [ , ,1,1,1, ],
      [ , , ,1,1, ],
      [ , , ,1,1,1],
      [ , , , ,1,1]
    ],
    "%": [
      [1,1, , ,1,1],
      [1,1, ,1,1,1],
      [1,1, ,1,1, ],
      [ , , ,1,1, ],
      [ , ,1,1,1, ],
      [ , ,1,1, , ],
      [ ,1,1,1, , ],
      [ ,1,1, , , ],
      [ ,1,1, ,1,1],
      [1,1,1, ,1,1],
      [1,1, , ,1,1]
    ],
    "*": [
      [1, ,1, ,1],
      [ ,1,1,1, ],
      [1,1,1,1,1],
      [ ,1,1,1, ],
      [1, ,1, ,1],
      [ , , , , ],
      [ , , , , ],
      [ , , , , ],
      [ , , , , ],
      [ , , , , ],
      [ , , , , ]
    ],
    ":": [
      [ , ],
      [ , ],
      [ , ],
      [ , ],
      [1,1],
      [1,1],
      [ , ],
      [1,1],
      [1,1],
      [ , ],
      [ , ]
    ],
    ",": [
      [ , , ],
      [ , , ],
      [ , , ],
      [ , , ],
      [ , , ],
      [ , , ],
      [ , , ],
      [ , , ],
      [ ,1,1],
      [ ,1,1],
      [1,1, ]
    ],
    ".": [
      [ , ],
      [ , ],
      [ , ],
      [ , ],
      [ , ],
      [ , ],
      [ , ],
      [ , ],
      [ , ],
      [1,1],
      [1,1]
    ],
    ";": [
      [ , , ],
      [ , , ],
      [ , , ],
      [ , , ],
      [ , , ],
      [ ,1,1],
      [ ,1,1],
      [ , , ],
      [ ,1,1],
      [ ,1,1],
      [1,1, ]
    ],
    "!": [
      [1,1],
      [1,1],
      [1,1],
      [1,1],
      [1,1],
      [1,1],
      [1,1],
      [1,1],
      [ , ],
      [1,1],
      [1,1]
    ],
    "¡": [
      [1,1],
      [1,1],
      [ , ],
      [1,1],
      [1,1],
      [1,1],
      [1,1],
      [1,1],
      [1,1],
      [1,1],
      [1,1]
    ],
    "?": [
      [ ,1,1,1,1, ],
      [1,1, , ,1,1],
      [ , , , ,1,1],
      [ , , , ,1,1],
      [ , , , ,1,1],
      [ , , ,1,1, ],
      [ , ,1,1, , ],
      [ , ,1,1, , ],
      [ , , , , , ],
      [ , ,1,1, , ],
      [ , ,1,1, , ]
    ],
    "¿": [
      [ , ,1,1, , ],
      [ , ,1,1, , ],
      [ , , , , , ],
      [ , ,1,1, , ],
      [ , ,1,1, , ],
      [ ,1,1, , , ],
      [1,1,1, , , ],
      [1,1, , , , ],
      [1,1, , , , ],
      [1,1, , ,1,1],
      [ ,1,1,1,1, ]
    ],
    "\"": [
      [1,1, ,1,1, ],
      [ ,1,1, ,1,1],
      [ ,1,1, ,1,1],
      [ , , , , , ],
      [ , , , , , ],
      [ , , , , , ],
      [ , , , , , ],
      [ , , , , , ],
      [ , , , , , ],
      [ , , , , , ],
      [ , , , , , ]
    ],
    "<": [
      [ , , , , ,1,1],
      [ , , , ,1,1,1],
      [ , , ,1,1,1, ],
      [ , ,1,1,1, , ],
      [ ,1,1,1, , , ],
      [1,1,1, , , , ],
      [ ,1,1,1, , , ],
      [ , ,1,1,1, , ],
      [ , , ,1,1,1, ],
      [ , , , ,1,1,1],
      [ , , , , ,1,1]
    ],
    ">": [
      [1,1, , , , , ],
      [1,1,1, , , , ],
      [ ,1,1,1, , , ],
      [ , ,1,1,1, , ],
      [ , , ,1,1,1, ],
      [ , , , ,1,1,1],
      [ , , ,1,1,1, ],
      [ , ,1,1,1, , ],
      [ ,1,1,1, , , ],
      [1,1,1, , , , ],
      [1,1, , , , , ]
    ],
    "'": [
      [ ,1,1],
      [ ,1,1],
      [1,1, ],
      [ , , ],
      [ , , ],
      [ , , ],
      [ , , ],
      [ , , ],
      [ , , ],
      [ , , ],
      [ , , ]
    ],
    "°": [
      [ ,1,1,1, ],
      [1,1, ,1,1],
      [1, , , ,1],
      [1,1, ,1,1],
      [ ,1,1,1, ],
      [ , , , , ],
      [ , , , , ],
      [ , , , , ],
      [ , , , , ],
      [ , , , , ],
      [ , , , , ]
    ],
    "|": [
      [1,1],
      [1,1],
      [1,1],
      [1,1],
      [1,1],
      [1,1],
      [1,1],
      [1,1],
      [1,1],
      [1,1],
      [1,1]
    ],
    "♥": [
      [ , , , , , , , , ],
      [ , , , , , , , , ],
      [ ,1,1, , , ,1,1, ],
      [1,1,1,1, ,1,1,1,1],
      [1,1,1,1,1,1,1,1,1],
      [ ,1,1,1,1,1,1,1, ],
      [ , ,1,1,1,1,1, , ],
      [ , , ,1,1,1, , , ],
      [ , , , ,1, , , , ],
      [ , , , , , , , , ],
      [ , , , , , , , , ]
    ],
    "#": [
      [ , , , , , , , , ],
      [ , ,1,1, ,1,1, , ],
      [ , ,1,1, ,1,1, , ],
      [1,1,1,1,1,1,1,1,1],
      [ , ,1,1, ,1,1, , ],
      [ , ,1,1, ,1,1, , ],
      [ , ,1,1, ,1,1, , ],
      [1,1,1,1,1,1,1,1,1],
      [ , ,1,1, ,1,1, , ],
      [ , ,1,1, ,1,1, , ],
      [ , , , , , , , , ]
    ],
    "^": [
      [ , ,1, , ],
      [ ,1,1,1, ],
      [1,1, ,1,1],
      [1, , , ,1],
      [ , , , , ],
      [ , , , , ],
      [ , , , , ],
      [ , , , , ],
      [ , , , , ],
      [ , , , , ],
      [ , , , , ]
    ],
    " ": [
        [ , , ],
        [ , , ],
        [ , , ],
        [ , , ],
        [ , , ],
        [ , , ],
        [ , , ],
        [ , , ],
        [ , , ],
        [ , , ],
        [ , , ]
    ],
    "@": [
        [],
        [],
        [],
        [],
        [],
        [],
        [],
        [],
        [],
        [],
        []
    ]
  },
  "tall10x5": {
    "Name": "Tall 10px",
    "Height": 10,
    "A": [
      [ ,1,1,1, ],
      [ ,1, ,1, ],
      [ ,1, ,1, ],
      [ ,1, ,1, ],
      [ ,1, ,1, ],
      [ ,1,1,1, ],
      [ ,1, ,1, ],
      [ ,1, ,1, ],
      [ ,1, ,1, ],
      [1,1, ,1,1]
    ],
    "B": [
      [1,1,1,1],
      [ ,1, ,1],
      [ ,1, ,1],
      [ ,1, ,1],
      [ ,1,1,1],
      [ ,1, ,1],
      [ ,1, ,1],
      [ ,1, ,1],
      [ ,1, ,1],
      [1,1,1,1]
    ],
    "C": [
      [1,1,1],
      [1, ,1],
      [1, ,1],
      [1, , ],
      [1, , ],
      [1, , ],
      [1, , ],
      [1, ,1],
      [1, ,1],
      [1,1,1]
    ],
    "D": [
      [1,1,1,1],
      [ ,1, ,1],
      [ ,1, ,1],
      [ ,1, ,1],
      [ ,1, ,1],
      [ ,1, ,1],
      [ ,1, ,1],
      [ ,1, ,1],
      [ ,1, ,1],
      [1,1,1,1]
    ],
    "E": [
      [1,1,1,1],
      [ ,1, ,1],
      [ ,1, , ],
      [ ,1, ,1],
      [ ,1,1,1],
      [ ,1, ,1],
      [ ,1, , ],
      [ ,1, , ],
      [ ,1, ,1],
      [1,1,1,1]
    ],
    "F": [
      [1,1,1,1],
      [ ,1, ,1],
      [ ,1, , ],
      [ ,1, ,1],
      [ ,1,1,1],
      [ ,1, ,1],
      [ ,1, , ],
      [ ,1, , ],
      [ ,1, , ],
      [1,1, , ]
    ],
    "G": [
      [1,1,1, ],
      [1, ,1, ],
      [1, ,1, ],
      [1, , , ],
      [1, , , ],
      [1, ,1,1],
      [1, ,1, ],
      [1, ,1, ],
      [1, ,1, ],
      [1,1,1, ]
    ],
    "H": [
      [1,1, ,1,1],
      [ ,1, ,1, ],
      [ ,1, ,1, ],
      [ ,1, ,1, ],
      [ ,1,1,1, ],
      [ ,1, ,1, ],
      [ ,1, ,1, ],
      [ ,1, ,1, ],
      [ ,1, ,1, ],
      [1,1, ,1,1]
    ],
    "I": [
      [1,1,1],
      [ ,1, ],
      [ ,1, ],
      [ ,1, ],
      [ ,1, ],
      [ ,1, ],
      [ ,1, ],
      [ ,1, ],
      [ ,1, ],
      [1,1,1]
    ],
    "J": [
      [ ,1,1,1],
      [ , ,1, ],
      [ , ,1, ],
      [ , ,1, ],
      [ , ,1, ],
      [ , ,1, ],
      [ , ,1, ],
      [1, ,1, ],
      [1, ,1, ],
      [1,1,1, ]
    ],
    "K": [
      [1,1, ,1,1],
      [ ,1, ,1, ],
      [ ,1, ,1, ],
      [ ,1,1,1, ],
      [ ,1, , , ],
      [ ,1,1,1, ],
      [ ,1, ,1, ],
      [ ,1, ,1, ],
      [ ,1, ,1, ],
      [1,1, ,1,1]
    ],
    "L": [
      [1,1,1, ],
      [ ,1, , ],
      [ ,1, , ],
      [ ,1, , ],
      [ ,1, , ],
      [ ,1, , ],
      [ ,1, , ],
      [ ,1, ,1],
      [ ,1, ,1],
      [1,1,1,1]
    ],
    "M": [
      [1,1,1,1,1,1, ],
      [ ,1, ,1, ,1, ],
      [ ,1, ,1, ,1, ],
      [ ,1, ,1, ,1, ],
      [ ,1, ,1, ,1, ],
      [ ,1, ,1, ,1, ],
      [ ,1, ,1, ,1, ],
      [ ,1, ,1, ,1, ],
      [ ,1, ,1, ,1, ],
      [1,1, ,1, ,1,1]
    ],
    "N": [
      [1,1,1,1, ],
      [ ,1, ,1, ],
      [ ,1, ,1, ],
      [ ,1, ,1, ],
      [ ,1, ,1, ],
      [ ,1, ,1, ],
      [ ,1, ,1, ],
      [ ,1, ,1, ],
      [ ,1, ,1, ],
      [1,1, ,1,1]
    ],
    "Ñ": [
      [ ,1,1,1,1],
      [ , , , , ],
      [1,1,1,1, ],
      [ ,1, ,1, ],
      [ ,1, ,1, ],
      [ ,1, ,1, ],
      [ ,1, ,1, ],
      [ ,1, ,1, ],
      [ ,1, ,1, ],
      [1,1, ,1,1]
    ],
    "O": [
      [1,1,1],
      [1, ,1],
      [1, ,1],
      [1, ,1],
      [1, ,1],
      [1, ,1],
      [1, ,1],
      [1, ,1],
      [1, ,1],
      [1,1,1]
    ],
    "P": [
      [1,1,1,1],
      [ ,1, ,1],
      [ ,1, ,1],
      [ ,1, ,1],
      [ ,1, ,1],
      [ ,1, ,1],
      [ ,1,1,1],
      [ ,1, , ],
      [ ,1, , ],
      [1,1,1, ]
    ],
    "Q": [
      [1,1,1, ],
      [1, ,1, ],
      [1, ,1, ],
      [1, ,1, ],
      [1, ,1, ],
      [1, ,1, ],
      [1, ,1, ],
      [1, ,1, ],
      [1, ,1, ],
      [1,1,1,1]
    ],
    "R": [
      [1,1,1,1, ],
      [ ,1, ,1, ],
      [ ,1, ,1, ],
      [ ,1, ,1, ],
      [ ,1,1,1, ],
      [ ,1, , , ],
      [ ,1,1,1, ],
      [ ,1, ,1, ],
      [ ,1, ,1, ],
      [1,1, ,1,1]
    ],
    "S": [
      [1,1,1],
      [1, ,1],
      [1, , ],
      [1, , ],
      [1,1,1],
      [ , ,1],
      [ , ,1],
      [ , ,1],
      [1, ,1],
      [1,1,1]
    ],
    "T": [
      [1,1,1,1,1],
      [1, ,1, ,1],
      [1, ,1, ,1],
      [ , ,1, , ],
      [ , ,1, , ],
      [ , ,1, , ],
      [ , ,1, , ],
      [ , ,1, , ],
      [ , ,1, , ],
      [ ,1,1,1, ]
    ],
    "U": [
      [1,1, ,1, ],
      [ ,1, ,1, ],
      [ ,1, ,1, ],
      [ ,1, ,1, ],
      [ ,1, ,1, ],
      [ ,1, ,1, ],
      [ ,1, ,1, ],
      [ ,1, ,1, ],
      [ ,1, ,1, ],
      [ ,1,1,1,1]
    ],
    "V": [
      [1,1, ,1,1],
      [ ,1, ,1, ],
      [ ,1, ,1, ],
      [ ,1, ,1, ],
      [ ,1, ,1, ],
      [ ,1, ,1, ],
      [ ,1, ,1, ],
      [ ,1, ,1, ],
      [ ,1, ,1, ],
      [ ,1,1,1, ]
    ],
    "W": [
      [1,1, ,1, ,1,1],
      [ ,1, ,1, ,1, ],
      [ ,1, ,1, ,1, ],
      [ ,1, ,1, ,1, ],
      [ ,1, ,1, ,1, ],
      [ ,1, ,1, ,1, ],
      [ ,1, ,1, ,1, ],
      [ ,1, ,1, ,1, ],
      [ ,1, ,1, ,1, ],
      [ ,1,1,1,1,1, ]
    ],
    "X": [
      [1,1, ,1,1],
      [ ,1, ,1, ],
      [ ,1, ,1, ],
      [ ,1,1,1, ],
      [ , ,1, , ],
      [ ,1,1,1, ],
      [ ,1, ,1, ],
      [ ,1, ,1, ],
      [ ,1, ,1, ],
      [1,1, ,1,1]
    ],
    "Y": [
      [1,1, ,1,1],
      [ ,1, ,1, ],
      [ ,1, ,1, ],
      [ ,1, ,1, ],
      [ ,1,1,1, ],
      [ , ,1, , ],
      [ , ,1, , ],
      [ , ,1, , ],
      [ , ,1, , ],
      [ ,1,1,1, ]
    ],
    "Z": [
      [1,1,1],
      [ , ,1],
      [ , ,1],
      [ , ,1],
      [1,1,1],
      [1, , ],
      [1, , ],
      [1, , ],
      [1, , ],
      [1,1,1]
    ],
    "0": [
      [1,1,1],
      [1, ,1],
      [1, ,1],
      [1, ,1],
      [1, ,1],
      [1, ,1],
      [1, ,1],
      [1, ,1],
      [1, ,1],
      [1,1,1]
    ],
    "1": [
      [1,1, ],
      [ ,1, ],
      [ ,1, ],
      [ ,1, ],
      [ ,1, ],
      [ ,1, ],
      [ ,1, ],
      [ ,1, ],
      [ ,1, ],
      [1,1,1]
    ],
    "2": [
      [1,1,1],
      [1, ,1],
      [ , ,1],
      [ , ,1],
      [ , ,1],
      [1,1,1],
      [1, , ],
      [1, , ],
      [1, ,1],
      [1,1,1]
    ],
    "3": [
      [1,1,1],
      [1, ,1],
      [ , ,1],
      [ , ,1],
      [ ,1,1],
      [ , ,1],
      [ , ,1],
      [ , ,1],
      [1, ,1],
      [1,1,1]
    ],
    "4": [
      [1, ,1, ],
      [1, ,1, ],
      [1, ,1, ],
      [1, ,1, ],
      [1, ,1, ],
      [1, ,1, ],
      [1,1,1, ],
      [ , ,1, ],
      [ , ,1, ],
      [ ,1,1,1]
    ],
    "5": [
      [1,1,1],
      [1, , ],
      [1, , ],
      [1, , ],
      [1,1,1],
      [ , ,1],
      [ , ,1],
      [ , ,1],
      [1, ,1],
      [1,1,1]
    ],
    "6": [
      [1,1,1],
      [1, ,1],
      [1, , ],
      [1, , ],
      [1,1,1],
      [1, ,1],
      [1, ,1],
      [1, ,1],
      [1, ,1],
      [1,1,1]
    ],
    "7": [
      [1,1,1,1],
      [1, , ,1],
      [ , , ,1],
      [ , , ,1],
      [ ,1,1,1],
      [ ,1, , ],
      [ ,1, , ],
      [ ,1, , ],
      [ ,1, , ],
      [ ,1, , ]
    ],
    "8": [
      [1,1,1],
      [1, ,1],
      [1, ,1],
      [1, ,1],
      [1,1,1],
      [1, ,1],
      [1, ,1],
      [1, ,1],
      [1, ,1],
      [1,1,1]
    ],
    "9": [
      [1,1,1],
      [1, ,1],
      [1, ,1],
      [1, ,1],
      [1, ,1],
      [1, ,1],
      [1,1,1],
      [ , ,1],
      [ , ,1],
      [1,1,1]
    ],
    "+": [
      [ , , ],
      [ , , ],
      [ ,1, ],
      [ ,1, ],
      [1,1,1],
      [ ,1, ],
      [ ,1, ],
      [ , , ],
      [ , , ],
      [ , , ]
    ],
    "-": [
      [ , , ],
      [ , , ],
      [ , , ],
      [ , , ],
      [1,1,1],
      [ , , ],
      [ , , ],
      [ , , ],
      [ , , ],
      [ , , ]
    ],
    "_": [
      [ , , ],
      [ , , ],
      [ , , ],
      [ , , ],
      [ , , ],
      [ , , ],
      [ , , ],
      [ , , ],
      [ , , ],
      [1,1,1]
    ],
    "(": [
      [ ,1],
      [1,1],
      [1, ],
      [1, ],
      [1, ],
      [1, ],
      [1, ],
      [1, ],
      [1,1],
      [ ,1]
    ],
    ")": [
      [1, ],
      [1,1],
      [ ,1],
      [ ,1],
      [ ,1],
      [ ,1],
      [ ,1],
      [ ,1],
      [1,1],
      [1, ]
    ],
    "{": [
      [ ,1,1],
      [ ,1, ],
      [ ,1, ],
      [ ,1, ],
      [1,1, ],
      [ ,1, ],
      [ ,1, ],
      [ ,1, ],
      [ ,1, ],
      [ ,1,1]
    ],
    "}": [
      [1,1, ],
      [ ,1, ],
      [ ,1, ],
      [ ,1, ],
      [ ,1,1],
      [ ,1, ],
      [ ,1, ],
      [ ,1, ],
      [ ,1, ],
      [1,1, ]
    ],
    "[": [
      [1,1],
      [1, ],
      [1, ],
      [1, ],
      [1, ],
      [1, ],
      [1, ],
      [1, ],
      [1, ],
      [1,1]
    ],
    "]": [
      [1,1],
      [ ,1],
      [ ,1],
      [ ,1],
      [ ,1],
      [ ,1],
      [ ,1],
      [ ,1],
      [ ,1],
      [1,1]
    ],
    "=": [
      [ , , ],
      [ , , ],
      [ , , ],
      [1,1,1],
      [ , , ],
      [1,1,1],
      [ , , ],
      [ , , ],
      [ , , ],
      [ , , ]
    ],
    "/": [
      [ , ,1],
      [ , ,1],
      [ , ,1],
      [ ,1,1],
      [ ,1, ],
      [ ,1, ],
      [1,1, ],
      [1, , ],
      [1, , ],
      [1, , ]
    ],
    "\\": [
      [1, , ],
      [1, , ],
      [1, , ],
      [1,1, ],
      [ ,1, ],
      [ ,1, ],
      [ ,1,1],
      [ , ,1],
      [ , ,1],
      [ , ,1]
    ],
    "%": [
      [1,1,1,1,1],
      [1, ,1, ,1],
      [1,1,1, ,1],
      [ , , , ,1],
      [ , ,1,1,1],
      [1,1,1, , ],
      [1, , , , ],
      [1, ,1,1,1],
      [1, ,1, ,1],
      [1,1,1,1,1]
    ],
    "*": [
      [1,1, ,1,1],
      [ ,1, ,1, ],
      [ ,1,1,1, ],
      [ ,1, ,1, ],
      [1,1, ,1,1],
      [ , , , , ],
      [ , , , , ],
      [ , , , , ],
      [ , , , , ],
      [ , , , , ]
    ],
    ":": [
      [ ],
      [ ],
      [1],
      [ ],
      [ ],
      [ ],
      [ ],
      [1],
      [ ],
      [ ]
    ],
    ".": [
      [ ],
      [ ],
      [ ],
      [ ],
      [ ],
      [ ],
      [ ],
      [ ],
      [1],
      [ ]
    ],
    ",": [
      [ , ],
      [ , ],
      [ , ],
      [ , ],
      [ , ],
      [ , ],
      [ , ],
      [1,1],
      [ ,1],
      [ ,1]
    ],
    "!": [
      [1],
      [1],
      [1],
      [1],
      [1],
      [1],
      [1],
      [ ],
      [1],
      [ ]
    ],
    "¡": [
      [ ],
      [1],
      [ ],
      [1],
      [1],
      [1],
      [1],
      [1],
      [1],
      [1]
    ],
    "?": [
      [1,1,1],
      [1, ,1],
      [ , ,1],
      [ , ,1],
      [ ,1,1],
      [ ,1, ],
      [ ,1, ],
      [ , , ],
      [ ,1, ],
      [ , , ]
    ],
    "¿": [
      [ , , ],
      [ ,1, ],
      [ , , ],
      [ ,1, ],
      [ ,1, ],
      [1,1, ],
      [1, , ],
      [1, , ],
      [1, ,1],
      [1,1,1]
    ],
    "\"": [
      [1, ,1],
      [1, ,1],
      [1, ,1],
      [ , , ],
      [ , , ],
      [ , , ],
      [ , , ],
      [ , , ],
      [ , , ],
      [ , , ]
    ],
    "<": [
      [ , ],
      [ , ],
      [1,1],
      [1, ],
      [1, ],
      [1, ],
      [1, ],
      [1,1],
      [ , ],
      [ , ]
    ],
    ">": [
      [ , ],
      [ , ],
      [1,1],
      [ ,1],
      [ ,1],
      [ ,1],
      [ ,1],
      [1,1],
      [ , ],
      [ , ]
    ],
    "'": [
      [1],
      [1],
      [1],
      [ ],
      [ ],
      [ ],
      [ ],
      [ ],
      [ ],
      [ ]
    ],
    "°": [
      [1,1,1],
      [1, ,1],
      [1,1,1],
      [ , , ],
      [ , , ],
      [ , , ],
      [ , , ],
      [ , , ],
      [ , , ],
      [ , , ]
    ],
    "|": [
      [1],
      [1],
      [1],
      [1],
      [1],
      [1],
      [1],
      [1],
      [1],
      [1]
    ],
    "♥": [
      [ , , , , , , ],
      [ ,1,1, ,1,1, ],
      [1,1,1,1,1,1,1],
      [1,1,1,1,1,1,1],
      [1,1,1,1,1,1,1],
      [ ,1,1,1,1,1, ],
      [ , ,1,1,1, , ],
      [ , , ,1, , , ],
      [ , , , , , , ]
    ],
    "#": [
      [ ,1, ,1, ],
      [ ,1, ,1, ],
      [ ,1, ,1, ],
      [1,1,1,1,1],
      [ ,1, ,1, ],
      [ ,1, ,1, ],
      [1,1,1,1,1],
      [ ,1, ,1, ],
      [ ,1, ,1, ],
      [ ,1, ,1, ]
    ],
    "^": [
      [ ,1, ],
      [1, ,1],
      [1, ,1],
      [ , , ],
      [ , , ],
      [ , , ],
      [ , , ],
      [ , , ],
      [ , , ],
      [ , , ]
    ],
    " ": [
      [ , ],
      [ , ],
      [ , ],
      [ , ],
      [ , ],
      [ , ],
      [ , ],
      [ , ],
      [ , ],
      [ , ]
    ],
    "@": [
      [],
      [],
      [],
      [],
      [],
      [],
      [],
      [],
      [],
      []
    ]
  },
  "supermario12x9": {
    //Disabled: true,
    "Name": "Super Mario 12px",
    "Height": 12,
    "0": [
      [ ,1,1,1,1,1,1,1, ],
      [1,1,1,1,1,1,1,1,1],
      [1,1,1,1,1,1,1,1,1],
      [1,1,1,1, ,1,1,1,1],
      [1,1,1,1, ,1,1,1,1],
      [1,1,1, , , ,1,1,1],
      [1,1,1, , , ,1,1,1],
      [1,1,1,1, ,1,1,1,1],
      [1,1,1,1, ,1,1,1,1],
      [1,1,1,1,1,1,1,1,1],
      [1,1,1,1,1,1,1,1,1],
      [ ,1,1,1,1,1,1,1, ]
    ],
    "1": [
      [ ,1,1,1],
      [1,1,1,1],
      [1,1,1,1],
      [1,1,1,1],
      [1,1,1,1],
      [ ,1,1,1],
      [ ,1,1,1],
      [ ,1,1,1],
      [ ,1,1,1],
      [ ,1,1,1],
      [ ,1,1,1],
      [ ,1,1,1]
    ],
    "2": [
      [ ,1,1,1,1,1,1, ],
      [1,1,1,1,1,1,1,1],
      [1,1,1,1,1,1,1,1],
      [1,1, , ,1,1,1,1],
      [ , , , ,1,1,1,1],
      [ , , ,1,1,1,1, ],
      [ , ,1,1,1,1, , ],
      [ ,1,1,1,1, , , ],
      [1,1,1,1, , , , ],
      [1,1,1,1,1,1,1,1],
      [1,1,1,1,1,1,1,1],
      [1,1,1,1,1,1,1,1]
    ],
    "3": [
      [ ,1,1,1,1,1,1,1, ],
      [1,1,1,1,1,1,1,1,1],
      [1,1,1,1,1,1,1,1,1],
      [1,1, , , , ,1,1,1],
      [1,1, , , , , ,1,1],
      [ , , ,1,1,1,1,1,1],
      [ , , ,1,1,1,1,1,1],
      [1,1, , , , , ,1,1],
      [1,1, , , , ,1,1,1],
      [1,1,1,1,1,1,1,1,1],
      [1,1,1,1,1,1,1,1,1],
      [ ,1,1,1,1,1,1,1, ]
    ],
    "4": [
      [ , , ,1,1,1,1,1, ],
      [ , , ,1,1,1,1,1, ],
      [ , ,1,1,1,1,1,1, ],
      [ , ,1,1, , ,1,1, ],
      [ ,1,1,1, , ,1,1, ],
      [ ,1,1,1, , ,1,1, ],
      [ ,1,1, , , ,1,1, ],
      [1,1,1, , , ,1,1,1],
      [1,1,1,1,1,1,1,1,1],
      [1,1,1,1,1,1,1,1,1],
      [ , , , ,1,1,1,1, ],
      [ , , , ,1,1,1,1, ]
    ],
    "5": [
      [1,1,1,1,1,1,1,1,1],
      [1,1,1,1,1,1,1,1,1],
      [1,1, , , , , , , ],
      [1,1, ,1,1,1,1,1, ],
      [1,1,1,1,1,1,1,1,1],
      [1,1,1,1,1, , ,1,1],
      [ , , , , , , ,1,1],
      [ , , , , , , ,1,1],
      [ , , , , , , ,1,1],
      [1,1, , , , ,1,1,1],
      [1,1,1,1,1,1,1,1,1],
      [ ,1,1,1,1,1,1,1, ]
    ],
    "6": [
      [ ,1,1,1,1,1,1,1, ],
      [1,1,1,1,1,1,1,1,1],
      [1,1,1, , , , ,1,1],
      [1,1, , , , , , , ],
      [1,1, , , , , , , ],
      [1,1,1,1,1,1,1,1, ],
      [1,1,1,1,1,1,1,1,1],
      [1,1,1, , , ,1,1,1],
      [1,1, , , , , ,1,1],
      [1,1,1, , , ,1,1,1],
      [1,1,1,1,1,1,1,1,1],
      [ ,1,1,1,1,1,1,1,1]
    ],
    "7": [
      [1,1,1,1,1,1,1,1,1],
      [1,1,1,1,1,1,1,1,1],
      [1,1,1,1,1,1,1,1,1],
      [ , , , , ,1,1,1,1],
      [ , , , , ,1,1,1,1],
      [ , , , ,1,1,1,1,1],
      [ , , , ,1,1,1,1, ],
      [ , , , ,1,1,1,1, ],
      [ , , ,1,1,1,1, , ],
      [ , , ,1,1,1,1, , ],
      [ , , ,1,1,1,1, , ],
      [ , , ,1,1,1,1, , ]
    ],
    "8": [
      [ ,1,1,1,1,1,1,1, ],
      [1,1,1,1,1,1,1,1,1],
      [1,1,1, , , ,1,1,1],
      [1,1, , , , , ,1,1],
      [1,1,1, , , ,1,1,1],
      [ ,1,1,1,1,1,1,1, ],
      [ ,1,1,1,1,1,1,1, ],
      [1,1,1, , , ,1,1,1],
      [1,1, , , , , ,1,1],
      [1,1,1, , , ,1,1,1],
      [1,1,1,1,1,1,1,1,1],
      [ ,1,1,1,1,1,1,1, ]
    ],
    "9": [
      [ ,1,1,1,1,1,1,1, ],
      [1,1,1,1,1,1,1,1,1],
      [1,1,1, , , ,1,1,1],
      [1,1, , , , , ,1,1],
      [1,1,1, , , ,1,1,1],
      [1,1,1,1,1,1,1,1,1],
      [ ,1,1,1,1,1,1,1,1],
      [ , , , , , , ,1,1],
      [ , , , , , , ,1,1],
      [1,1, , , , ,1,1,1],
      [1,1,1,1,1,1,1,1,1],
      [ ,1,1,1,1,1,1,1, ]
    ],
    "A": [
      [ , , ,1,1,1,1, , ],
      [ , , ,1,1,1,1, , ],
      [ , ,1,1, ,1,1, , ],
      [ , ,1,1, ,1,1, , ],
      [ ,1,1,1, ,1,1,1, ],
      [ ,1,1, , , ,1,1, ],
      [ ,1,1, , , ,1,1, ],
      [1,1,1, , , ,1,1,1],
      [1,1,1,1,1,1,1,1,1],
      [1,1,1,1,1,1,1,1,1],
      [1,1,1,1, ,1,1,1,1],
      [1,1,1, , , ,1,1,1]
    ],
    "B": [
      [ , ,1,1,1,1,1, , ],
      [1,1,1,1,1,1,1,1, ],
      [1,1,1, , , ,1,1, ],
      [1,1,1, , , ,1,1,1],
      [1,1,1, , , ,1,1,1],
      [ ,1,1,1,1,1,1,1,1],
      [ ,1,1,1,1,1,1,1,1],
      [ ,1,1, , , ,1,1,1],
      [ ,1,1, , , ,1,1,1],
      [ ,1,1, , , ,1,1, ],
      [ ,1,1,1,1,1,1,1, ],
      [ ,1,1,1,1,1,1, , ]
    ],
    "C": [
      [ , ,1,1,1,1,1,1, ],
      [ ,1,1,1,1,1,1,1,1],
      [ ,1,1,1,1,1,1,1,1],
      [1,1,1,1,1, ,1,1,1],
      [1,1,1,1,1, ,1,1,1],
      [1,1,1,1, , , , , ],
      [1,1,1,1, , ,1,1,1],
      [1,1,1,1, , ,1,1,1],
      [1,1,1,1,1,1,1,1,1],
      [1,1,1,1,1,1,1,1,1],
      [1,1,1,1,1,1,1,1,1],
      [ ,1,1,1,1,1,1,1, ]
    ],
    "D": [
      [ ,1,1,1,1,1,1,1, ],
      [1,1,1,1,1,1,1,1,1],
      [1,1,1,1,1,1,1,1,1],
      [1,1,1,1, , ,1,1,1],
      [1,1,1,1, , , ,1,1],
      [ ,1,1,1, , , ,1,1],
      [ ,1,1,1, , , ,1,1],
      [ ,1,1,1, , ,1,1,1],
      [ ,1,1,1, , ,1,1,1],
      [ ,1,1,1, ,1,1,1,1],
      [ ,1,1,1,1,1,1,1,1],
      [ ,1,1,1,1,1,1,1,1]
    ],
    "E": [
      [ ,1,1,1,1,1,1,1,1],
      [1,1,1,1,1,1,1,1,1],
      [1,1,1,1,1,1,1,1,1],
      [1,1,1,1, , , , , ],
      [1,1,1,1,1,1,1,1, ],
      [ ,1,1,1,1,1,1,1, ],
      [ ,1,1,1,1,1,1,1, ],
      [ ,1,1,1, , , , , ],
      [ ,1,1,1,1, , , , ],
      [ ,1,1,1,1,1,1,1,1],
      [ ,1,1,1,1,1,1,1,1],
      [ ,1,1,1,1,1,1,1,1]
    ],
    "F": [
      [ ,1,1,1,1,1,1,1,1],
      [1,1,1,1,1,1,1,1,1],
      [1,1,1,1,1,1,1,1,1],
      [1,1,1,1, , , , , ],
      [1,1,1,1,1,1,1,1, ],
      [ ,1,1,1,1,1,1,1, ],
      [ ,1,1,1,1,1,1,1, ],
      [ ,1,1,1, , , , , ],
      [ ,1,1,1, , , , , ],
      [ ,1,1,1, , , , , ],
      [ ,1,1,1, , , , , ],
      [ ,1,1,1, , , , , ]
    ],
    "G": [
      [ ,1,1,1,1,1,1, , ],
      [ ,1,1,1,1,1,1,1, ],
      [1,1,1,1,1,1,1,1, ],
      [1,1,1,1,1,1,1,1, ],
      [1,1,1,1, , , , , ],
      [1,1,1, , ,1,1,1,1],
      [1,1,1, , ,1,1,1,1],
      [1,1,1, , , ,1,1, ],
      [1,1,1,1, ,1,1,1, ],
      [1,1,1,1,1,1,1,1, ],
      [1,1,1,1,1,1,1,1, ],
      [ ,1,1,1,1,1,1, , ]
    ],
    "H": [
      [1,1,1, , , ,1,1,1],
      [1,1,1, , , ,1,1,1],
      [1,1,1, , , ,1,1,1],
      [1,1,1, , , ,1,1,1],
      [1,1,1,1,1,1,1,1,1],
      [1,1,1,1,1,1,1,1,1],
      [1,1,1,1,1,1,1,1,1],
      [1,1,1,1,1,1,1,1,1],
      [1,1,1, , , ,1,1,1],
      [1,1,1, , , ,1,1,1],
      [1,1,1, , , ,1,1,1],
      [1,1,1, , , ,1,1,1]
    ],
    "I": [
      [1,1,1,1,1],
      [1,1,1,1,1],
      [1,1,1,1,1],
      [ ,1,1,1, ],
      [ ,1,1,1, ],
      [ ,1,1,1, ],
      [ ,1,1,1, ],
      [ ,1,1,1, ],
      [ ,1,1,1, ],
      [1,1,1,1,1],
      [1,1,1,1,1],
      [1,1,1,1,1]
    ],
    "J": [
      [ , , , ,1,1,1],
      [ , , , ,1,1,1],
      [ , , , ,1,1,1],
      [ , , , ,1,1,1],
      [ , , , ,1,1,1],
      [ , , , ,1,1,1],
      [ , , , ,1,1,1],
      [ , , , ,1,1,1],
      [1,1,1, ,1,1,1],
      [1,1,1,1,1,1,1],
      [1,1,1,1,1,1,1],
      [ ,1,1,1,1,1, ]
    ],
    "K": [
      [1,1,1, , ,1,1,1],
      [1,1,1, , ,1,1,1],
      [1,1,1, ,1,1,1,1],
      [1,1,1,1,1,1,1,1],
      [1,1,1,1,1,1,1, ],
      [1,1,1,1,1,1, , ],
      [1,1,1,1,1,1, , ],
      [1,1,1,1,1,1,1, ],
      [1,1,1,1,1,1,1,1],
      [1,1,1, ,1,1,1,1],
      [1,1,1, , ,1,1,1],
      [1,1,1, , ,1,1,1]
    ],
    "L": [
      [1,1,1, , , , , ],
      [1,1,1, , , , , ],
      [1,1,1, , , , , ],
      [1,1,1, , , , , ],
      [1,1,1, , , , , ],
      [1,1,1, , , , , ],
      [1,1,1, , , , , ],
      [1,1,1, , , , , ],
      [1,1,1,1, , , , ],
      [1,1,1,1,1,1,1,1],
      [1,1,1,1,1,1,1,1],
      [1,1,1,1,1,1,1,1]
    ],
    "M": [
      [ ,1,1, , , , ,1,1, ],
      [ ,1,1,1, , ,1,1,1, ],
      [ ,1,1,1, , ,1,1,1, ],
      [ ,1,1,1,1,1,1,1,1, ],
      [1,1,1,1,1,1,1,1,1,1],
      [1,1,1,1,1,1,1,1,1,1],
      [1,1,1,1,1,1,1,1,1,1],
      [1,1,1,1,1,1,1,1,1,1],
      [1,1,1,1,1,1,1,1,1,1],
      [1,1,1, ,1,1, ,1,1,1],
      [1,1,1, , , , ,1,1,1],
      [1,1,1, , , , ,1,1,1]
    ],
    "N": [
      [1,1,1, , , ,1,1,1],
      [1,1,1,1, , ,1,1,1],
      [1,1,1,1,1, ,1,1,1],
      [1,1,1,1,1,1,1,1,1],
      [1,1,1,1,1,1,1,1,1],
      [1,1,1,1,1,1,1,1,1],
      [1,1,1,1,1,1,1,1,1],
      [1,1,1,1,1,1,1,1,1],
      [1,1,1,1,1,1,1,1,1],
      [1,1,1, ,1,1,1,1,1],
      [1,1,1, , ,1,1,1,1],
      [1,1,1, , , ,1,1,1]
    ],
    "Ñ": [
      [ ,1,1,1,1, , ,1,1],
      [1,1,1,1,1,1,1,1,1],
      [1,1, , ,1,1,1,1, ],
      [ , , , , , , , , ],
      [1,1,1, , , ,1,1,1],
      [1,1,1,1, , ,1,1,1],
      [1,1,1,1,1, ,1,1,1],
      [1,1,1,1,1,1,1,1,1],
      [1,1,1,1,1,1,1,1,1],
      [1,1,1, ,1,1,1,1,1],
      [1,1,1, , ,1,1,1,1],
      [1,1,1, , , ,1,1,1]
    ],
    "O": [
      [ , ,1,1,1,1,1,1, ],
      [ ,1,1,1,1,1,1,1,1],
      [ ,1,1,1,1,1,1,1,1],
      [1,1,1, , , ,1,1,1],
      [1,1,1, , , , ,1,1],
      [1,1,1, , , , ,1,1],
      [1,1,1, , , , ,1,1],
      [1,1,1, , , ,1,1,1],
      [1,1,1, , , ,1,1,1],
      [1,1,1,1,1,1,1,1,1],
      [ ,1,1,1,1,1,1,1, ],
      [ , ,1,1,1,1,1, , ]
    ],
    "P": [
      [ , ,1,1,1,1,1,1, ],
      [ ,1,1,1,1,1,1,1,1],
      [1,1,1,1, , ,1,1,1],
      [1,1,1, , , , ,1,1],
      [1,1,1, , , , ,1,1],
      [ ,1,1,1, , ,1,1,1],
      [ ,1,1,1,1,1,1,1, ],
      [ ,1,1,1,1,1,1,1, ],
      [ ,1,1,1,1, , , , ],
      [ ,1,1,1, , , , , ],
      [ ,1,1,1, , , , , ],
      [ ,1,1,1, , , , , ]
    ],
    "Q": [
      [ , ,1,1,1,1,1,1, , ],
      [ ,1,1,1,1,1,1,1,1, ],
      [ ,1,1,1,1,1,1,1,1, ],
      [1,1,1,1, , ,1,1,1, ],
      [1,1,1, , , , ,1,1, ],
      [1,1,1, , , , ,1,1, ],
      [1,1,1, , , , ,1,1, ],
      [1,1,1,1, , ,1,1,1, ],
      [1,1,1,1,1,1,1,1,1, ],
      [1,1,1,1,1,1,1,1, , ],
      [ ,1,1,1,1,1,1,1,1,1],
      [ , , , , , ,1,1,1,1]
    ],
    "R": [
      [ , , ,1,1,1,1,1,1, ],
      [ ,1,1,1,1,1,1,1,1,1],
      [1,1,1,1, , , ,1,1,1],
      [1,1,1, , , , , ,1,1],
      [1,1,1,1, , , ,1,1,1],
      [1,1,1,1,1,1,1,1,1, ],
      [ ,1,1,1,1,1,1,1, , ],
      [ ,1,1,1,1,1,1, , , ],
      [ ,1,1,1, ,1,1,1, , ],
      [ ,1,1,1, ,1,1,1,1, ],
      [ ,1,1,1, ,1,1,1,1, ],
      [ ,1,1,1, , ,1,1,1, ]
    ],
    "S": [
      [ ,1,1,1,1,1,1,1, ],
      [1,1,1,1,1,1,1,1,1],
      [1,1,1, , , , ,1,1],
      [1,1, , , , , , , ],
      [1,1,1,1,1,1,1,1, ],
      [1,1,1,1,1,1,1,1,1],
      [ , , , , , , ,1,1],
      [1,1,1,1, , , ,1,1],
      [1,1,1,1, , , ,1,1],
      [1,1,1,1,1,1,1,1,1],
      [1,1,1,1,1,1,1,1,1],
      [1,1,1,1,1,1,1,1, ]
    ],
    "T": [
      [1,1,1,1,1,1,1,1],
      [1,1,1,1,1,1,1,1],
      [1,1,1,1,1,1,1,1],
      [ , ,1,1,1,1, , ],
      [ , ,1,1,1, , , ],
      [ , ,1,1,1, , , ],
      [ , ,1,1,1, , , ],
      [ , ,1,1,1, , , ],
      [ , ,1,1,1, , , ],
      [ , ,1,1,1, , , ],
      [ , ,1,1,1, , , ],
      [ , ,1,1,1, , , ]
    ],
    "U": [
      [1,1,1, , ,1,1,1],
      [1,1,1, , ,1,1,1],
      [1,1,1, , ,1,1,1],
      [1,1,1, , ,1,1,1],
      [1,1,1, , ,1,1,1],
      [1,1,1, , ,1,1,1],
      [1,1,1, , ,1,1,1],
      [1,1,1, ,1,1,1,1],
      [1,1,1,1,1,1,1,1],
      [1,1,1,1,1,1,1,1],
      [1,1,1,1,1,1,1, ],
      [ ,1,1,1,1,1, , ]
    ],
    "V": [
      [1,1,1, , , ,1,1,1],
      [1,1,1, , , ,1,1,1],
      [1,1,1,1, ,1,1,1,1],
      [1,1,1,1, ,1,1,1,1],
      [1,1,1,1,1,1,1,1,1],
      [1,1,1,1,1,1,1,1,1],
      [ ,1,1,1,1,1,1,1, ],
      [ ,1,1,1,1,1,1,1, ],
      [ , ,1,1,1,1,1, , ],
      [ , ,1,1,1,1,1, , ],
      [ , , ,1,1,1, , , ],
      [ , , ,1,1,1, , , ]
    ],
    "W": [
      [1,1,1, , , , ,1,1,1],
      [1,1,1, ,1,1, ,1,1,1],
      [1,1,1, ,1,1, ,1,1,1],
      [1,1,1, ,1,1, ,1,1,1],
      [1,1,1,1,1,1,1,1,1,1],
      [1,1,1,1,1,1,1,1,1,1],
      [1,1,1,1,1,1,1,1,1, ],
      [1,1,1,1,1,1,1,1,1, ],
      [ ,1,1,1,1,1,1,1,1, ],
      [ ,1,1,1, ,1,1,1, , ],
      [ ,1,1,1, ,1,1,1, , ],
      [ ,1,1,1, ,1,1,1, , ]
    ],
    "X": [
      [1,1,1,1, ,1,1,1,1],
      [1,1,1,1, ,1,1,1,1],
      [1,1,1,1, ,1,1,1,1],
      [ ,1,1,1, ,1,1,1, ],
      [ ,1,1,1,1,1,1,1, ],
      [ , ,1,1,1,1,1, , ],
      [ ,1,1,1,1,1,1,1, ],
      [ ,1,1,1,1,1,1,1, ],
      [1,1,1,1,1,1,1,1,1],
      [1,1,1,1, ,1,1,1,1],
      [1,1,1, , , ,1,1,1],
      [1,1,1, , , ,1,1,1]
    ],
    "Y": [
      [1,1,1, , ,1,1,1],
      [1,1,1, , ,1,1,1],
      [1,1,1, , ,1,1,1],
      [1,1,1,1,1,1,1,1],
      [1,1,1,1,1,1,1, ],
      [ ,1,1,1,1,1,1, ],
      [ ,1,1,1,1,1, , ],
      [ , ,1,1,1, , , ],
      [ , ,1,1,1, , , ],
      [ , ,1,1,1, , , ],
      [ , ,1,1,1, , , ],
      [ , ,1,1,1, , , ]
    ],
    "Z": [
      [1,1,1,1,1,1,1,1,1],
      [1,1,1,1,1,1,1,1,1],
      [1,1,1,1,1,1,1,1,1],
      [ , , ,1,1,1,1,1,1],
      [ , ,1,1,1,1,1,1, ],
      [ ,1,1,1,1,1,1, , ],
      [ ,1,1,1,1,1, , , ],
      [1,1,1,1,1, , , , ],
      [1,1,1,1,1, , , , ],
      [1,1,1,1,1,1,1,1,1],
      [1,1,1,1,1,1,1,1,1],
      [1,1,1,1,1,1,1,1,1]
    ],
    "+": [
      [ , , , , , , , , ],
      [ , , , , , , , , ],
      [ , , ,1,1,1, , , ],
      [ , , ,1,1,1, , , ],
      [ , , ,1,1,1, , , ],
      [1,1,1,1,1,1,1,1,1],
      [1,1,1,1,1,1,1,1,1],
      [1,1,1,1,1,1,1,1,1],
      [ , , ,1,1,1, , , ],
      [ , , ,1,1,1, , , ],
      [ , , ,1,1,1, , , ],
      [ , , , , , , , , ]
    ],
    "-": [
      [ , , , , , , , , ],
      [ , , , , , , , , ],
      [ , , , , , , , , ],
      [ , , , , , , , , ],
      [ , , , , , , , , ],
      [1,1,1,1,1,1,1,1,1],
      [1,1,1,1,1,1,1,1,1],
      [1,1,1,1,1,1,1,1,1],
      [ , , , , , , , , ],
      [ , , , , , , , , ],
      [ , , , , , , , , ],
      [ , , , , , , , , ]
    ],
    "_": [
      [ , , , , , , , , ],
      [ , , , , , , , , ],
      [ , , , , , , , , ],
      [ , , , , , , , , ],
      [ , , , , , , , , ],
      [ , , , , , , , , ],
      [ , , , , , , , , ],
      [ , , , , , , , , ],
      [ , , , , , , , , ],
      [1,1,1,1,1,1,1,1,1],
      [1,1,1,1,1,1,1,1,1],
      [1,1,1,1,1,1,1,1,1]
    ],
    "(": [
      [ , ,1,1,1],
      [ ,1,1,1,1],
      [1,1,1,1,1],
      [1,1,1, , ],
      [1,1,1, , ],
      [1,1,1, , ],
      [1,1,1, , ],
      [1,1,1, , ],
      [1,1,1, , ],
      [1,1,1,1,1],
      [ ,1,1,1,1],
      [ , ,1,1,1]
    ],
    ")": [
      [1,1,1, , ],
      [1,1,1,1, ],
      [1,1,1,1,1],
      [ , ,1,1,1],
      [ , ,1,1,1],
      [ , ,1,1,1],
      [ , ,1,1,1],
      [ , ,1,1,1],
      [ , ,1,1,1],
      [1,1,1,1,1],
      [1,1,1,1, ],
      [1,1,1, , ]
    ],
    "{": [
      [ , , ,1,1,1,1],
      [ , ,1,1,1,1,1],
      [ , ,1,1,1,1,1],
      [ , ,1,1,1, , ],
      [ ,1,1,1,1, , ],
      [1,1,1,1, , , ],
      [1,1,1,1, , , ],
      [ ,1,1,1,1, , ],
      [ , ,1,1,1, , ],
      [ , ,1,1,1,1,1],
      [ , ,1,1,1,1,1],
      [ , , ,1,1,1,1]
    ],
    "}": [
      [1,1,1,1,1, , ],
      [1,1,1,1,1, , ],
      [1,1,1,1,1, , ],
      [ , ,1,1,1, , ],
      [ , ,1,1,1,1, ],
      [ , , ,1,1,1,1],
      [ , , ,1,1,1,1],
      [ , ,1,1,1,1, ],
      [ , ,1,1,1, , ],
      [1,1,1,1,1, , ],
      [1,1,1,1,1, , ],
      [1,1,1,1,1, , ]
    ],
    "[": [
      [1,1,1,1,1],
      [1,1,1,1,1],
      [1,1,1,1,1],
      [1,1,1, , ],
      [1,1,1, , ],
      [1,1,1, , ],
      [1,1,1, , ],
      [1,1,1, , ],
      [1,1,1, , ],
      [1,1,1,1,1],
      [1,1,1,1,1],
      [1,1,1,1,1]
    ],
    "]": [
      [1,1,1,1,1],
      [1,1,1,1,1],
      [1,1,1,1,1],
      [ , ,1,1,1],
      [ , ,1,1,1],
      [ , ,1,1,1],
      [ , ,1,1,1],
      [ , ,1,1,1],
      [ , ,1,1,1],
      [1,1,1,1,1],
      [1,1,1,1,1],
      [1,1,1,1,1]
    ],
    "=": [
      [ , , , , , , , , ],
      [ , , , , , , , , ],
      [1,1,1,1,1,1,1,1,1],
      [1,1,1,1,1,1,1,1,1],
      [1,1,1,1,1,1,1,1,1],
      [ , , , , , , , , ],
      [ , , , , , , , , ],
      [1,1,1,1,1,1,1,1,1],
      [1,1,1,1,1,1,1,1,1],
      [1,1,1,1,1,1,1,1,1],
      [ , , , , , , , , ],
      [ , , , , , , , , ]
    ],
    "/": [
      [ , , , , , ,1,1,1],
      [ , , , , , ,1,1,1],
      [ , , , , ,1,1,1,1],
      [ , , , , ,1,1,1, ],
      [ , , , ,1,1,1,1, ],
      [ , , ,1,1,1,1, , ],
      [ , , ,1,1,1, , , ],
      [ , ,1,1,1,1, , , ],
      [ ,1,1,1,1, , , , ],
      [1,1,1,1, , , , , ],
      [1,1,1, , , , , , ],
      [1,1,1, , , , , , ]
    ],
    "\\": [
      [1,1,1, , , , , , ],
      [1,1,1, , , , , , ],
      [1,1,1,1, , , , , ],
      [ ,1,1,1, , , , , ],
      [ ,1,1,1,1, , , , ],
      [ , ,1,1,1,1, , , ],
      [ , , ,1,1,1, , , ],
      [ , , ,1,1,1,1, , ],
      [ , , , ,1,1,1,1, ],
      [ , , , , ,1,1,1,1],
      [ , , , , , ,1,1,1],
      [ , , , , , ,1,1,1],
    ],
    "%": [
      [ ,1,1, , , ,1,1,1],
      [1,1,1,1, , ,1,1,1],
      [1,1,1,1, ,1,1,1,1],
      [ ,1,1, , ,1,1,1, ],
      [ , , , ,1,1,1,1, ],
      [ , , ,1,1,1,1, , ],
      [ , ,1,1,1,1, , , ],
      [ , ,1,1,1, , , , ],
      [ ,1,1,1,1, ,1,1, ],
      [1,1,1,1, ,1,1,1,1],
      [1,1,1, , ,1,1,1,1],
      [1,1,1, , , ,1,1, ],
    ],
    ".": [
      [ , , , ],
      [ , , , ],
      [ , , , ],
      [ , , , ],
      [ , , , ],
      [ , , , ],
      [ , , , ],
      [ , , , ],
      [ ,1,1, ],
      [1,1,1,1],
      [1,1,1,1],
      [ ,1,1, ]
    ],
    "*": [
      [1, ,1, ,1],
      [ ,1,1,1, ],
      [1,1,1,1,1],
      [ ,1,1,1, ],
      [1, ,1, ,1],
      [ , , , , ],
      [ , , , , ],
      [ , , , , ],
      [ , , , , ],
      [ , , , , ],
      [ , , , , ],
      [ , , , , ]
    ],
    ":": [
      [ , , , ],
      [ ,1,1, ],
      [1,1,1,1],
      [1,1,1,1],
      [ ,1,1, ],
      [ , , , ],
      [ , , , ],
      [ ,1,1, ],
      [1,1,1,1],
      [1,1,1,1],
      [ ,1,1, ],
      [ , , , ]
    ],
    ",": [
      [ , , , ],
      [ , , , ],
      [ , , , ],
      [ , , , ],
      [ , , , ],
      [ , , , ],
      [ , , , ],
      [ ,1,1, ],
      [1,1,1,1],
      [1,1,1,1],
      [ ,1,1,1],
      [1,1,1, ]
    ],
    ";": [
      [ , , , ],
      [ ,1,1, ],
      [1,1,1,1],
      [1,1,1,1],
      [ ,1,1, ],
      [ , , , ],
      [ , , , ],
      [ ,1,1, ],
      [1,1,1,1],
      [1,1,1,1],
      [ ,1,1,1],
      [1,1,1, ]
    ],
    "!": [
      [1,1,1,1],
      [1,1,1,1],
      [1,1,1,1],
      [1,1,1,1],
      [1,1,1,1],
      [1,1,1,1],
      [1,1,1,1],
      [ ,1,1, ],
      [ , , , ],
      [ ,1,1, ],
      [1,1,1,1],
      [ ,1,1, ]
    ],
    "¡": [
      [ ,1,1, ],
      [1,1,1,1],
      [ ,1,1, ],
      [ , , , ],
      [ ,1,1, ],
      [1,1,1,1],
      [1,1,1,1],
      [1,1,1,1],
      [1,1,1,1],
      [1,1,1,1],
      [1,1,1,1],
      [1,1,1,1]
    ],
    "?": [
      [ ,1,1,1,1,1,1, , ],
      [1,1,1,1,1,1,1,1, ],
      [1,1,1, , ,1,1,1,1],
      [ , , , , , ,1,1,1],
      [ , , , , ,1,1,1,1],
      [ , , , ,1,1,1,1,1],
      [ , , ,1,1,1,1,1, ],
      [ , , ,1,1,1, , , ],
      [ , , , , , , , , ],
      [ , , ,1,1,1, , , ],
      [ , , ,1,1,1, , , ],
      [ , , ,1,1,1, , , ]
    ],
    "¿": [
      [ , , ,1,1,1, , , ],
      [ , , ,1,1,1, , , ],
      [ , , ,1,1,1, , , ],
      [ , , , , , , , , ],
      [ , , ,1,1,1, , , ],
      [ ,1,1,1,1,1, , , ],
      [1,1,1,1,1, , , , ],
      [1,1,1,1, , , , , ],
      [1,1,1, , , , , , ],
      [1,1,1,1, , ,1,1,1],
      [ ,1,1,1,1,1,1,1,1],
      [ , ,1,1,1,1,1,1, ]
    ],
    "\"": [
      [1,1,1, ,1,1,1],
      [1,1,1, ,1,1,1],
      [1,1,1, ,1,1,1],
      [1,1,1, ,1,1,1],
      [ , , , , , , ],
      [ , , , , , , ],
      [ , , , , , , ],
      [ , , , , , , ],
      [ , , , , , , ],
      [ , , , , , , ],
      [ , , , , , , ],
      [ , , , , , , ]
    ],
    "<": [
      [ , , , , ,1,1,1],
      [ , , , ,1,1,1,1],
      [ , , ,1,1,1,1, ],
      [ , ,1,1,1,1, , ],
      [ ,1,1,1,1, , , ],
      [1,1,1,1, , , , ],
      [1,1,1,1, , , , ],
      [ ,1,1,1,1, , , ],
      [ , ,1,1,1,1, , ],
      [ , , ,1,1,1,1, ],
      [ , , , ,1,1,1,1],
      [ , , , , ,1,1,1]
    ],
    ">": [
      [1,1,1, , , , , ],
      [1,1,1,1, , , , ],
      [ ,1,1,1,1, , , ],
      [ , ,1,1,1,1, , ],
      [ , , ,1,1,1,1, ],
      [ , , , ,1,1,1,1],
      [ , , , ,1,1,1,1],
      [ , , ,1,1,1,1, ],
      [ , ,1,1,1,1, , ],
      [ ,1,1,1,1, , , ],
      [1,1,1,1, , , , ],
      [1,1,1, , , , , ]
    ],
    "'": [
      [1,1,1],
      [1,1,1],
      [1,1,1],
      [1,1,1],
      [ , , ],
      [ , , ],
      [ , , ],
      [ , , ],
      [ , , ],
      [ , , ],
      [ , , ],
      [ , , ]
    ],
    "°": [
      [ , ,1,1,1, , ],
      [ ,1,1,1,1,1, ],
      [1,1,1, ,1,1,1],
      [1,1, , , ,1,1],
      [1,1,1, ,1,1,1],
      [ ,1,1,1,1,1, ],
      [ , ,1,1,1, , ],
      [ , , , , , , ],
      [ , , , , , , ],
      [ , , , , , , ],
      [ , , , , , , ],
      [ , , , , , , ]
    ],
    "|": [
      [ ,1,1, ],
      [1,1,1,1],
      [1,1,1,1],
      [1,1,1,1],
      [1,1,1,1],
      [1,1,1,1],
      [1,1,1,1],
      [1,1,1,1],
      [1,1,1,1],
      [1,1,1,1],
      [1,1,1,1],
      [ ,1,1, ]
    ],
    "♥": [
      [ , ,1,1,1, , , , , ,1,1,1, , ],
      [ ,1,1,1,1,1, , , ,1,1,1,1,1, ],
      [1,1,1,1,1,1,1, ,1,1,1,1,1,1,1],
      [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
      [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
      [ ,1,1,1,1,1,1,1,1,1,1,1,1,1, ],
      [ , ,1,1,1,1,1,1,1,1,1,1,1, , ],
      [ , , ,1,1,1,1,1,1,1,1,1, , , ],
      [ , , , ,1,1,1,1,1,1,1, , , , ],
      [ , , , , ,1,1,1,1,1, , , , , ],
      [ , , , , , ,1,1,1, , , , , , ],
      [ , , , , , , ,1, , , , , , , ]
    ],
    "#": [
      [ , , , , , , , , ],
      [ , ,1,1, ,1,1, , ],
      [ , ,1,1, ,1,1, , ],
      [1,1,1,1,1,1,1,1,1],
      [1,1,1,1,1,1,1,1,1],
      [ , ,1,1, ,1,1, , ],
      [ , ,1,1, ,1,1, , ],
      [1,1,1,1,1,1,1,1,1],
      [1,1,1,1,1,1,1,1,1],
      [ , ,1,1, ,1,1, , ],
      [ , ,1,1, ,1,1, , ],
      [ , , , , , , , , ]
    ],
    "^": [
      [ , , ,1,1, , , ],
      [ , ,1,1,1,1, , ],
      [ ,1,1,1,1,1,1, ],
      [1,1,1, , ,1,1,1],
      [1,1, , , , ,1,1],
      [ , , , , , , , ],
      [ , , , , , , , ],
      [ , , , , , , , ],
      [ , , , , , , , ],
      [ , , , , , , , ],
      [ , , , , , , , ],
      [ , , , , , , , ]
    ],
    " ": [
      [ , , ],
      [ , , ],
      [ , , ],
      [ , , ],
      [ , , ],
      [ , , ],
      [ , , ],
      [ , , ],
      [ , , ],
      [ , , ],
      [ , , ],
      [ , , ]
    ],
    "@": [
      [],
      [],
      [],
      [],
      [],
      [],
      [],
      [],
      [],
      [],
      [],
      []
    ]
  },
  "giant14x12": {
    //Disabled: true,
    "Name": "Giant 14px",
    "Height": 14,
    "0": [
      [ , ,1,1,1,1,1,1,1,1, , ],
      [ ,1,1,1,1,1,1,1,1,1,1, ],
      [1,1,1,1,1,1,1,1,1,1,1,1],
      [1,1,1,1,1,1,1,1,1,1,1,1],
      [1,1,1,1,1,1, , ,1,1,1,1],
      [1,1,1,1,1,1, , ,1,1,1,1],
      [1,1,1,1,1,1, , ,1,1,1,1],
      [1,1,1,1,1,1, , ,1,1,1,1],
      [1,1,1,1,1,1, , ,1,1,1,1],
      [1,1,1,1,1,1, , ,1,1,1,1],
      [1,1,1,1,1,1,1,1,1,1,1,1],
      [1,1,1,1,1,1,1,1,1,1,1,1],
      [ ,1,1,1,1,1,1,1,1,1,1, ],
      [ , ,1,1,1,1,1,1,1,1, , ]
    ],
    "1": [
      [ ,1,1,1,1,1,1,1,1, , , ],
      [1,1,1,1,1,1,1,1,1, , , ],
      [1,1,1,1,1,1,1,1,1, , , ],
      [ ,1,1,1,1,1,1,1,1, , , ],
      [ , , ,1,1,1,1,1,1, , , ],
      [ , , ,1,1,1,1,1,1, , , ],
      [ , , ,1,1,1,1,1,1, , , ],
      [ , , ,1,1,1,1,1,1, , , ],
      [ , , ,1,1,1,1,1,1, , , ],
      [ , , ,1,1,1,1,1,1, , , ],
      [ ,1,1,1,1,1,1,1,1,1,1, ],
      [1,1,1,1,1,1,1,1,1,1,1,1],
      [1,1,1,1,1,1,1,1,1,1,1,1],
      [ ,1,1,1,1,1,1,1,1,1,1, ]
    ],
    "2": [
      [1,1,1,1,1,1,1,1,1,1,1, ],
      [1,1,1,1,1,1,1,1,1,1,1,1],
      [1,1,1,1,1,1,1,1,1,1,1,1],
      [1,1,1,1,1,1,1,1,1,1,1,1],
      [ ,1,1, , , , , ,1,1,1,1],
      [ , , , , , , , ,1,1,1,1],
      [ ,1,1,1,1,1,1,1,1,1,1,1],
      [1,1,1,1,1,1,1,1,1,1,1, ],
      [1,1,1,1,1,1, , , , , , ],
      [1,1,1,1,1,1, , , , , , ],
      [1,1,1,1,1,1,1,1,1,1,1, ],
      [1,1,1,1,1,1,1,1,1,1,1,1],
      [1,1,1,1,1,1,1,1,1,1,1,1],
      [ ,1,1,1,1,1,1,1,1,1,1, ]
    ],
    "3": [
      [ ,1,1,1,1,1,1,1,1,1,1, ],
      [1,1,1,1,1,1,1,1,1,1,1,1],
      [1,1,1,1,1,1,1,1,1,1,1,1],
      [ ,1,1,1,1,1,1,1,1,1,1,1],
      [ , , , , , , , ,1,1,1,1],
      [ , , , , , , , ,1,1,1,1],
      [ , , ,1,1,1,1,1,1,1,1, ],
      [ , , ,1,1,1,1,1,1,1,1, ],
      [ , , , , , , , ,1,1,1,1],
      [ , , , , , , , ,1,1,1,1],
      [ ,1,1,1,1,1,1,1,1,1,1,1],
      [1,1,1,1,1,1,1,1,1,1,1,1],
      [1,1,1,1,1,1,1,1,1,1,1,1],
      [ ,1,1,1,1,1,1,1,1,1,1, ]
    ],
    "4": [
      [ ,1,1,1,1, , , , ,1,1, ],
      [1,1,1,1,1,1, , ,1,1,1,1],
      [1,1,1,1,1,1, , ,1,1,1,1],
      [1,1,1,1,1,1, , ,1,1,1,1],
      [1,1,1,1,1,1, , ,1,1,1,1],
      [1,1,1,1,1,1, , ,1,1,1,1],
      [1,1,1,1,1,1,1,1,1,1,1,1],
      [ ,1,1,1,1,1,1,1,1,1,1,1],
      [ , , , , , , , ,1,1,1,1],
      [ , , , , , , , ,1,1,1,1],
      [ , , , , , , , ,1,1,1,1],
      [ , , , , , , , ,1,1,1,1],
      [ , , , , , , , ,1,1,1,1],
      [ , , , , , , , , ,1,1, ]
    ],
    "5": [
      [ ,1,1,1,1,1,1,1,1,1,1,1],
      [1,1,1,1,1,1,1,1,1,1,1,1],
      [1,1,1,1,1,1,1,1,1,1,1,1],
      [1,1,1,1,1,1,1,1,1,1,1,1],
      [1,1,1,1,1,1, , , ,1,1, ],
      [1,1,1,1,1,1, , , , , , ],
      [1,1,1,1,1,1,1,1,1,1,1, ],
      [ ,1,1,1,1,1,1,1,1,1,1,1],
      [ , , , , , , , ,1,1,1,1],
      [ , , , , , , , ,1,1,1,1],
      [ ,1,1,1,1,1,1,1,1,1,1,1],
      [1,1,1,1,1,1,1,1,1,1,1,1],
      [1,1,1,1,1,1,1,1,1,1,1,1],
      [ ,1,1,1,1,1,1,1,1,1,1, ]
    ],
    "6": [
      [ ,1,1,1,1,1,1,1,1,1,1, ],
      [1,1,1,1,1,1,1,1,1,1,1,1],
      [1,1,1,1,1,1,1,1,1,1,1,1],
      [1,1,1,1,1,1,1,1,1,1,1, ],
      [1,1,1,1,1, , , ,1,1, , ],
      [1,1,1,1,1, , , , , , , ],
      [1,1,1,1,1,1,1,1,1,1,1, ],
      [1,1,1,1,1,1,1,1,1,1,1,1],
      [1,1,1,1,1, , ,1,1,1,1,1],
      [1,1,1,1,1, , ,1,1,1,1,1],
      [1,1,1,1,1,1,1,1,1,1,1,1],
      [1,1,1,1,1,1,1,1,1,1,1,1],
      [1,1,1,1,1,1,1,1,1,1,1,1],
      [ ,1,1,1,1,1,1,1,1,1,1, ]
    ],
    "7": [
      [ ,1,1,1,1,1,1,1,1,1,1, ],
      [1,1,1,1,1,1,1,1,1,1,1,1],
      [1,1,1,1,1,1,1,1,1,1,1,1],
      [ ,1,1,1,1,1,1,1,1,1,1,1],
      [ , , , , , , , ,1,1,1,1],
      [ , , , , , , ,1,1,1,1,1],
      [ , , ,1,1,1,1,1,1,1,1, ],
      [ , ,1,1,1,1,1,1,1,1, , ],
      [ , ,1,1,1,1,1,1, , , , ],
      [ , ,1,1,1,1,1,1, , , , ],
      [ , ,1,1,1,1,1,1, , , , ],
      [ , ,1,1,1,1,1,1, , , , ],
      [ , ,1,1,1,1,1,1, , , , ],
      [ , , ,1,1,1,1, , , , , ]
    ],
    "8": [
      [ ,1,1,1,1,1,1,1,1,1,1, ],
      [1,1,1,1,1,1,1,1,1,1,1,1],
      [1,1,1,1,1,1,1,1,1,1,1,1],
      [1,1,1,1,1,1,1,1,1,1,1,1],
      [1,1,1,1,1,1, , ,1,1,1,1],
      [1,1,1,1,1,1, , ,1,1,1,1],
      [ ,1,1,1,1,1,1,1,1,1,1, ],
      [ ,1,1,1,1,1,1,1,1,1,1, ],
      [1,1,1,1,1,1, , ,1,1,1,1],
      [1,1,1,1,1,1, , ,1,1,1,1],
      [1,1,1,1,1,1,1,1,1,1,1,1],
      [1,1,1,1,1,1,1,1,1,1,1,1],
      [1,1,1,1,1,1,1,1,1,1,1,1],
      [ ,1,1,1,1,1,1,1,1,1,1, ]
    ],
    "9": [
      [ ,1,1,1,1,1,1,1,1,1,1, ],
      [1,1,1,1,1,1,1,1,1,1,1,1],
      [1,1,1,1,1,1,1,1,1,1,1,1],
      [1,1,1,1,1,1,1,1,1,1,1,1],
      [1,1,1,1,1,1, , ,1,1,1,1],
      [1,1,1,1,1,1, , ,1,1,1,1],
      [1,1,1,1,1,1,1,1,1,1,1,1],
      [ ,1,1,1,1,1,1,1,1,1,1,1],
      [ , , , , , , , ,1,1,1,1],
      [ ,1,1, , , , , ,1,1,1,1],
      [1,1,1,1,1,1,1,1,1,1,1,1],
      [1,1,1,1,1,1,1,1,1,1,1,1],
      [1,1,1,1,1,1,1,1,1,1,1,1],
      [ ,1,1,1,1,1,1,1,1,1,1, ]
    ],
    "A": [
      [ ,1,1,1,1,1,1,1,1,1,1, ],
      [1,1,1,1,1,1,1,1,1,1,1,1],
      [1,1,1,1,1,1,1,1,1,1,1,1],
      [1,1,1,1,1,1,1,1,1,1,1,1],
      [1,1,1,1,1,1, , ,1,1,1,1],
      [1,1,1,1,1,1, , ,1,1,1,1],
      [1,1,1,1,1,1,1,1,1,1,1,1],
      [1,1,1,1,1,1,1,1,1,1,1,1],
      [1,1,1,1,1,1, , ,1,1,1,1],
      [1,1,1,1,1,1, , ,1,1,1,1],
      [1,1,1,1,1,1, , ,1,1,1,1],
      [1,1,1,1,1,1, , ,1,1,1,1],
      [1,1,1,1,1,1, , ,1,1,1,1],
      [ ,1,1,1,1, , , , ,1,1, ]
    ],
    "B": [
      [ ,1,1,1,1,1,1,1,1,1,1, ],
      [1,1,1,1,1,1,1,1,1,1,1,1],
      [1,1,1,1,1,1,1,1,1,1,1,1],
      [1,1,1,1,1,1,1,1,1,1,1,1],
      [1,1,1,1,1,1, , ,1,1,1,1],
      [1,1,1,1,1,1, , ,1,1,1,1],
      [1,1,1,1,1,1,1,1,1,1,1, ],
      [1,1,1,1,1,1,1,1,1,1,1, ],
      [1,1,1,1,1,1, , ,1,1,1,1],
      [1,1,1,1,1,1, , ,1,1,1,1],
      [1,1,1,1,1,1,1,1,1,1,1,1],
      [1,1,1,1,1,1,1,1,1,1,1,1],
      [1,1,1,1,1,1,1,1,1,1,1,1],
      [ ,1,1,1,1,1,1,1,1,1,1, ]
    ],
    "C": [
      [ , , ,1,1,1,1,1,1,1,1, ],
      [ , ,1,1,1,1,1,1,1,1,1,1],
      [ ,1,1,1,1,1,1,1,1,1,1,1],
      [1,1,1,1,1,1,1,1,1,1,1, ],
      [1,1,1,1,1,1,1,1, , , , ],
      [1,1,1,1,1,1,1, , , , , ],
      [1,1,1,1,1,1, , , , , , ],
      [1,1,1,1,1,1, , , , , , ],
      [1,1,1,1,1,1,1, , , , , ],
      [1,1,1,1,1,1,1,1, , , , ],
      [1,1,1,1,1,1,1,1,1,1,1, ],
      [ ,1,1,1,1,1,1,1,1,1,1,1],
      [ , ,1,1,1,1,1,1,1,1,1,1],
      [ , , ,1,1,1,1,1,1,1,1, ]
    ],
    "D": [
      [ ,1,1,1,1,1,1,1,1, , , ],
      [1,1,1,1,1,1,1,1,1,1, , ],
      [1,1,1,1,1,1,1,1,1,1,1, ],
      [1,1,1,1,1,1,1,1,1,1,1,1],
      [1,1,1,1,1,1, ,1,1,1,1,1],
      [1,1,1,1,1,1, , ,1,1,1,1],
      [1,1,1,1,1,1, , ,1,1,1,1],
      [1,1,1,1,1,1, , ,1,1,1,1],
      [1,1,1,1,1,1, , ,1,1,1,1],
      [1,1,1,1,1,1, ,1,1,1,1,1],
      [1,1,1,1,1,1,1,1,1,1,1,1],
      [1,1,1,1,1,1,1,1,1,1,1, ],
      [1,1,1,1,1,1,1,1,1,1, , ],
      [ ,1,1,1,1,1,1,1,1, , , ]
    ],
    "E": [
      [ ,1,1,1,1,1,1,1,1,1,1, ],
      [1,1,1,1,1,1,1,1,1,1,1,1],
      [1,1,1,1,1,1,1,1,1,1,1,1],
      [1,1,1,1,1,1,1,1,1,1,1, ],
      [1,1,1,1,1,1, , , , , , ],
      [1,1,1,1,1,1, , , , , , ],
      [1,1,1,1,1,1,1,1,1,1,1, ],
      [1,1,1,1,1,1,1,1,1,1,1, ],
      [1,1,1,1,1,1, , , , , , ],
      [1,1,1,1,1,1, , , , , , ],
      [1,1,1,1,1,1,1,1,1,1,1, ],
      [1,1,1,1,1,1,1,1,1,1,1,1],
      [1,1,1,1,1,1,1,1,1,1,1,1],
      [ ,1,1,1,1,1,1,1,1,1,1, ]
    ],
    "F": [
      [ ,1,1,1,1,1,1,1,1,1,1, ],
      [1,1,1,1,1,1,1,1,1,1,1,1],
      [1,1,1,1,1,1,1,1,1,1,1,1],
      [1,1,1,1,1,1,1,1,1,1,1, ],
      [1,1,1,1,1,1, , , , , , ],
      [1,1,1,1,1,1, , , , , , ],
      [1,1,1,1,1,1,1,1,1,1,1, ],
      [1,1,1,1,1,1,1,1,1,1,1, ],
      [1,1,1,1,1,1, , , , , , ],
      [1,1,1,1,1,1, , , , , , ],
      [1,1,1,1,1,1, , , , , , ],
      [1,1,1,1,1,1, , , , , , ],
      [1,1,1,1,1,1, , , , , , ],
      [ ,1,1,1,1, , , , , , , ]
    ],
    "G": [
      [ , , ,1,1,1,1,1,1,1,1, ],
      [ , ,1,1,1,1,1,1,1,1,1,1],
      [ ,1,1,1,1,1,1,1,1,1,1,1],
      [1,1,1,1,1,1,1,1,1,1,1, ],
      [1,1,1,1,1, , , , , , , ],
      [1,1,1,1,1, , , , , , , ],
      [1,1,1,1,1, , ,1,1,1,1, ],
      [1,1,1,1,1, , ,1,1,1,1,1],
      [1,1,1,1,1,1, , , ,1,1,1],
      [1,1,1,1,1,1,1,1,1,1,1,1],
      [1,1,1,1,1,1,1,1,1,1,1,1],
      [ ,1,1,1,1,1,1,1,1,1,1,1],
      [ , ,1,1,1,1,1,1,1,1,1,1],
      [ , , ,1,1,1,1,1,1,1,1, ]
    ],
    "H": [
      [ ,1,1,1,1, , , , ,1,1, ],
      [1,1,1,1,1,1, , ,1,1,1,1],
      [1,1,1,1,1,1, , ,1,1,1,1],
      [1,1,1,1,1,1, , ,1,1,1,1],
      [1,1,1,1,1,1, , ,1,1,1,1],
      [1,1,1,1,1,1, , ,1,1,1,1],
      [1,1,1,1,1,1,1,1,1,1,1,1],
      [1,1,1,1,1,1,1,1,1,1,1,1],
      [1,1,1,1,1,1, , ,1,1,1,1],
      [1,1,1,1,1,1, , ,1,1,1,1],
      [1,1,1,1,1,1, , ,1,1,1,1],
      [1,1,1,1,1,1, , ,1,1,1,1],
      [1,1,1,1,1,1, , ,1,1,1,1],
      [ ,1,1,1,1, , , , ,1,1, ]
    ],
    "I": [
      [ ,1,1,1,1, ],
      [1,1,1,1,1,1],
      [1,1,1,1,1,1],
      [1,1,1,1,1,1],
      [1,1,1,1,1,1],
      [1,1,1,1,1,1],
      [1,1,1,1,1,1],
      [1,1,1,1,1,1],
      [1,1,1,1,1,1],
      [1,1,1,1,1,1],
      [1,1,1,1,1,1],
      [1,1,1,1,1,1],
      [1,1,1,1,1,1],
      [ ,1,1,1,1, ]
    ],
    "J": [
      [ , , , , , , , , ,1,1, ],
      [ , , , , , , , ,1,1,1,1],
      [ , , , , , , , ,1,1,1,1],
      [ , , , , , , , ,1,1,1,1],
      [ , , , , , , , ,1,1,1,1],
      [ , , , , , , , ,1,1,1,1],
      [ , , , , , , , ,1,1,1,1],
      [ , , , , , , , ,1,1,1,1],
      [ , , , , , , , ,1,1,1,1],
      [ , , , , , , , ,1,1,1,1],
      [ ,1,1,1,1,1,1,1,1,1,1,1],
      [1,1,1,1,1,1,1,1,1,1,1,1],
      [1,1,1,1,1,1,1,1,1,1,1,1],
      [ ,1,1,1,1,1,1,1,1,1,1, ]
    ],
    "K": [
      [ ,1,1,1,1, , , , ,1,1, ],
      [1,1,1,1,1,1, , ,1,1,1,1],
      [1,1,1,1,1,1, , ,1,1,1,1],
      [1,1,1,1,1,1, , ,1,1,1, ],
      [1,1,1,1,1,1, ,1,1,1, , ],
      [1,1,1,1,1,1,1,1,1, , , ],
      [1,1,1,1,1,1,1,1,1, , , ],
      [1,1,1,1,1,1,1,1,1, , , ],
      [1,1,1,1,1,1, ,1,1,1, , ],
      [1,1,1,1,1,1, , ,1,1,1, ],
      [1,1,1,1,1,1, , ,1,1,1,1],
      [1,1,1,1,1,1, , ,1,1,1,1],
      [1,1,1,1,1,1, , ,1,1,1,1],
      [ ,1,1,1,1, , , , ,1,1, ]
    ],
    "L": [
      [ ,1,1,1,1, , , , , , , ],
      [1,1,1,1,1,1, , , , , , ],
      [1,1,1,1,1,1, , , , , , ],
      [1,1,1,1,1,1, , , , , , ],
      [1,1,1,1,1,1, , , , , , ],
      [1,1,1,1,1,1, , , , , , ],
      [1,1,1,1,1,1, , , , , , ],
      [1,1,1,1,1,1, , , , , , ],
      [1,1,1,1,1,1, , , , , , ],
      [1,1,1,1,1,1, , , , , , ],
      [1,1,1,1,1,1,1,1,1,1,1, ],
      [1,1,1,1,1,1,1,1,1,1,1,1],
      [1,1,1,1,1,1,1,1,1,1,1,1],
      [ ,1,1,1,1,1,1,1,1,1,1, ]
    ],
    "M": [
      [ ,1,1,1,1,1, , , , , , , ,1,1,1, ],
      [1,1,1,1,1,1,1, , , , , ,1,1,1,1,1],
      [1,1,1,1,1,1,1,1, , , ,1,1,1,1,1,1],
      [1,1,1,1,1,1,1,1,1, ,1,1,1,1,1,1,1],
      [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
      [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
      [1,1,1,1,1,1, ,1,1,1,1,1, ,1,1,1,1],
      [1,1,1,1,1,1, , ,1,1,1, , ,1,1,1,1],
      [1,1,1,1,1,1, , , , , , , ,1,1,1,1],
      [1,1,1,1,1,1, , , , , , , ,1,1,1,1],
      [1,1,1,1,1,1, , , , , , , ,1,1,1,1],
      [1,1,1,1,1,1, , , , , , , ,1,1,1,1],
      [1,1,1,1,1,1, , , , , , , ,1,1,1,1],
      [ ,1,1,1,1, , , , , , , , , ,1,1, ]
    ],
    "N": [
      [ ,1,1,1,1, , , , ,1,1, ],
      [1,1,1,1,1,1, , ,1,1,1,1],
      [1,1,1,1,1,1, , ,1,1,1,1],
      [1,1,1,1,1,1, , ,1,1,1,1],
      [1,1,1,1,1,1,1, ,1,1,1,1],
      [1,1,1,1,1,1,1,1,1,1,1,1],
      [1,1,1,1,1,1,1,1,1,1,1,1],
      [1,1,1,1,1,1,1,1,1,1,1,1],
      [1,1,1,1,1,1,1,1,1,1,1,1],
      [1,1,1,1,1,1, ,1,1,1,1,1],
      [1,1,1,1,1,1, , ,1,1,1,1],
      [1,1,1,1,1,1, , ,1,1,1,1],
      [1,1,1,1,1,1, , ,1,1,1,1],
      [ ,1,1,1,1, , , , ,1,1, ]
    ],
    "Ñ": [
      [ ,1,1,1,1,1,1, , , ,1,1],
      [1,1,1,1,1,1,1,1,1,1,1,1],
      [1,1, , , ,1,1,1,1,1,1, ],
      [ , , , , , , , , , , , ],
      [ ,1,1,1,1, , , , ,1,1, ],
      [1,1,1,1,1,1, , ,1,1,1,1],
      [1,1,1,1,1,1, , ,1,1,1,1],
      [1,1,1,1,1,1,1, ,1,1,1,1],
      [1,1,1,1,1,1,1,1,1,1,1,1],
      [1,1,1,1,1,1,1,1,1,1,1,1],
      [1,1,1,1,1,1,1,1,1,1,1,1],
      [1,1,1,1,1,1, ,1,1,1,1,1],
      [1,1,1,1,1,1, , ,1,1,1,1],
      [ ,1,1,1,1, , , , ,1,1, ]
    ],
    "O": [
      [ , ,1,1,1,1,1,1,1,1, , ],
      [ ,1,1,1,1,1,1,1,1,1,1, ],
      [1,1,1,1,1,1,1,1,1,1,1,1],
      [1,1,1,1,1,1,1,1,1,1,1,1],
      [1,1,1,1,1,1, , ,1,1,1,1],
      [1,1,1,1,1,1, , ,1,1,1,1],
      [1,1,1,1,1,1, , ,1,1,1,1],
      [1,1,1,1,1,1, , ,1,1,1,1],
      [1,1,1,1,1,1, , ,1,1,1,1],
      [1,1,1,1,1,1, , ,1,1,1,1],
      [1,1,1,1,1,1,1,1,1,1,1,1],
      [1,1,1,1,1,1,1,1,1,1,1,1],
      [ ,1,1,1,1,1,1,1,1,1,1, ],
      [ , ,1,1,1,1,1,1,1,1, , ]
    ],
    "P": [
      [ ,1,1,1,1,1,1,1,1,1,1, ],
      [1,1,1,1,1,1,1,1,1,1,1,1],
      [1,1,1,1,1,1,1,1,1,1,1,1],
      [1,1,1,1,1,1,1,1,1,1,1,1],
      [1,1,1,1,1,1, , ,1,1,1,1],
      [1,1,1,1,1,1, , ,1,1,1,1],
      [1,1,1,1,1,1,1,1,1,1,1,1],
      [1,1,1,1,1,1,1,1,1,1,1, ],
      [1,1,1,1,1,1, , , , , , ],
      [1,1,1,1,1,1, , , , , , ],
      [1,1,1,1,1,1, , , , , , ],
      [1,1,1,1,1,1, , , , , , ],
      [1,1,1,1,1,1, , , , , , ],
      [ ,1,1,1,1, , , , , , , ]
    ],
    "Q": [
      [ , ,1,1,1,1,1,1,1,1, , ],
      [ ,1,1,1,1,1,1,1,1,1,1, ],
      [1,1,1,1,1,1,1,1,1,1,1,1],
      [1,1,1,1,1,1,1,1,1,1,1,1],
      [1,1,1,1,1,1, , ,1,1,1,1],
      [1,1,1,1,1,1, , ,1,1,1,1],
      [1,1,1,1,1,1, , ,1,1,1,1],
      [1,1,1,1,1,1, , ,1,1,1,1],
      [1,1,1,1,1,1, , ,1,1,1,1],
      [1,1,1,1,1,1, ,1,1,1,1,1],
      [1,1,1,1,1,1,1,1,1,1,1, ],
      [1,1,1,1,1,1,1,1,1,1, , ],
      [ ,1,1,1,1,1,1,1,1, , , ],
      [ , ,1,1,1,1,1,1,1,1,1,1]
    ],
    "R": [
      [ ,1,1,1,1,1,1,1,1,1,1, ],
      [1,1,1,1,1,1,1,1,1,1,1,1],
      [1,1,1,1,1,1,1,1,1,1,1,1],
      [1,1,1,1,1,1,1,1,1,1,1,1],
      [1,1,1,1,1,1, , ,1,1,1,1],
      [1,1,1,1,1,1, , ,1,1,1,1],
      [1,1,1,1,1,1,1,1,1,1,1,1],
      [1,1,1,1,1,1,1,1,1,1,1, ],
      [1,1,1,1,1,1, ,1,1,1, , ],
      [1,1,1,1,1,1, , ,1,1,1, ],
      [1,1,1,1,1,1, , ,1,1,1,1],
      [1,1,1,1,1,1, , ,1,1,1,1],
      [1,1,1,1,1,1, , ,1,1,1,1],
      [ ,1,1,1,1, , , , ,1,1, ]
    ],
    "S": [
      [ ,1,1,1,1,1,1,1,1,1,1, ],
      [1,1,1,1,1,1,1,1,1,1,1,1],
      [1,1,1,1,1,1,1,1,1,1,1,1],
      [1,1,1,1,1,1,1,1,1,1,1, ],
      [1,1,1,1,1,1, , , , , , ],
      [1,1,1,1,1,1, , , , , , ],
      [1,1,1,1,1,1,1,1,1,1,1, ],
      [ ,1,1,1,1,1,1,1,1,1,1,1],
      [ , , , , , , , ,1,1,1,1],
      [ , , , , , , , ,1,1,1,1],
      [ ,1,1,1,1,1,1,1,1,1,1,1],
      [1,1,1,1,1,1,1,1,1,1,1,1],
      [1,1,1,1,1,1,1,1,1,1,1,1],
      [ ,1,1,1,1,1,1,1,1,1,1, ]
    ],
    "T": [
      [ ,1,1,1,1,1,1,1,1,1,1, ],
      [1,1,1,1,1,1,1,1,1,1,1,1],
      [1,1,1,1,1,1,1,1,1,1,1,1],
      [ ,1,1,1,1,1,1,1,1,1,1, ],
      [ , , ,1,1,1,1,1,1, , , ],
      [ , , ,1,1,1,1,1,1, , , ],
      [ , , ,1,1,1,1,1,1, , , ],
      [ , , ,1,1,1,1,1,1, , , ],
      [ , , ,1,1,1,1,1,1, , , ],
      [ , , ,1,1,1,1,1,1, , , ],
      [ , , ,1,1,1,1,1,1, , , ],
      [ , , ,1,1,1,1,1,1, , , ],
      [ , , ,1,1,1,1,1,1, , , ],
      [ , , , ,1,1,1,1, , , , ]
    ],
    "U": [
      [ ,1,1,1,1, , , , ,1,1, ],
      [1,1,1,1,1,1, , ,1,1,1,1],
      [1,1,1,1,1,1, , ,1,1,1,1],
      [1,1,1,1,1,1, , ,1,1,1,1],
      [1,1,1,1,1,1, , ,1,1,1,1],
      [1,1,1,1,1,1, , ,1,1,1,1],
      [1,1,1,1,1,1, , ,1,1,1,1],
      [1,1,1,1,1,1, , ,1,1,1,1],
      [1,1,1,1,1,1, , ,1,1,1,1],
      [1,1,1,1,1,1, , ,1,1,1,1],
      [1,1,1,1,1,1,1,1,1,1,1,1],
      [1,1,1,1,1,1,1,1,1,1,1,1],
      [1,1,1,1,1,1,1,1,1,1,1,1],
      [ ,1,1,1,1,1,1,1,1,1,1, ]
    ],
    "V": [
      [ ,1,1,1,1, , , , ,1,1, ],
      [1,1,1,1,1,1, , ,1,1,1,1],
      [1,1,1,1,1,1, , ,1,1,1,1],
      [1,1,1,1,1,1, , ,1,1,1,1],
      [1,1,1,1,1,1, , ,1,1,1,1],
      [1,1,1,1,1,1, , ,1,1,1,1],
      [1,1,1,1,1,1, , ,1,1,1,1],
      [1,1,1,1,1,1, , ,1,1,1,1],
      [1,1,1,1,1,1, , ,1,1,1,1],
      [1,1,1,1,1,1, , ,1,1,1,1],
      [ , , ,1,1,1,1,1,1,1,1, ],
      [ , , , ,1,1,1,1,1,1, , ],
      [ , , , , ,1,1,1,1, , , ],
      [ , , , , , ,1,1, , , , ]
    ],
    "W": [
      [ ,1,1,1,1, , , , , , , , , ,1,1, ],
      [1,1,1,1,1,1, , , , , , , ,1,1,1,1],
      [1,1,1,1,1,1, , , , , , , ,1,1,1,1],
      [1,1,1,1,1,1, , , , , , , ,1,1,1,1],
      [1,1,1,1,1,1, , , , , , , ,1,1,1,1],
      [1,1,1,1,1,1, , , , , , , ,1,1,1,1],
      [1,1,1,1,1,1, , ,1,1,1, , ,1,1,1,1],
      [1,1,1,1,1,1, ,1,1,1,1,1, ,1,1,1,1],
      [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
      [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
      [1,1,1,1,1,1,1,1,1, ,1,1,1,1,1,1,1],
      [1,1,1,1,1,1,1,1, , , ,1,1,1,1,1,1],
      [1,1,1,1,1,1,1, , , , , ,1,1,1,1,1],
      [ ,1,1,1,1,1, , , , , , , ,1,1,1, ]
    ],
    "X": [
      [ ,1,1,1,1, , , , ,1,1, ],
      [1,1,1,1,1,1, , ,1,1,1,1],
      [1,1,1,1,1,1, , ,1,1,1,1],
      [1,1,1,1,1,1, , ,1,1,1,1],
      [ ,1,1,1,1,1,1, ,1,1,1,1],
      [ , , , ,1,1,1,1,1,1,1, ],
      [ , , , , ,1,1,1,1, , , ],
      [ , , , , ,1,1,1,1, , , ],
      [ , , , ,1,1,1,1,1,1,1, ],
      [ ,1,1,1,1,1,1, ,1,1,1,1],
      [1,1,1,1,1,1, , ,1,1,1,1],
      [1,1,1,1,1,1, , ,1,1,1,1],
      [1,1,1,1,1,1, , ,1,1,1,1],
      [ ,1,1,1,1, , , , ,1,1, ]
    ],
    "Y": [
      [ ,1,1,1,1, , , , ,1,1, ],
      [1,1,1,1,1,1, , ,1,1,1,1],
      [1,1,1,1,1,1, , ,1,1,1,1],
      [1,1,1,1,1,1, , ,1,1,1,1],
      [1,1,1,1,1,1, , ,1,1,1,1],
      [1,1,1,1,1,1, , ,1,1,1,1],
      [1,1,1,1,1,1, , ,1,1,1,1],
      [1,1,1,1,1,1,1, ,1,1,1,1],
      [ , ,1,1,1,1,1,1,1,1,1, ],
      [ , , ,1,1,1,1,1,1, , , ],
      [ , , ,1,1,1,1,1,1, , , ],
      [ , , ,1,1,1,1,1,1, , , ],
      [ , , ,1,1,1,1,1,1, , , ],
      [ , , , ,1,1,1,1, , , , ]
    ],
    "Z": [
      [ ,1,1,1,1,1,1,1,1,1,1, ],
      [1,1,1,1,1,1,1,1,1,1,1,1],
      [1,1,1,1,1,1,1,1,1,1,1,1],
      [ ,1,1,1,1,1,1,1,1,1,1,1],
      [ , , , , , , , ,1,1,1,1],
      [ , , , , , , , ,1,1,1,1],
      [ ,1,1,1,1,1,1,1,1,1,1,1],
      [1,1,1,1,1,1,1,1,1,1,1, ],
      [1,1,1,1,1, , , , , , , ],
      [1,1,1,1,1, , , , , , , ],
      [1,1,1,1,1,1,1,1,1,1,1, ],
      [1,1,1,1,1,1,1,1,1,1,1,1],
      [1,1,1,1,1,1,1,1,1,1,1,1],
      [ ,1,1,1,1,1,1,1,1,1,1, ]
    ],
    "+": [
      [ , , , , , , , , , , , ],
      [ , , , , ,1,1, , , , , ],
      [ , , , ,1,1,1,1, , , , ],
      [ , , , ,1,1,1,1, , , , ],
      [ , , , ,1,1,1,1, , , , ],
      [ ,1,1,1,1,1,1,1,1,1,1, ],
      [1,1,1,1,1,1,1,1,1,1,1,1],
      [1,1,1,1,1,1,1,1,1,1,1,1],
      [ ,1,1,1,1,1,1,1,1,1,1, ],
      [ , , , ,1,1,1,1, , , , ],
      [ , , , ,1,1,1,1, , , , ],
      [ , , , ,1,1,1,1, , , , ],
      [ , , , , ,1,1, , , , , ],
      [ , , , , , , , , , , , ]
    ],
    "-": [
      [ , , , , , , , , , , , ],
      [ , , , , , , , , , , , ],
      [ , , , , , , , , , , , ],
      [ , , , , , , , , , , , ],
      [ , , , , , , , , , , , ],
      [ ,1,1,1,1,1,1,1,1,1,1, ],
      [1,1,1,1,1,1,1,1,1,1,1,1],
      [1,1,1,1,1,1,1,1,1,1,1,1],
      [ ,1,1,1,1,1,1,1,1,1,1, ],
      [ , , , , , , , , , , , ],
      [ , , , , , , , , , , , ],
      [ , , , , , , , , , , , ],
      [ , , , , , , , , , , , ],
      [ , , , , , , , , , , , ]
    ],
    "_": [
      [ , , , , , , , , , , , ],
      [ , , , , , , , , , , , ],
      [ , , , , , , , , , , , ],
      [ , , , , , , , , , , , ],
      [ , , , , , , , , , , , ],
      [ , , , , , , , , , , , ],
      [ , , , , , , , , , , , ],
      [ , , , , , , , , , , , ],
      [ , , , , , , , , , , , ],
      [ , , , , , , , , , , , ],
      [ ,1,1,1,1,1,1,1,1,1,1, ],
      [1,1,1,1,1,1,1,1,1,1,1,1],
      [1,1,1,1,1,1,1,1,1,1,1,1],
      [ ,1,1,1,1,1,1,1,1,1,1, ]
    ],
    "(": [
      [ , , ,1,1,1,1],
      [ , ,1,1,1,1,1],
      [ ,1,1,1,1,1, ],
      [1,1,1,1,1, , ],
      [1,1,1,1, , , ],
      [1,1,1,1, , , ],
      [1,1,1,1, , , ],
      [1,1,1,1, , , ],
      [1,1,1,1, , , ],
      [1,1,1,1, , , ],
      [1,1,1,1,1, , ],
      [ ,1,1,1,1,1, ],
      [ , ,1,1,1,1,1],
      [ , , ,1,1,1,1]
    ],
    ")": [
      [1,1,1,1, , , ],
      [1,1,1,1,1, , ],
      [ ,1,1,1,1,1, ],
      [ , ,1,1,1,1,1],
      [ , , ,1,1,1,1],
      [ , , ,1,1,1,1],
      [ , , ,1,1,1,1],
      [ , , ,1,1,1,1],
      [ , , ,1,1,1,1],
      [ , , ,1,1,1,1],
      [ , ,1,1,1,1,1],
      [ ,1,1,1,1,1, ],
      [1,1,1,1,1, , ],
      [1,1,1,1, , , ]
    ],
    "{": [
      [ , , , ,1,1,1,1],
      [ , , ,1,1,1,1,1],
      [ , ,1,1,1,1,1, ],
      [ ,1,1,1,1,1, , ],
      [ ,1,1,1,1, , , ],
      [ ,1,1,1,1, , , ],
      [1,1,1,1, , , , ],
      [1,1,1,1, , , , ],
      [ ,1,1,1,1, , , ],
      [ ,1,1,1,1, , , ],
      [ ,1,1,1,1,1, , ],
      [ , ,1,1,1,1,1, ],
      [ , , ,1,1,1,1,1],
      [ , , , ,1,1,1,1]
    ],
    "}": [
      [1,1,1,1, , , , ],
      [1,1,1,1,1, , , ],
      [ ,1,1,1,1,1, , ],
      [ , ,1,1,1,1,1, ],
      [ , , ,1,1,1,1, ],
      [ , , ,1,1,1,1, ],
      [ , , , ,1,1,1,1],
      [ , , , ,1,1,1,1],
      [ , , ,1,1,1,1, ],
      [ , , ,1,1,1,1, ],
      [ , ,1,1,1,1,1, ],
      [ ,1,1,1,1,1, , ],
      [1,1,1,1,1, , , ],
      [1,1,1,1, , , , ]
    ],
    "[": [
      [1,1,1,1,1,1,1],
      [1,1,1,1,1,1, ],
      [1,1,1,1, , , ],
      [1,1,1,1, , , ],
      [1,1,1,1, , , ],
      [1,1,1,1, , , ],
      [1,1,1,1, , , ],
      [1,1,1,1, , , ],
      [1,1,1,1, , , ],
      [1,1,1,1, , , ],
      [1,1,1,1, , , ],
      [1,1,1,1, , , ],
      [1,1,1,1,1,1, ],
      [1,1,1,1,1,1,1]
    ],
    "]": [
      [1,1,1,1,1,1,1],
      [ ,1,1,1,1,1,1],
      [ , , ,1,1,1,1],
      [ , , ,1,1,1,1],
      [ , , ,1,1,1,1],
      [ , , ,1,1,1,1],
      [ , , ,1,1,1,1],
      [ , , ,1,1,1,1],
      [ , , ,1,1,1,1],
      [ , , ,1,1,1,1],
      [ , , ,1,1,1,1],
      [ , , ,1,1,1,1],
      [ ,1,1,1,1,1,1],
      [1,1,1,1,1,1,1]
    ],
    "=": [
      [ , , , , , , , , , , , ],
      [ , , , , , , , , , , , ],
      [ ,1,1,1,1,1,1,1,1,1,1, ],
      [1,1,1,1,1,1,1,1,1,1,1,1],
      [1,1,1,1,1,1,1,1,1,1,1,1],
      [ ,1,1,1,1,1,1,1,1,1,1, ],
      [ , , , , , , , , , , , ],
      [ , , , , , , , , , , , ],
      [ ,1,1,1,1,1,1,1,1,1,1, ],
      [1,1,1,1,1,1,1,1,1,1,1,1],
      [1,1,1,1,1,1,1,1,1,1,1,1],
      [ ,1,1,1,1,1,1,1,1,1,1, ],
      [ , , , , , , , , , , , ],
      [ , , , , , , , , , , , ]
    ],
    "/": [
      [ , , , , , ,1,1,1,1],
      [ , , , , ,1,1,1,1,1],
      [ , , , ,1,1,1,1,1, ],
      [ , , ,1,1,1,1,1, , ],
      [ , , ,1,1,1,1, , , ],
      [ , , ,1,1,1,1, , , ],
      [ , , ,1,1,1,1, , , ],
      [ , , ,1,1,1,1, , , ],
      [ , , ,1,1,1,1, , , ],
      [ , , ,1,1,1,1, , , ],
      [ , ,1,1,1,1,1, , , ],
      [ ,1,1,1,1,1, , , , ],
      [1,1,1,1,1, , , , , ],
      [1,1,1,1, , , , , , ]
    ],
    "\\": [
      [1,1,1,1, , , , , , ],
      [1,1,1,1,1, , , , , ],
      [ ,1,1,1,1,1, , , , ],
      [ , ,1,1,1,1,1, , , ],
      [ , , ,1,1,1,1, , , ],
      [ , , ,1,1,1,1, , , ],
      [ , , ,1,1,1,1, , , ],
      [ , , ,1,1,1,1, , , ],
      [ , , ,1,1,1,1, , , ],
      [ , , ,1,1,1,1, , , ],
      [ , , ,1,1,1,1,1, , ],
      [ , , , ,1,1,1,1,1, ],
      [ , , , , ,1,1,1,1,1],
      [ , , , , , ,1,1,1,1]
    ],
    "%": [
      [1,1,1, , , ,1,1,1,1],
      [1,1,1, , ,1,1,1,1,1],
      [1,1,1, ,1,1,1,1,1, ],
      [ , , ,1,1,1,1,1, , ],
      [ , , ,1,1,1,1, , , ],
      [ , , ,1,1,1,1, , , ],
      [ , , ,1,1,1,1, , , ],
      [ , , ,1,1,1,1, , , ],
      [ , , ,1,1,1,1, , , ],
      [ , , ,1,1,1,1, , , ],
      [ , ,1,1,1,1,1, , , ],
      [ ,1,1,1,1,1, ,1,1,1],
      [1,1,1,1,1, , ,1,1,1],
      [1,1,1,1, , , ,1,1,1]
    ],
    ".": [
      [ , , , ],
      [ , , , ],
      [ , , , ],
      [ , , , ],
      [ , , , ],
      [ , , , ],
      [ , , , ],
      [ , , , ],
      [ , , , ],
      [ , , , ],
      [ ,1,1, ],
      [1,1,1,1],
      [1,1,1,1],
      [ ,1,1, ]
    ],
    "*": [
      [ , , ,1, , , ],
      [ ,1, ,1, ,1, ],
      [ , ,1,1,1, , ],
      [1,1,1,1,1,1,1],
      [ , ,1,1,1, , ],
      [ ,1, ,1, ,1, ],
      [ , , ,1, , , ],
      [ , , , , , , ],
      [ , , , , , , ],
      [ , , , , , , ],
      [ , , , , , , ],
      [ , , , , , , ],
      [ , , , , , , ],
      [ , , , , , , ]
    ],
    ":": [
      [ , , , ],
      [ , , , ],
      [ ,1,1, ],
      [1,1,1,1],
      [1,1,1,1],
      [ ,1,1, ],
      [ , , , ],
      [ , , , ],
      [ ,1,1, ],
      [1,1,1,1],
      [1,1,1,1],
      [ ,1,1, ],
      [ , , , ],
      [ , , , ]
    ],
    ",": [
      [ , , , ],
      [ , , , ],
      [ , , , ],
      [ , , , ],
      [ , , , ],
      [ , , , ],
      [ , , , ],
      [ , , , ],
      [ ,1,1, ],
      [1,1,1,1],
      [1,1,1,1],
      [ ,1,1,1],
      [ , ,1,1],
      [1,1,1, ]
    ],
    ";": [
      [ , , , ],
      [ , , , ],
      [ ,1,1, ],
      [1,1,1,1],
      [1,1,1,1],
      [ ,1,1, ],
      [ , , , ],
      [ , , , ],
      [ ,1,1, ],
      [1,1,1,1],
      [1,1,1,1],
      [ ,1,1,1],
      [ , ,1,1],
      [1,1,1, ]
    ],
    "!": [
      [ ,1,1,],
      [1,1,1,1],
      [1,1,1,1],
      [1,1,1,1],
      [1,1,1,1],
      [1,1,1,1],
      [1,1,1,1],
      [1,1,1,1],
      [1,1,1,1],
      [1,1,1,1],
      [1,1,1,1],
      [ , , , ],
      [1,1,1,1],
      [1,1,1,1]
    ],
    "¡": [
      [1,1,1,1],
      [1,1,1,1],
      [ , , , ],
      [1,1,1,1],
      [1,1,1,1],
      [1,1,1,1],
      [1,1,1,1],
      [1,1,1,1],
      [1,1,1,1],
      [1,1,1,1],
      [1,1,1,1],
      [1,1,1,1],
      [1,1,1,1],
      [ ,1,1, ]
    ],
    "?": [
      [1,1,1,1,1,1,1,1,1,1,1, ],
      [1,1,1,1,1,1,1,1,1,1,1,1],
      [1,1,1,1,1,1,1,1,1,1,1,1],
      [1,1,1,1,1,1,1,1,1,1,1,1],
      [ ,1,1, , , , , ,1,1,1,1],
      [ , , , , , , , ,1,1,1,1],
      [ , , ,1,1,1,1,1,1,1,1,1],
      [ , , ,1,1,1,1,1,1,1,1, ],
      [ , , ,1,1,1,1, , , , , ],
      [ , , ,1,1,1,1, , , , , ],
      [ , , ,1,1,1,1, , , , , ],
      [ , , , , , , , , , , , ],
      [ , , ,1,1,1,1, , , , , ],
      [ , , ,1,1,1,1, , , , , ]
    ],
    "¿": [
      [ , , , , ,1,1,1,1, , , ],
      [ , , , , ,1,1,1,1, , , ],
      [ , , , , , , , , , , , ],
      [ , , , , ,1,1,1,1, , , ],
      [ , , , , ,1,1,1,1, , , ],
      [ , , , , ,1,1,1,1, , , ],
      [ ,1,1,1,1,1,1,1,1, , , ],
      [1,1,1,1,1,1,1,1,1, , , ],
      [1,1,1,1, , , , , , , , ],
      [1,1,1,1, , , , , ,1,1, ],
      [1,1,1,1,1,1,1,1,1,1,1,1],
      [1,1,1,1,1,1,1,1,1,1,1,1],
      [1,1,1,1,1,1,1,1,1,1,1,1],
      [ ,1,1,1,1,1,1,1,1,1,1,1],
    ],
    "\"": [
      [ ,1,1, , ,1,1],
      [1,1,1, ,1,1,1],
      [ , , , , , , ],
      [ , , , , , , ],
      [ , , , , , , ],
      [ , , , , , , ],
      [ , , , , , , ],
      [ , , , , , , ],
      [ , , , , , , ],
      [ , , , , , , ],
      [ , , , , , , ],
      [ , , , , , , ],
      [ , , , , , , ],
      [ , , , , , , ]
    ],
    "<": [
      [ , , , , , , ,1, ],
      [ , , , , , ,1,1,1],
      [ , , , , ,1,1,1,1],
      [ , , , ,1,1,1,1, ],
      [ , , ,1,1,1,1, , ],
      [ , ,1,1,1,1, , , ],
      [1,1,1,1,1, , , , ],
      [1,1,1,1,1, , , , ],
      [ , ,1,1,1,1, , , ],
      [ , , ,1,1,1,1, , ],
      [ , , , ,1,1,1,1, ],
      [ , , , , ,1,1,1,1],
      [ , , , , , ,1,1,1],
      [ , , , , , , ,1, ]
    ],
    ">": [
      [ ,1, , , , , , , ],
      [1,1,1, , , , , , ],
      [1,1,1,1, , , , , ],
      [ ,1,1,1,1, , , , ],
      [ , ,1,1,1,1, , , ],
      [ , , ,1,1,1,1, , ],
      [ , , , ,1,1,1,1,1],
      [ , , , ,1,1,1,1,1],
      [ , , ,1,1,1,1, , ],
      [ , ,1,1,1,1, , , ],
      [ ,1,1,1,1, , , , ],
      [1,1,1,1, , , , , ],
      [1,1,1, , , , , , ],
      [ ,1, , , , , , , ]
    ],
    "'": [
      [ ,1,1],
      [1,1,1],
      [ , , ],
      [ , , ],
      [ , , ],
      [ , , ],
      [ , , ],
      [ , , ],
      [ , , ],
      [ , , ],
      [ , , ],
      [ , , ],
      [ , , ],
      [ , , ]
    ],
    "°": [
      [ ,1,1,1,1, ],
      [1,1,1,1,1,1],
      [1,1, , ,1,1],
      [1,1, , ,1,1],
      [1,1,1,1,1,1],
      [ ,1,1,1,1, ],
      [ , , , , , ],
      [ , , , , , ],
      [ , , , , , ],
      [ , , , , , ],
      [ , , , , , ],
      [ , , , , , ],
      [ , , , , , ],
      [ , , , , , ]
    ],
    "|": [
      [ ,1,1, ],
      [1,1,1,1],
      [1,1,1,1],
      [1,1,1,1],
      [1,1,1,1],
      [1,1,1,1],
      [1,1,1,1],
      [1,1,1,1],
      [1,1,1,1],
      [1,1,1,1],
      [1,1,1,1],
      [1,1,1,1],
      [1,1,1,1],
      [ ,1,1, ]
    ],
    "♥": [
      [ , , , , , , , , , , , , , , ],
      [ , ,1,1,1,1, , , ,1,1,1,1, , ],
      [ ,1,1,1,1,1,1, ,1,1,1,1,1,1, ],
      [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
      [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
      [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
      [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
      [ ,1,1,1,1,1,1,1,1,1,1,1,1,1, ],
      [ , ,1,1,1,1,1,1,1,1,1,1,1, , ],
      [ , , ,1,1,1,1,1,1,1,1,1, , , ],
      [ , , , ,1,1,1,1,1,1,1, , , , ],
      [ , , , , ,1,1,1,1,1, , , , , ],
      [ , , , , , ,1,1,1, , , , , , ],
      [ , , , , , , ,1, , , , , , , ]
    ],
    "#": [
      [ , ,1,1,1, , ,1,1,1, , ],
      [ , ,1,1,1, , ,1,1,1, , ],
      [ , ,1,1,1, , ,1,1,1, , ],
      [1,1,1,1,1,1,1,1,1,1,1,1],
      [1,1,1,1,1,1,1,1,1,1,1,1],
      [1,1,1,1,1,1,1,1,1,1,1,1],
      [ , ,1,1,1, , ,1,1,1, , ],
      [ , ,1,1,1, , ,1,1,1, , ],
      [1,1,1,1,1,1,1,1,1,1,1,1],
      [1,1,1,1,1,1,1,1,1,1,1,1],
      [1,1,1,1,1,1,1,1,1,1,1,1],
      [ , ,1,1,1, , ,1,1,1, , ],
      [ , ,1,1,1, , ,1,1,1, , ],
      [ , ,1,1,1, , ,1,1,1, , ]
    ],
    "^": [
      [ , , , , ,1,1, , , , , ],
      [ , , , ,1,1,1,1, , , , ],
      [ , , ,1,1,1,1,1,1, , , ],
      [ , ,1,1,1,1,1,1,1,1, , ],
      [ ,1,1,1,1, , ,1,1,1,1, ],
      [1,1,1,1, , , , ,1,1,1,1],
      [ ,1,1, , , , , , ,1,1, ],
      [ , , , , , , , , , , , ],
      [ , , , , , , , , , , , ],
      [ , , , , , , , , , , , ],
      [ , , , , , , , , , , , ],
      [ , , , , , , , , , , , ],
      [ , , , , , , , , , , , ],
      [ , , , , , , , , , , , ]
    ],
    " ": [
      [ , ],
      [ , ],
      [ , ],
      [ , ],
      [ , ],
      [ , ],
      [ , ],
      [ , ],
      [ , ],
      [ , ],
      [ , ],
      [ , ],
      [ , ],
      [ , ]
    ],
    "@": [
      [],
      [],
      [],
      [],
      [],
      [],
      [],
      [],
      [],
      [],
      [],
      [],
      [],
      []
    ]
  }
}
let availableFonts = {
  "simple5x3": {
    "Tier": 1,
    "Name": "Simple 5px",
    "Height": 5,
    "A": [
        [1,1,1],
        [1,0,1],
        [1,1,1],
        [1,0,1],
        [1,0,1]
    ],
    "B": [
        [1,1,1],
        [1,0,1],
        [1,1,0],
        [1,0,1],
        [1,1,1]
    ],
    "C": [
        [1,1,1],
        [1,0,0],
        [1,0,0],
        [1,0,0],
        [1,1,1]
    ],
    "D": [
        [1,1],
        [1,0,1],
        [1,0,1],
        [1,0,1],
        [1,1]
    ],
    "E": [
        [1,1,1],
        [1],
        [1,1],
        [1],
        [1,1,1]
    ],
    "F": [
        [1,1,1],
        [1],
        [1,1],
        [1],
        [1]
    ],
    "G": [
        [1,1,1],
        [1],
        [1,0,1],
        [1,0,1],
        [1,1,1]
    ],
    "H": [
        [1,0,1],
        [1,0,1],
        [1,1,1],
        [1,0,1],
        [1,0,1]
    ],
    "I": [
        [1,1,1],
        [0,1],
        [0,1],
        [0,1],
        [1,1,1]
    ],
    "J": [
        [0,0,1],
        [0,0,1],
        [0,0,1],
        [0,0,1],
        [1,1,1]
    ],
    "K": [
        [1,0,1],
        [1,0,1],
        [1,1,0],
        [1,0,1],
        [1,0,1]
    ],
    "L": [
        [1],
        [1],
        [1],
        [1],
        [1,1,1]
    ],
    "M": [
        [1,1,1,1,1],
        [1,0,1,0,1],
        [1,0,0,0,1],
        [1,0,0,0,1],
        [1,0,0,0,1]
    ],
    "N": [
        [1,1,1],
        [1,0,1],
        [1,0,1],
        [1,0,1],
        [1,0,1]
    ],
    "Ñ": [
        [1,1,1],
        [0,0,0],
        [1,1,1],
        [1,0,1],
        [1,0,1]
    ],
    "O": [
        [1,1,1],
        [1,0,1],
        [1,0,1],
        [1,0,1],
        [1,1,1]
    ],
    "P": [
        [1,1],
        [1,0,1],
        [1,1],
        [1],
        [1]
    ],
    "Q": [
        [1,1,1],
        [1,0,1],
        [1,0,1],
        [1,1,1],
        [0,1,0]
    ],
    "R": [
        [1,1,1],
        [1,0,1],
        [1,1,0],
        [1,0,1],
        [1,0,1]
    ],
    "S": [
        [1,1,1],
        [1,0,0],
        [1,1,1],
        [0,0,1],
        [1,1,1]
    ],
    "T": [
        [1,1,1],
        [0,1],
        [0,1],
        [0,1],
        [0,1]
    ],
    "U": [
        [1,0,1],
        [1,0,1],
        [1,0,1],
        [1,0,1],
        [1,1,1]
    ],
    "V": [
        [1,0,1],
        [1,0,1],
        [1,0,1],
        [1,0,1],
        [0,1,0]
    ],
    "W": [
        [1,0,1,0,1],
        [1,0,1,0,1],
        [1,0,1,0,1],
        [1,0,1,0,1],
        [1,1,1,1,1]
    ],
    "X": [
        [1,0,1],
        [1,0,1],
        [0,1,0],
        [1,0,1],
        [1,0,1]
    ],
    "Y": [
        [1,0,1],
        [1,0,1],
        [1,1,1],
        [0,1],
        [0,1]
    ],
    "Z": [
        [1,1,1],
        [0,0,1],
        [0,1,0],
        [1,0,0],
        [1,1,1]
    ],
    "0": [
        [1,1,1],
        [1,0,1],
        [1,0,1],
        [1,0,1],
        [1,1,1]
    ],
    "1": [
        [1,1],
        [0,1],
        [0,1],
        [0,1],
        [1,1,1]
    ],
    "2": [
        [1,1,1],
        [0,0,1],
        [1,1,1],
        [1,0,0],
        [1,1,1]
    ],
    "3": [
        [1,1,1],
        [0,0,1],
        [1,1,1],
        [0,0,1],
        [1,1,1]
    ],
    "4": [
        [1,0,1],
        [1,0,1],
        [1,1,1],
        [0,0,1],
        [0,0,1]
    ],
    "5": [
        [1,1,1],
        [1],
        [1,1,1],
        [0,0,1],
        [1,1,1]
    ],
    "6": [
        [1,1,1],
        [1],
        [1,1,1],
        [1,0,1],
        [1,1,1]
    ],
    "7": [
        [1,1,1],
        [0,0,1],
        [0,0,1],
        [0,0,1],
        [0,0,1]
    ],
    "8": [
      [1,1,1],
      [1,0,1],
      [1,1,1],
      [1,0,1],
      [1,1,1]
    ],
    "9": [
        [1,1,1],
        [1,0,1],
        [1,1,1],
        [0,0,1],
        [1,1,1]
    ],
    "+": [
        [0,0,0],
        [0,1,0],
        [1,1,1],
        [0,1,0],
        [0,0,0]
    ],
    "-": [
        [],
        [],
        [1,1,1],
        [],
        []
    ],
    "_": [
        [],
        [],
        [],
        [],
        [1,1,1]
    ],
    "(": [
        [0,1],
        [1],
        [1],
        [1],
        [0,1]
    ],
    ")": [
        [1],
        [0,1],
        [0,1],
        [0,1],
        [1]
    ],
    "{": [
        [0,1,1],
        [0,1],
        [1,1],
        [0,1],
        [0,1,1]
    ],
    "}": [
        [1,1],
        [0,1],
        [0,1,1],
        [0,1],
        [1,1]
    ],
    "[": [
        [1,1],
        [1],
        [1],
        [1],
        [1,1]
    ],
    "]": [
        [1,1],
        [0,1],
        [0,1],
        [0,1],
        [1,1]
    ],
    "=": [
        [],
        [1,1,1],
        [],
        [1,1,1],
        []
    ],
    "/": [
        [0,0,1],
        [0,0,1],
        [0,1,0],
        [1,0,0],
        [1,0,0]
    ],
    "\\": [
        [1],
        [1],
        [0,1],
        [0,0,1],
        [0,0,1]
    ],
    "%": [
      [1,0,1],
      [0,0,1],
      [0,1,0],
      [1,0,0],
      [1,0,1]
    ],
    ".": [
        [],
        [],
        [],
        [],
        [1]
    ],
    "*": [
        [1,0,1],
        [0,1],
        [1,0,1],
        [],
        []
    ],
    ":": [
        [],
        [1],
        [],
        [1],
        []
    ],
    ",": [
        [],
        [],
        [],
        [1],
        [1]
    ],
    ";": [
        [],
        [1],
        [],
        [1],
        [1]
    ],
    "!": [
        [1],
        [1],
        [1],
        [],
        [1]
    ],
    "¡": [
        [1],
        [],
        [1],
        [1],
        [1]
    ],
    "?": [
        [1,1,1],
        [0,0,1],
        [0,1,1],
        [0,0,0],
        [0,1,0]
    ],
    "¿": [
        [0,1,0],
        [0,0,0],
        [1,1,0],
        [1,0,0],
        [1,1,1]
    ],
    "\"":[
        [1,0,1],
        [1,0,1],
        [],
        [],
        []
    ],
    "<": [
        [0,0,1],
        [0,1],
        [1],
        [0,1],
        [0,0,1]
    ],
    ">": [
        [1],
        [0,1],
        [0,0,1],
        [0,1],
        [1]
    ],
    "'":[
        [1],
        [1],
        [],
        [],
        []
    ],
    "°": [
        [0,1,0],
        [1,0,1],
        [0,1,0],
        [],
        []
    ],
    "|": [
        [1],
        [1],
        [1],
        [1],
        [1]
    ],
    "♥": [
        [0,1,0,1],
        [1,1,1,1,1],
        [1,1,1,1,1],
        [0,1,1,1],
        [0,0,1]
    ],
    "#": [
      [0,1,0,1],
      [1,1,1,1,1],
      [0,1,0,1],
      [1,1,1,1,1],
      [0,1,0,1]
    ],
    "^": [
      [0,1],
      [1,0,1],
      [],
      [],
      []
    ],
    " ": [
        [0,0],
        [0,0],
        [0,0],
        [0,0],
        [0,0]
    ],
    "@": [
        [],
        [],
        [],
        [],
        []
    ]
  },
  "simplev25x3": {
    "Tier": 2,
    "Name": "Simple v2 5px",
    "Height": 5,
    "A": [
        [1,1,1],
        [1,0,1],
        [1,1,1],
        [1,0,1],
        [1,0,1]
    ],
    "B": [
        [1,1,1],
        [1,0,1],
        [1,1,0],
        [1,0,1],
        [1,1,1]
    ],
    "C": [
        [1,1,1],
        [1,0,0],
        [1,0,0],
        [1,0,0],
        [1,1,1]
    ],
    "D": [
        [1,1],
        [1,0,1],
        [1,0,1],
        [1,0,1],
        [1,1]
    ],
    "E": [
        [1,1,1],
        [1],
        [1,1,1],
        [1],
        [1,1,1]
    ],
    "F": [
        [1,1,1],
        [1,0,0],
        [1,1,0],
        [1,0,0],
        [1,0,0]
    ],
    "G": [
        [1,1,1],
        [1,0,0],
        [1,0,1],
        [1,0,1],
        [1,1,1]
    ],
    "H": [
        [1,0,1],
        [1,0,1],
        [1,1,1],
        [1,0,1],
        [1,0,1]
    ],
    "I": [
        [1],
        [1],
        [1],
        [1],
        [1]
    ],
    "J": [
        [0,0,1],
        [0,0,1],
        [0,0,1],
        [0,0,1],
        [1,1,1]
    ],
    "K": [
        [1,0,1],
        [1,0,1],
        [1,1,0],
        [1,0,1],
        [1,0,1]
    ],
    "L": [
        [1,0,0],
        [1,0,0],
        [1,0,0],
        [1,0,0],
        [1,1,1]
    ],
    "M": [
        [1,1,0,1,1],
        [1,0,1,0,1],
        [1,0,0,0,1],
        [1,0,0,0,1],
        [1,0,0,0,1]
    ],
    "N": [
        [1,1,1],
        [1,0,1],
        [1,0,1],
        [1,0,1],
        [1,0,1]
    ],
    "Ñ": [
        [1,1,1],
        [0,0,0],
        [1,1,1],
        [1,0,1],
        [1,0,1]
    ],
    "O": [
        [1,1,1],
        [1,0,1],
        [1,0,1],
        [1,0,1],
        [1,1,1]
    ],
    "P": [
        [1,1,1],
        [1,0,1],
        [1,1,1],
        [1],
        [1]
    ],
    "Q": [
        [1,1,1],
        [1,0,1],
        [1,0,1],
        [1,1,1],
        [0,1,0]
    ],
    "R": [
        [1,1,1],
        [1,0,1],
        [1,1,0],
        [1,0,1],
        [1,0,1]
    ],
    "S": [
        [1,1,1],
        [1,0,0],
        [1,1,1],
        [0,0,1],
        [1,1,1]
    ],
    "T": [
        [1,1,1],
        [0,1,0],
        [0,1,0],
        [0,1,0],
        [0,1,0]
    ],
    "U": [
        [1,0,1],
        [1,0,1],
        [1,0,1],
        [1,0,1],
        [1,1,1]
    ],
    "V": [
        [1,0,1],
        [1,0,1],
        [1,0,1],
        [1,0,1],
        [0,1,0]
    ],
    "W": [
        [1,0,0,0,1],
        [1,0,0,0,1],
        [1,0,1,0,1],
        [1,0,1,0,1],
        [1,1,0,1,1]
    ],
    "X": [
        [1,0,1],
        [1,0,1],
        [0,1,0],
        [1,0,1],
        [1,0,1]
    ],
    "Y": [
        [1,0,1],
        [1,0,1],
        [1,1,1],
        [0,0,1],
        [1,1,1]
    ],
    "Z": [
        [1,1,1],
        [0,0,1],
        [0,1,0],
        [1,0,0],
        [1,1,1]
    ],
    "0": [
        [1,1,1],
        [1,0,1],
        [1,0,1],
        [1,0,1],
        [1,1,1]
    ],
    "1": [
        [1,1],
        [0,1],
        [0,1],
        [0,1],
        [0,1]
    ],
    "2": [
        [1,1,1],
        [0,0,1],
        [1,1,1],
        [1,0,0],
        [1,1,1]
    ],
    "3": [
        [1,1,1],
        [0,0,1],
        [1,1,1],
        [0,0,1],
        [1,1,1]
    ],
    "4": [
        [1,0,0],
        [1,0,1],
        [1,0,1],
        [1,1,1],
        [0,0,1]
    ],
    "5": [
        [1,1,1],
        [1],
        [1,1,1],
        [0,0,1],
        [1,1,1]
    ],
    "6": [
        [1,1,1],
        [1],
        [1,1,1],
        [1,0,1],
        [1,1,1]
    ],
    "7": [
        [1,1,1],
        [0,0,1],
        [0,0,1],
        [0,0,1],
        [0,0,1]
    ],
    "8": [
      [1,1,1],
      [1,0,1],
      [1,1,1],
      [1,0,1],
      [1,1,1]
    ],
    "9": [
        [1,1,1],
        [1,0,1],
        [1,1,1],
        [0,0,1],
        [1,1,1]
    ],
    "+": [
        [0,0,0],
        [0,1,0],
        [1,1,1],
        [0,1,0],
        [0,0,0]
    ],
    "-": [
        [],
        [],
        [1,1,1],
        [],
        []
    ],
    "_": [
        [],
        [],
        [],
        [],
        [1,1,1]
    ],
    "(": [
        [0,1],
        [1],
        [1],
        [1],
        [0,1]
    ],
    ")": [
        [1],
        [0,1],
        [0,1],
        [0,1],
        [1]
    ],
    "{": [
        [0,1,1],
        [0,1],
        [1,1],
        [0,1],
        [0,1,1]
    ],
    "}": [
        [1,1],
        [0,1],
        [0,1,1],
        [0,1],
        [1,1]
    ],
    "[": [
        [1,1],
        [1],
        [1],
        [1],
        [1,1]
    ],
    "]": [
        [1,1],
        [0,1],
        [0,1],
        [0,1],
        [1,1]
    ],
    "=": [
        [],
        [1,1,1],
        [],
        [1,1,1],
        []
    ],
    "/": [
        [0,0,1],
        [0,0,1],
        [0,1,0],
        [1,0,0],
        [1,0,0]
    ],
    "\\": [
        [1],
        [1],
        [0,1],
        [0,0,1],
        [0,0,1]
    ],
    "%": [
      [1,0,1],
      [0,0,1],
      [0,1,0],
      [1,0,0],
      [1,0,1]
    ],
    ".": [
        [],
        [],
        [],
        [],
        [1]
    ],
    "*": [
        [1,0,1],
        [0,1],
        [1,0,1],
        [],
        []
    ],
    ":": [
        [],
        [1],
        [],
        [1],
        []
    ],
    ",": [
        [],
        [],
        [],
        [1],
        [1]
    ],
    ";": [
        [],
        [1],
        [],
        [1],
        [1]
    ],
    "!": [
        [1],
        [1],
        [1],
        [],
        [1]
    ],
    "¡": [
        [1],
        [],
        [1],
        [1],
        [1]
    ],
    "?": [
        [1,1,1],
        [0,0,1],
        [0,1,1],
        [0,0,0],
        [0,1,0]
    ],
    "¿": [
        [0,1,0],
        [0,0,0],
        [1,1,0],
        [1,0,0],
        [1,1,1]
    ],
    "\"":[
        [1,0,1],
        [1,0,1],
        [],
        [],
        []
    ],
    "<": [
        [0,0,1],
        [0,1],
        [1],
        [0,1],
        [0,0,1]
    ],
    ">": [
        [1],
        [0,1],
        [0,0,1],
        [0,1],
        [1]
    ],
    "'":[
        [1],
        [1],
        [],
        [],
        []
    ],
    "°": [
        [0,1,0],
        [1,0,1],
        [0,1,0],
        [],
        []
    ],
    "|": [
        [1],
        [1],
        [1],
        [1],
        [1]
    ],
    "♥": [
        [0,1,1,0,1,1,0],
        [1,1,1,1,1,1,1],
        [0,1,1,1,1,1,0],
        [0,0,1,1,1,0,0],
        [0,0,0,1,0,0,0]
    ],
    "#": [
      [0,1,0,1],
      [1,1,1,1,1],
      [0,1,0,1],
      [1,1,1,1,1],
      [0,1,0,1]
    ],
    "^": [
      [0,1],
      [1,0,1],
      [],
      [],
      []
    ],
    " ": [
        [0,0],
        [0,0],
        [0,0],
        [0,0],
        [0,0]
    ],
    "@": [
        [],
        [],
        [],
        [],
        []
    ]
  },
  "rounded5x5": {
    "Tier": 1,
    "Name": "Rounded 5px",
    "Height": 5,
    "A": [
        [0,1,1,1],
        [1,0,0,0,1],
        [1,0,0,0,1],
        [1,1,1,1,1],
        [1,0,0,0,1]
    ],
    "B": [
        [1,1,1,1],
        [1,0,0,0,1],
        [1,1,1,1],
        [1,0,0,0,1],
        [1,1,1,1]
    ],
    "C": [
        [0,1,1,1],
        [1,0,0,0,1],
        [1],
        [1,0,0,0,1],
        [0,1,1,1]
    ],
    "D": [
        [1,1,1,1],
        [1,0,0,0,1],
        [1,0,0,0,1],
        [1,0,0,0,1],
        [1,1,1,1]
    ],
    "E": [
        [1,1,1,1,1],
        [1],
        [1,1,1,1],
        [1],
        [1,1,1,1,1]
    ],
    "F": [
        [1,1,1,1,1],
        [1],
        [1,1,1,1],
        [1],
        [1]
    ],
    "G": [
        [0,1,1,1,1],
        [1],
        [1,0,1,1,1],
        [1,0,0,0,1],
        [0,1,1,1,0]
    ],
    "H": [
        [1,0,0,0,1],
        [1,0,0,0,1],
        [1,1,1,1,1],
        [1,0,0,0,1],
        [1,0,0,0,1]
    ],
    "I": [
        [1,1,1,1,1],
        [0,0,1],
        [0,0,1],
        [0,0,1],
        [1,1,1,1,1]
    ],
    "J": [
        [1,1,1,1,1],
        [0,0,0,0,1],
        [0,0,0,0,1],
        [1,0,0,0,1],
        [1,1,1,1,1]
    ],
    "K": [
        [1,0,0,0,1],
        [1,0,0,1],
        [1,1,1],
        [1,0,0,1],
        [1,0,0,0,1]
    ],
    "L": [
        [1],
        [1],
        [1],
        [1],
        [1,1,1,1,1]
    ],
    "M": [
        [1,0,0,0,1],
        [1,1,0,1,1],
        [1,0,1,0,1],
        [1,0,0,0,1],
        [1,0,0,0,1]
    ],
    "N": [
        [1,0,0,0,1],
        [1,1,0,0,1],
        [1,0,1,0,1],
        [1,0,0,1,1],
        [1,0,0,0,1]
    ],
    "Ñ": [
        [1,1,1,1,1],
        [0,0,0,0,0],
        [1,1,0,0,1],
        [1,0,1,0,1],
        [1,0,0,1,1]
    ],
    "O": [
        [0,1,1,1],
        [1,0,0,0,1],
        [1,0,0,0,1],
        [1,0,0,0,1],
        [0,1,1,1]
    ],
    "P": [
        [1,1,1,1],
        [1,0,0,0,1],
        [1,1,1,1],
        [1],
        [1]
    ],
    "Q": [
        [0,1,1,1],
        [1,0,0,0,1],
        [1,0,0,0,1],
        [1,0,0,1,0],
        [0,1,1,0,1]
    ],
    "R": [
        [1,1,1,1],
        [1,0,0,0,1],
        [1,1,1,1],
        [1,0,0,0,1],
        [1,0,0,0,1]
    ],
    "S": [
        [0,1,1,1,1],
        [1],
        [0,1,1,1],
        [0,0,0,0,1],
        [1,1,1,1]
    ],
    "T": [
        [1,1,1,1,1],
        [0,0,1],
        [0,0,1],
        [0,0,1],
        [0,0,1]
    ],
    "U": [
        [1,0,0,0,1],
        [1,0,0,0,1],
        [1,0,0,0,1],
        [1,0,0,0,1],
        [0,1,1,1]
    ],
    "V": [
        [1,0,0,0,1],
        [1,0,0,0,1],
        [1,0,0,0,1],
        [0,1,0,1],
        [0,0,1]
    ],
    "W": [
        [1,0,0,0,1],
        [1,0,0,0,1],
        [1,0,0,0,1],
        [1,0,1,0,1],
        [0,1,0,1,0]
    ],
    "X": [
        [1,0,0,0,1],
        [0,1,0,1],
        [0,0,1],
        [0,1,0,1],
        [1,0,0,0,1]
    ],
    "Y": [
        [1,0,0,0,1],
        [0,1,0,1],
        [0,0,1],
        [0,0,1],
        [0,0,1]
    ],
    "Z": [
        [1,1,1,1,1],
        [0,0,0,1],
        [0,0,1],
        [0,1],
        [1,1,1,1,1]
    ],
    "0": [
        [0,1,1,1,0],
        [1,0,0,0,1],
        [1,0,0,0,1],
        [1,0,0,0,1],
        [0,1,1,1,0]
    ],
    "1": [
        [1,1,1],
        [0,0,1],
        [0,0,1],
        [0,0,1],
        [1,1,1,1,1]
    ],
    "2": [
        [0,1,1,1,0],
        [1,0,0,0,1],
        [0,0,0,1],
        [0,0,1],
        [1,1,1,1,1]
    ],
    "3": [
        [0,1,1,1],
        [1,0,0,0,1],
        [0,0,1,1,0],
        [1,0,0,0,1],
        [0,1,1,1]
    ],
    "4": [
        [1,0,0,0,1],
        [1,0,0,0,1],
        [1,1,1,1,1],
        [0,0,0,0,1],
        [0,0,0,0,1]
    ],
    "5": [
        [1,1,1,1,1],
        [1],
        [1,1,1,1,0],
        [0,0,0,0,1],
        [1,1,1,1]
    ],
    "6": [
        [0,1,1,1,1],
        [1],
        [1,1,1,1],
        [1,0,0,0,1],
        [0,1,1,1]
    ],
    "7": [
        [1,1,1,1,1],
        [0,0,0,0,1],
        [0,0,0,1],
        [0,0,1],
        [0,0,1]
    ],
    "8": [
      [0,1,1,1],
      [1,0,0,0,1],
      [0,1,1,1],
      [1,0,0,0,1],
      [0,1,1,1]
    ],
    "9": [
        [0,1,1,1,0],
        [1,0,0,0,1],
        [0,1,1,1,1],
        [0,0,0,0,1],
        [0,1,1,1,0]
    ],
    "+": [
        [0,0,1],
        [0,0,1],
        [1,1,1,1,1],
        [0,0,1],
        [0,0,1]
    ],
    "-": [
        [],
        [],
        [1,1,1,1,1],
        [],
        []
    ],
    "_": [
        [],
        [],
        [],
        [],
        [1,1,1,1,1]
    ],
    "(": [
        [0,1],
        [1],
        [1],
        [1],
        [0,1]
    ],
    ")": [
        [1],
        [0,1],
        [0,1],
        [0,1],
        [1]
    ],
    "{": [
        [0,1,1],
        [0,1],
        [1],
        [0,1],
        [0,1,1]
    ],
    "}": [
        [1,1],
        [0,1],
        [0,0,1],
        [0,1],
        [1,1]
    ],
    "[": [
        [1,1],
        [1],
        [1],
        [1],
        [1,1]
    ],
    "]": [
        [1,1],
        [0,1],
        [0,1],
        [0,1],
        [1,1]
    ],
    "=": [
        [],
        [1,1,1,1,1],
        [],
        [1,1,1,1,1],
        []
    ],
    "/": [
        [0,0,0,0,1],
        [0,0,0,1],
        [0,0,1],
        [0,1],
        [1]
    ],
    "\\": [
        [1],
        [0,1],
        [0,0,1],
        [0,0,0,1],
        [0,0,0,0,1]
    ],
    "%": [
        [1,0,0,0,1],
        [0,0,0,1],
        [0,0,1],
        [0,1],
        [1,0,0,0,1]
    ],
    ".": [
        [],
        [],
        [],
        [],
        [1]
    ],
    "*": [
        [1,0,1],
        [0,1],
        [1,0,1],
        [],
        []
    ],
    ":": [
        [],
        [1],
        [],
        [1],
        []
    ],
    ",": [
        [],
        [],
        [],
        [1],
        [1]
    ],
    ";": [
        [],
        [1],
        [],
        [1],
        [1]
    ],
    "!": [
        [1],
        [1],
        [1],
        [],
        [1]
    ],
    "¡": [
        [1],
        [],
        [1],
        [1],
        [1]
    ],
    "?": [
        [0,1,1,1],
        [1,0,0,0,1],
        [0,0,1,1],
        [],
        [0,0,1]
    ],
    "¿": [
        [0,0,1],
        [],
        [0,1,1],
        [1,0,0,0,1],
        [0,1,1,1]
    ],
    "\"":[
        [1,0,1],
        [1,0,1],
        [],
        [],
        []
    ],
    "<": [
        [0,0,1],
        [0,1],
        [1],
        [0,1],
        [0,0,1]
    ],
    ">": [
        [1],
        [0,1],
        [0,0,1],
        [0,1],
        [1]
    ],
    "'":[
        [1],
        [1],
        [],
        [],
        []
    ],
    "°": [
        [1,1,1],
        [1,0,1],
        [1,1,1],
        [],
        []
    ],
    "|": [
        [1],
        [1],
        [1],
        [1],
        [1]
    ],
    "♥": [
        [0,1,0,1],
        [1,1,1,1,1],
        [1,1,1,1,1],
        [0,1,1,1],
        [0,0,1]
    ],
    "#": [
      [0,1,0,1],
      [1,1,1,1,1],
      [0,1,0,1],
      [1,1,1,1,1],
      [0,1,0,1]
    ],
    "^": [
      [0,1],
      [1,0,1],
      [],
      [],
      []
    ],
    " ": [
        [0,0,0],
        [0,0,0],
        [0,0,0],
        [0,0,0],
        [0,0,0]
    ],
    "@": [
        [],
        [],
        [],
        [],
        []
    ]
  },
  "squared5x5": {
    "Tier": 2,
    "Name": "Squared 5px",
    "Height": 5,
    "A": [
        [1,1,1,1,1],
        [1,0,0,0,1],
        [1,0,0,0,1],
        [1,1,1,1,1],
        [1,0,0,0,1]
    ],
    "B": [
        [1,1,1,1],
        [1,0,0,0,1],
        [1,1,1,1],
        [1,0,0,0,1],
        [1,1,1,1]
    ],
    "C": [
        [1,1,1,1,1],
        [1],
        [1],
        [1],
        [1,1,1,1,1]
    ],
    "D": [
        [1,1,1,1],
        [1,0,0,0,1],
        [1,0,0,0,1],
        [1,0,0,0,1],
        [1,1,1,1]
    ],
    "E": [
        [1,1,1,1,1],
        [1],
        [1,1,1,1],
        [1],
        [1,1,1,1,1]
    ],
    "F": [
        [1,1,1,1,1],
        [1],
        [1,1,1,1],
        [1],
        [1]
    ],
    "G": [
        [1,1,1,1,1],
        [1],
        [1,0,1,1,1],
        [1,0,0,0,1],
        [1,1,1,1,1]
    ],
    "H": [
        [1,0,0,0,1],
        [1,0,0,0,1],
        [1,1,1,1,1],
        [1,0,0,0,1],
        [1,0,0,0,1]
    ],
    "I": [
        [1,1,1,1,1],
        [0,0,1],
        [0,0,1],
        [0,0,1],
        [1,1,1,1,1]
    ],
    "J": [
        [1,1,1,1,1],
        [0,0,0,0,1],
        [0,0,0,0,1],
        [1,0,0,0,1],
        [1,1,1,1,1]
    ],
    "K": [
        [1,0,0,0,1],
        [1,0,0,1],
        [1,1,1],
        [1,0,0,1],
        [1,0,0,0,1]
    ],
    "L": [
        [1],
        [1],
        [1],
        [1],
        [1,1,1,1,1]
    ],
    "M": [
        [1,0,0,0,1],
        [1,1,0,1,1],
        [1,0,1,0,1],
        [1,0,0,0,1],
        [1,0,0,0,1]
    ],
    "N": [
        [1,0,0,0,1],
        [1,1,0,0,1],
        [1,0,1,0,1],
        [1,0,0,1,1],
        [1,0,0,0,1]
    ],
    "Ñ": [
        [1,1,1,1,1],
        [0,0,0,0,0],
        [1,1,0,0,1],
        [1,0,1,0,1],
        [1,0,0,1,1]
    ],
    "O": [
        [1,1,1,1,1],
        [1,0,0,0,1],
        [1,0,0,0,1],
        [1,0,0,0,1],
        [1,1,1,1,1]
    ],
    "P": [
        [1,1,1,1,1],
        [1,0,0,0,1],
        [1,1,1,1,1],
        [1],
        [1]
    ],
    "Q": [
        [1,1,1,1,1],
        [1,0,0,0,1],
        [1,0,0,0,1],
        [1,0,0,1,0],
        [1,1,1,0,1]
    ],
    "R": [
        [1,1,1,1],
        [1,0,0,0,1],
        [1,1,1,1],
        [1,0,0,0,1],
        [1,0,0,0,1]
    ],
    "S": [
        [1,1,1,1,1],
        [1],
        [1,1,1,1,1],
        [0,0,0,0,1],
        [1,1,1,1,1]
    ],
    "T": [
        [1,1,1,1,1],
        [0,0,1],
        [0,0,1],
        [0,0,1],
        [0,0,1]
    ],
    "U": [
        [1,0,0,0,1],
        [1,0,0,0,1],
        [1,0,0,0,1],
        [1,0,0,0,1],
        [1,1,1,1,1]
    ],
    "V": [
        [1,0,0,0,1],
        [1,0,0,0,1],
        [1,0,0,0,1],
        [0,1,0,1],
        [0,0,1]
    ],
    "W": [
        [1,0,0,0,1],
        [1,0,0,0,1],
        [1,0,0,0,1],
        [1,0,1,0,1],
        [1,1,0,1,1]
    ],
    "X": [
        [1,0,0,0,1],
        [0,1,0,1],
        [0,0,1],
        [0,1,0,1],
        [1,0,0,0,1]
    ],
    "Y": [
        [1,0,0,0,1],
        [1,0,0,0,1],
        [1,1,1,1,1],
        [0,0,1],
        [0,0,1]
    ],
    "Z": [
        [1,1,1,1,1],
        [0,0,0,1],
        [0,0,1],
        [0,1],
        [1,1,1,1,1]
    ],
    "0": [
        [1,1,1,1,1],
        [1,0,0,0,1],
        [1,0,0,0,1],
        [1,0,0,0,1],
        [1,1,1,1,1]
    ],
    "1": [
        [1,1,1],
        [0,0,1],
        [0,0,1],
        [0,0,1],
        [1,1,1,1,1]
    ],
    "2": [
        [1,1,1,1,1],
        [0,0,0,0,1],
        [1,1,1,1,1],
        [1],
        [1,1,1,1,1]
    ],
    "3": [
        [1,1,1,1,1],
        [1,0,0,0,1],
        [0,0,1,1,1],
        [1,0,0,0,1],
        [1,1,1,1,1]
    ],
    "4": [
        [1,0,0,0,1],
        [1,0,0,0,1],
        [1,1,1,1,1],
        [0,0,0,0,1],
        [0,0,0,0,1]
    ],
    "5": [
        [1,1,1,1,1],
        [1],
        [1,1,1,1,0],
        [0,0,0,0,1],
        [1,1,1,1]
    ],
    "6": [
        [1,1,1,1,1],
        [1],
        [1,1,1,1,1],
        [1,0,0,0,1],
        [1,1,1,1,1]
    ],
    "7": [
        [1,1,1,1,1],
        [0,0,0,0,1],
        [0,0,0,1],
        [0,0,1],
        [0,0,1]
    ],
    "8": [
      [1,1,1,1,1],
      [1,0,0,0,1],
      [1,1,1,1,1],
      [1,0,0,0,1],
      [1,1,1,1,1]
    ],
    "9": [
        [1,1,1,1,1],
        [1,0,0,0,1],
        [1,1,1,1,1],
        [0,0,0,0,1],
        [1,1,1,1,1]
    ],
    "+": [
        [0,0,1],
        [0,0,1],
        [1,1,1,1,1],
        [0,0,1],
        [0,0,1]
    ],
    "-": [
        [],
        [],
        [1,1,1,1,1],
        [],
        []
    ],
    "_": [
        [],
        [],
        [],
        [],
        [1,1,1,1,1]
    ],
    "(": [
        [0,1],
        [1],
        [1],
        [1],
        [0,1]
    ],
    ")": [
        [1],
        [0,1],
        [0,1],
        [0,1],
        [1]
    ],
    "{": [
        [0,1,1],
        [0,1],
        [1],
        [0,1],
        [0,1,1]
    ],
    "}": [
        [1,1],
        [0,1],
        [0,0,1],
        [0,1],
        [1,1]
    ],
    "[": [
        [1,1],
        [1],
        [1],
        [1],
        [1,1]
    ],
    "]": [
        [1,1],
        [0,1],
        [0,1],
        [0,1],
        [1,1]
    ],
    "=": [
        [],
        [1,1,1,1,1],
        [],
        [1,1,1,1,1],
        []
    ],
    "/": [
        [0,0,0,0,1],
        [0,0,0,1],
        [0,0,1],
        [0,1],
        [1]
    ],
    "\\": [
        [1],
        [0,1],
        [0,0,1],
        [0,0,0,1],
        [0,0,0,0,1]
    ],
    "%": [
        [1,0,0,0,1],
        [0,0,0,1],
        [0,0,1],
        [0,1],
        [1,0,0,0,1]
    ],
    ".": [
        [],
        [],
        [],
        [],
        [1]
    ],
    "*": [
        [1,0,1],
        [0,1],
        [1,0,1],
        [],
        []
    ],
    ":": [
        [],
        [1],
        [],
        [1],
        []
    ],
    ",": [
        [],
        [],
        [],
        [1],
        [1]
    ],
    ";": [
        [],
        [1],
        [],
        [1],
        [1]
    ],
    "!": [
        [1],
        [1],
        [1],
        [],
        [1]
    ],
    "¡": [
        [1],
        [],
        [1],
        [1],
        [1]
    ],
    "?": [
        [0,1,1,1],
        [1,0,0,0,1],
        [0,0,1,1],
        [],
        [0,0,1]
    ],
    "¿": [
        [0,0,1],
        [],
        [0,1,1],
        [1,0,0,0,1],
        [0,1,1,1]
    ],
    "\"":[
        [1,0,1],
        [1,0,1],
        [],
        [],
        []
    ],
    "<": [
        [0,0,1],
        [0,1],
        [1],
        [0,1],
        [0,0,1]
    ],
    ">": [
        [1],
        [0,1],
        [0,0,1],
        [0,1],
        [1]
    ],
    "'":[
        [1],
        [1],
        [],
        [],
        []
    ],
    "°": [
        [1,1,1],
        [1,0,1],
        [1,1,1],
        [],
        []
    ],
    "|": [
        [1],
        [1],
        [1],
        [1],
        [1]
    ],
    "♥": [
        [0,1,0,1],
        [1,1,1,1,1],
        [1,1,1,1,1],
        [0,1,1,1],
        [0,0,1]
    ],
    "#": [
      [0,1,0,1],
      [1,1,1,1,1],
      [0,1,0,1],
      [1,1,1,1,1],
      [0,1,0,1]
    ],
    "^": [
      [0,1],
      [1,0,1],
      [],
      [],
      []
    ],
    " ": [
        [0,0,0],
        [0,0,0],
        [0,0,0],
        [0,0,0],
        [0,0,0]
    ],
    "@": [
        [],
        [],
        [],
        [],
        []
    ]
  },
  "simple5x5": {
    "Tier": 2,
    "Name": "Simple 5px",
    "Height": 5,
    "A": [
        [1,1,1,1,1],
        [1,0,0,0,1],
        [1,0,0,0,1],
        [1,1,1,1,1],
        [1,0,0,0,1]
    ],
    "B": [
        [1,1,1,1,1],
        [0,0,0,0,1],
        [1,1,1,1,1],
        [0,0,0,0,1],
        [1,1,1,1,1]
    ],
    "C": [
        [1,1,1,1,1],
        [1,0,0,0,0],
        [1,0,0,0,0],
        [1,0,0,0,0],
        [1,1,1,1,1]
    ],
    "D": [
        [1,1,1,1,0],
        [0,0,0,0,1],
        [0,0,0,0,1],
        [0,0,0,0,1],
        [1,1,1,1,0]
    ],
    "E": [
        [1,1,1,1,1],
        [0,0,0,0,0],
        [1,1,1,1,1],
        [0,0,0,0,0],
        [1,1,1,1,1]
    ],
    "F": [
        [1,1,1,1,1],
        [1,0,0,0,0],
        [1,1,1,1,1],
        [1,0,0,0,0],
        [1,0,0,0,0]
    ],
    "G": [
        [1,1,1,1,1],
        [1,0,0,0,0],
        [1,0,1,1,1],
        [1,0,0,0,1],
        [1,1,1,0,1]
    ],
    "H": [
        [1,0,0,0,1],
        [1,0,0,0,1],
        [1,1,1,1,1],
        [1,0,0,0,1],
        [1,0,0,0,1]
    ],
    "I": [
        [1],
        [1],
        [1],
        [1],
        [1]
    ],
    "J": [
        [0,0,0,0,1],
        [0,0,0,0,1],
        [0,0,0,0,1],
        [1,0,0,0,1],
        [1,1,1,1,1]
    ],
    "K": [
        [1,0,0,0,1],
        [1,0,0,1],
        [1,1,1],
        [1,0,0,1],
        [1,0,0,0,1]
    ],
    "L": [
        [1,0,0,0,0],
        [1,0,0,0,0],
        [1,0,0,0,0],
        [1,0,0,0,0],
        [1,1,1,1,1]
    ],
    "M": [
        [1,1,1,1,1],
        [1,0,1,0,1],
        [1,0,1,0,1],
        [1,0,1,0,1],
        [1,0,1,0,1]
    ],
    "N": [
        [1,1,1,1,1],
        [1,0,0,0,1],
        [1,0,0,0,1],
        [1,0,0,0,1],
        [1,0,0,0,1]
    ],
    "Ñ": [
        [1,1,1,1,1],
        [0,0,0,0,0],
        [1,1,1,1,1],
        [1,0,0,0,1],
        [1,0,0,0,1]
    ],
    "O": [
        [1,1,1,1,1],
        [1,0,0,0,1],
        [1,0,0,0,1],
        [1,0,0,0,1],
        [1,1,1,1,1]
    ],
    "P": [
        [1,1,1,1,1],
        [1,0,0,0,1],
        [1,1,1,1,1],
        [1,0,0,0,0],
        [1,0,0,0,0]
    ],
    "Q": [
        [1,1,1,1,1],
        [1,0,0,0,1],
        [1,0,0,0,1],
        [1,0,0,1,1],
        [1,1,1,1,1]
    ],
    "R": [
        [1,1,1,1,1],
        [1,0,0,0,1],
        [1,1,1,1,0],
        [1,0,0,0,1],
        [1,0,0,0,1]
    ],
    "S": [
        [1,1,1,1,1],
        [1,0,0,0,0],
        [1,1,1,1,1],
        [0,0,0,0,1],
        [1,1,1,1,1]
    ],
    "T": [
        [1,1,1,1,1],
        [0,0,1,0,0],
        [0,0,1,0,0],
        [0,0,1,0,0],
        [0,0,1,0,0]
    ],
    "U": [
        [1,0,0,0,1],
        [1,0,0,0,1],
        [1,0,0,0,1],
        [1,0,0,0,1],
        [0,1,1,1,0]
    ],
    "V": [
        [1,0,0,0,1],
        [1,0,0,0,1],
        [1,0,0,0,1],
        [1,0,0,0,1],
        [1,1,1,1,1]
    ],
    "W": [
        [1,0,0,1,0,0,1],
        [1,0,0,1,0,0,1],
        [1,0,0,1,0,0,1],
        [1,0,0,1,0,0,1],
        [1,1,1,1,1,1,1]
    ],
    "X": [
        [1,0,0,0,1],
        [0,1,0,1,0],
        [0,0,1,0,0],
        [0,1,0,1,0],
        [1,0,0,0,1]
    ],
    "Y": [
        [1,0,0,0,1],
        [1,0,0,0,1],
        [1,1,1,1,1],
        [0,0,1,0,0],
        [0,0,1,0,0]
    ],
    "Z": [
        [1,1,1,1,1],
        [0,0,0,0,1],
        [0,1,1,1,0],
        [1,0,0,0,0],
        [1,1,1,1,1]
    ],
    "0": [
        [1,1,1,1,1],
        [1,0,0,0,1],
        [1,0,0,0,1],
        [1,0,0,0,1],
        [1,1,1,1,1]
    ],
    "1": [
        [1,1,1,0,0],
        [0,0,1,0,0],
        [0,0,1,0,0],
        [0,0,1,0,0],
        [1,1,1,1,1]
    ],
    "2": [
        [1,1,1,1,1],
        [0,0,0,0,1],
        [1,1,1,1,1],
        [1,0,0,0,0],
        [1,1,1,1,1]
    ],
    "3": [
        [1,1,1,1,1],
        [0,0,0,0,1],
        [0,0,1,1,1],
        [0,0,0,0,1],
        [1,1,1,1,1]
    ],
    "4": [
        [1,0,0,0,1],
        [1,0,0,0,1],
        [1,1,1,1,1],
        [0,0,0,0,1],
        [0,0,0,0,1]
    ],
    "5": [
        [1,1,1,1,1],
        [1,0,0,0,0],
        [1,1,1,1,1],
        [0,0,0,0,1],
        [1,1,1,1,1]
    ],
    "6": [
        [1,1,1,1,1],
        [1,0,0,0,0],
        [1,1,1,1,1],
        [1,0,0,0,1],
        [1,1,1,1,1]
    ],
    "7": [
        [1,1,1,1,1],
        [1,0,0,0,1],
        [0,0,0,0,1],
        [0,0,0,0,1],
        [0,0,0,0,1]
    ],
    "8": [
        [1,1,1,1,1],
        [1,0,0,0,1],
        [1,1,1,1,1],
        [1,0,0,0,1],
        [1,1,1,1,1]
    ],
    "9": [
        [1,1,1,1,1],
        [1,0,0,0,1],
        [1,1,1,1,1],
        [0,0,0,0,1],
        [1,1,1,1,1]
    ],
    "+": [
        [0,0,1],
        [0,0,1],
        [1,1,1,1,1],
        [0,0,1],
        [0,0,1]
    ],
    "-": [
        [],
        [],
        [1,1,1,1,1],
        [],
        []
    ],
    "_": [
        [],
        [],
        [],
        [],
        [1,1,1,1,1]
    ],
    "(": [
        [0,1],
        [1],
        [1],
        [1],
        [0,1]
    ],
    ")": [
        [1],
        [0,1],
        [0,1],
        [0,1],
        [1]
    ],
    "{": [
        [0,1,1],
        [0,1],
        [1],
        [0,1],
        [0,1,1]
    ],
    "}": [
        [1,1],
        [0,1],
        [0,0,1],
        [0,1],
        [1,1]
    ],
    "[": [
        [1,1],
        [1],
        [1],
        [1],
        [1,1]
    ],
    "]": [
        [1,1],
        [0,1],
        [0,1],
        [0,1],
        [1,1]
    ],
    "=": [
        [],
        [1,1,1,1,1],
        [],
        [1,1,1,1,1],
        []
    ],
    "/": [
        [0,0,0,0,1],
        [0,0,0,1],
        [0,0,1],
        [0,1],
        [1]
    ],
    "\\": [
        [1],
        [0,1],
        [0,0,1],
        [0,0,0,1],
        [0,0,0,0,1]
    ],
    "%": [
        [1,0,0,0,1],
        [0,0,0,1],
        [0,0,1],
        [0,1],
        [1,0,0,0,1]
    ],
    ".": [
        [],
        [],
        [],
        [],
        [1]
    ],
    "*": [
        [1,0,1],
        [0,1],
        [1,0,1],
        [],
        []
    ],
    ":": [
        [],
        [1],
        [],
        [1],
        []
    ],
    ",": [
        [],
        [],
        [],
        [1],
        [1]
    ],
    ";": [
        [],
        [1],
        [],
        [1],
        [1]
    ],
    "!": [
        [1],
        [1],
        [1],
        [],
        [1]
    ],
    "¡": [
        [1],
        [],
        [1],
        [1],
        [1]
    ],
    "?": [
        [0,1,1,1],
        [1,0,0,0,1],
        [0,0,1,1],
        [],
        [0,0,1]
    ],
    "¿": [
        [0,0,1],
        [],
        [0,1,1],
        [1,0,0,0,1],
        [0,1,1,1]
    ],
    "\"":[
        [1,0,1],
        [1,0,1],
        [],
        [],
        []
    ],
    "<": [
        [0,0,1],
        [0,1],
        [1],
        [0,1],
        [0,0,1]
    ],
    ">": [
        [1],
        [0,1],
        [0,0,1],
        [0,1],
        [1]
    ],
    "'":[
        [1],
        [1],
        [],
        [],
        []
    ],
    "°": [
        [1,1,1],
        [1,0,1],
        [1,1,1],
        [],
        []
    ],
    "|": [
        [1],
        [1],
        [1],
        [1],
        [1]
    ],
    "♥": [
        [0,1,0,1],
        [1,1,1,1,1],
        [1,1,1,1,1],
        [0,1,1,1],
        [0,0,1]
    ],
    "#": [
      [0,1,0,1],
      [1,1,1,1,1],
      [0,1,0,1],
      [1,1,1,1,1],
      [0,1,0,1]
    ],
    "^": [
      [0,1],
      [1,0,1],
      [],
      [],
      []
    ],
    " ": [
        [0,0,0],
        [0,0,0],
        [0,0,0],
        [0,0,0],
        [0,0,0]
    ],
    "@": [
        [],
        [],
        [],
        [],
        []
    ]
  },
  "finalfantasy7x7": {
    "Tier": 3,
    "Disabled": false,
    "Name": "Final Fantasy 7px",
    "Height": 7,
    "A": [
      [0,0,1,1,1,0,0],
      [0,0,1,1,1,0,0],
      [0,0,1,0,1,0,0],
      [0,1,1,0,1,1,0],
      [0,1,1,1,1,1,0],
      [1,1,0,0,0,1,1],
      [1,1,0,0,0,1,1]
    ],
    "B": [
      [1,1,1,1,1,1,0],
      [1,1,0,0,0,1,1],
      [1,1,0,0,0,1,1],
      [1,1,1,1,1,1,0],
      [1,1,0,0,0,1,1],
      [1,1,0,0,0,1,1],
      [1,1,1,1,1,1,0]
    ],
    "C": [
      [0,1,1,1,1,1,0],
      [1,1,0,0,0,1,1],
      [1,1,0,0,0,1,1],
      [1,1,0,0,0,0,0],
      [1,1,0,0,0,1,1],
      [1,1,0,0,0,1,1],
      [0,1,1,1,1,1,0]
    ],
    "D": [
      [1,1,1,1,1,0,0],
      [1,1,0,0,1,1,0],
      [1,1,0,0,0,1,1],
      [1,1,0,0,0,1,1],
      [1,1,0,0,0,1,1],
      [1,1,0,0,1,1,0],
      [1,1,1,1,1,0,0]
    ],
    "E": [
      [1,1,1,1,1,1,1],
      [1,1,0,0,0,0,0],
      [1,1,0,0,0,1,0],
      [1,1,1,1,1,1,0],
      [1,1,0,0,0,1,0],
      [1,1,0,0,0,0,0],
      [1,1,1,1,1,1,1]
    ],
    "F": [
      [1,1,1,1,1,1,1],
      [1,1,0,0,0,0,0],
      [1,1,0,0,0,1,0],
      [1,1,1,1,1,1,0],
      [1,1,0,0,0,1,0],
      [1,1,0,0,0,0,0],
      [1,1,0,0,0,0,0]
    ],
    "G": [
      [0,1,1,1,1,1,0],
      [1,1,0,0,0,1,1],
      [1,1,0,0,0,0,0],
      [1,1,0,0,1,1,1],
      [1,1,0,0,0,0,1],
      [1,1,0,0,0,1,1],
      [0,1,1,1,1,1,0]
    ],
    "H": [
      [1,1,0,0,0,1,1],
      [1,1,0,0,0,1,1],
      [1,1,0,0,0,1,1],
      [1,1,1,1,1,1,1],
      [1,1,0,0,0,1,1],
      [1,1,0,0,0,1,1],
      [1,1,0,0,0,1,1]
    ],
    "I": [
      [1,1,1,1],
      [0,1,1,0],
      [0,1,1,0],
      [0,1,1,0],
      [0,1,1,0],
      [0,1,1,0],
      [1,1,1,1]
    ],
    "J": [
      [0,0,0,0,1,1,1],
      [0,0,0,0,0,1,1],
      [0,0,0,0,0,1,1],
      [0,0,0,0,0,1,1],
      [1,1,0,0,0,1,1],
      [1,1,0,0,0,1,1],
      [0,1,1,1,1,1,0]
    ],
    "K": [
      [1,1,0,0,0,1,1],
      [1,1,0,0,1,1,0],
      [1,1,0,1,1,0,0],
      [1,1,1,1,0,0,0],
      [1,1,0,1,1,0,0],
      [1,1,0,0,1,1,0],
      [1,1,0,0,0,1,1]
    ],
    "L": [
      [1,1,0,0,0,0,0],
      [1,1,0,0,0,0,0],
      [1,1,0,0,0,0,0],
      [1,1,0,0,0,0,0],
      [1,1,0,0,0,0,0],
      [1,1,0,0,0,0,1],
      [1,1,1,1,1,1,1]
    ],
    "M": [
      [1,1,0,0,0,1,1],
      [1,1,0,0,0,1,1],
      [1,1,1,0,1,1,1],
      [1,1,1,1,1,1,1],
      [1,1,0,1,0,1,1],
      [1,1,0,0,0,1,1],
      [1,1,0,0,0,1,1]
    ],
    "N": [
      [1,1,0,0,0,1,1],
      [1,1,0,0,0,1,1],
      [1,1,1,0,0,1,1],
      [1,1,1,1,0,1,1],
      [1,1,0,1,1,1,1],
      [1,1,0,0,1,1,1],
      [1,1,0,0,0,1,1]
    ],
    "Ñ": [
      [1,1,1,1,1,1,1],
      [0,0,0,0,0,0,0],
      [1,1,0,0,0,1,1],
      [1,1,1,0,0,1,1],
      [1,1,0,1,0,1,1],
      [1,1,0,0,1,1,1],
      [1,1,0,0,0,1,1]
    ],
    "O": [
      [0,1,1,1,1,1,0],
      [1,1,0,0,0,1,1],
      [1,1,0,0,0,1,1],
      [1,1,0,0,0,1,1],
      [1,1,0,0,0,1,1],
      [1,1,0,0,0,1,1],
      [0,1,1,1,1,1,0]
    ],
    "P": [
      [1,1,1,1,1,1,0],
      [1,1,0,0,0,1,1],
      [1,1,0,0,0,1,1],
      [1,1,0,0,0,1,1],
      [1,1,1,1,1,1,0],
      [1,1,0,0,0,0,0],
      [1,1,0,0,0,0,0]
    ],
    "Q": [
      [0,1,1,1,1,1,0],
      [1,1,0,0,0,1,1],
      [1,1,0,0,0,1,1],
      [1,1,0,0,0,1,1],
      [1,1,0,1,1,0,1],
      [1,1,0,0,1,1,0],
      [0,1,1,1,0,1,1]
    ],
    "R": [
      [1,1,1,1,1,1,0],
      [1,1,0,0,0,1,1],
      [1,1,0,0,0,1,1],
      [1,1,1,1,1,1,0],
      [1,1,0,1,1,0,0],
      [1,1,0,0,1,1,0],
      [1,1,0,0,0,1,1]
    ],
    "S": [
      [0,1,1,1,1,1,0],
      [1,1,0,0,0,1,1],
      [1,1,0,0,0,0,0],
      [0,1,1,1,1,1,0],
      [0,0,0,0,0,1,1],
      [1,1,0,0,0,1,1],
      [0,1,1,1,1,1,0]
    ],
    "T": [
      [1,1,1,1,1,1,1,1],
      [1,0,0,1,1,0,0,1],
      [0,0,0,1,1,0,0,0],
      [0,0,0,1,1,0,0,0],
      [0,0,0,1,1,0,0,0],
      [0,0,0,1,1,0,0,0],
      [0,0,1,1,1,1,0,0]
    ],
    "U": [
      [1,1,0,0,0,1,1],
      [1,1,0,0,0,1,1],
      [1,1,0,0,0,1,1],
      [1,1,0,0,0,1,1],
      [1,1,0,0,0,1,1],
      [1,1,0,0,0,1,1],
      [0,1,1,1,1,1,0]
    ],
    "V": [
      [1,1,0,0,0,1,1],
      [1,1,0,0,0,1,1],
      [0,1,0,0,0,1,0],
      [0,1,1,0,1,1,0],
      [0,1,1,0,1,1,0],
      [0,0,1,1,1,0,0],
      [0,0,1,1,1,0,0]
    ],
    "W": [
      [1,1,0,0,0,1,1],
      [1,1,0,0,0,1,1],
      [1,1,0,1,0,1,1],
      [1,1,0,1,0,1,1],
      [1,1,1,1,1,1,1],
      [1,1,1,0,1,1,1],
      [0,1,0,0,0,1,0]
    ],
    "X": [
      [1,0,0,0,0,0,1],
      [1,1,0,0,0,1,1],
      [0,1,1,0,1,1,0],
      [0,0,1,1,1,0,0],
      [0,0,1,1,1,0,0],
      [0,1,1,0,1,1,0],
      [1,1,0,0,0,1,1]
    ],
    "Y": [
      [1,1,0,0,0,0,1,1],
      [0,1,1,0,0,1,1,0],
      [0,0,1,1,1,1,0,0],
      [0,0,0,1,1,0,0,0],
      [0,0,0,1,1,0,0,0],
      [0,0,0,1,1,0,0,0],
      [0,0,1,1,1,1,0,0]
    ],
    "Z": [
      [1,1,1,1,1,1,1],
      [1,0,0,0,0,1,1],
      [0,0,0,0,1,1,0],
      [0,0,0,1,1,0,0],
      [0,0,1,1,0,0,0],
      [0,1,1,0,0,0,1],
      [1,1,1,1,1,1,1]
    ],
    "0": [
      [0,1,1,1,1,1,0],
      [1,1,0,0,0,1,1],
      [1,1,0,0,0,1,1],
      [1,1,0,0,0,1,1],
      [1,1,0,0,0,1,1],
      [1,1,0,0,0,1,1],
      [0,1,1,1,1,1,0]
    ],
    "1": [
      [0,1,1,0],
      [1,1,1,0],
      [0,1,1,0],
      [0,1,1,0],
      [0,1,1,0],
      [0,1,1,0],
      [1,1,1,1]
    ],
    "2": [
      [0,1,1,1,1,1,0],
      [1,1,0,0,0,1,1],
      [1,1,0,0,0,1,1],
      [0,0,0,0,1,1,0],
      [0,0,1,1,0,0,0],
      [0,1,1,0,0,0,0],
      [1,1,1,1,1,1,1]
    ],
    "3": [
      [0,1,1,1,1,1,0],
      [1,1,0,0,0,1,1],
      [1,1,0,0,0,1,1],
      [0,0,0,1,1,1,0],
      [1,1,0,0,0,1,1],
      [1,1,0,0,0,1,1],
      [0,1,1,1,1,1,0]
    ],
    "4": [
      [0,0,0,1,1,1,0],
      [0,0,1,1,1,1,0],
      [0,1,1,0,1,1,0],
      [0,1,0,0,1,1,0],
      [1,1,0,0,1,1,0],
      [1,1,1,1,1,1,1],
      [0,0,0,0,1,1,0]
    ],
    "5": [
      [1,1,1,1,1,1,1],
      [1,1,0,0,0,0,0],
      [1,1,1,1,1,1,0],
      [0,0,0,0,0,1,1],
      [0,0,0,0,0,1,1],
      [1,1,0,0,0,1,1],
      [0,1,1,1,1,1,0]
    ],
    "6": [
      [0,1,1,1,1,1,0],
      [1,1,0,0,0,1,1],
      [1,1,0,0,0,0,0],
      [1,1,1,1,1,1,0],
      [1,1,0,0,0,1,1],
      [1,1,0,0,0,1,1],
      [0,1,1,1,1,1,0]
    ],
    "7": [
      [1,1,1,1,1,1,1],
      [1,1,0,0,0,1,1],
      [1,1,0,0,0,1,1],
      [0,0,0,0,1,1,0],
      [0,0,0,1,1,0,0],
      [0,0,1,1,0,0,0],
      [0,0,1,1,0,0,0]
    ],
    "8": [
      [0,1,1,1,1,1,0],
      [1,1,0,0,0,1,1],
      [1,1,0,0,0,1,1],
      [0,1,1,1,1,1,0],
      [1,1,0,0,0,1,1],
      [1,1,0,0,0,1,1],
      [0,1,1,1,1,1,0]
    ],
    "9": [
      [0,1,1,1,1,1,0],
      [1,1,0,0,0,1,1],
      [1,1,0,0,0,1,1],
      [0,1,1,1,1,1,1],
      [0,0,0,0,0,1,1],
      [1,1,0,0,0,1,1],
      [0,1,1,1,1,1,0]
    ],
    "+": [
      [0,0,0,0,0],
      [0,0,1,0,0],
      [0,0,1,0,0],
      [1,1,1,1,1],
      [0,0,1,0,0],
      [0,0,1,0,0],
      [0,0,0,0,0]
    ],
    "-": [
      [0,0,0,0],
      [0,0,0,0],
      [0,0,0,0],
      [1,1,1,1],
      [0,0,0,0],
      [0,0,0,0],
      [0,0,0,0]
    ],
    "_": [
      [0,0,0,0],
      [0,0,0,0],
      [0,0,0,0],
      [0,0,0,0],
      [0,0,0,0],
      [0,0,0,0],
      [1,1,1,1]
    ],
    "(": [
      [0,0,1],
      [0,1,0],
      [1,0,0],
      [1,0,0],
      [1,0,0],
      [0,1,0],
      [0,0,1]
    ],
    ")": [
      [1,0,0],
      [0,1,0],
      [0,0,1],
      [0,0,1],
      [0,0,1],
      [0,1,0],
      [1,0,0]
    ],
    "{": [
      [0,1,1,1],
      [0,1,0,0],
      [0,1,0,0],
      [1,1,0,0],
      [0,1,0,0],
      [0,1,0,0],
      [0,1,1,1]
    ],
    "}": [
      [1,1,1,0],
      [0,0,1,0],
      [0,0,1,0],
      [0,0,1,1],
      [0,0,1,0],
      [0,0,1,0],
      [1,1,1,0]
    ],
    "[": [
      [0,1,1],
      [1,0,0],
      [1,0,0],
      [1,0,0],
      [1,0,0],
      [1,0,0],
      [0,1,1]
    ],
    "]": [
      [1,1,0],
      [0,0,1],
      [0,0,1],
      [0,0,1],
      [0,0,1],
      [0,0,1],
      [1,1,0]
    ],
    "=": [
      [0,0,0,0],
      [0,0,0,0],
      [1,1,1,1],
      [0,0,0,0],
      [1,1,1,1],
      [0,0,0,0],
      [0,0,0,0]
    ],
    "/": [
      [0,0,0,0,1],
      [0,0,0,1,0],
      [0,0,0,1,0],
      [0,0,1,0,0],
      [0,1,0,0,0],
      [0,1,0,0,0],
      [1,0,0,0,0]
    ],
    "\\": [
      [1,0,0,0,0],
      [0,1,0,0,0],
      [0,1,0,0,0],
      [0,0,1,0,0],
      [0,0,0,1,0],
      [0,0,0,1,0],
      [0,0,0,0,1]
    ],
    "%": [
      [1,1,0,0,1],
      [1,1,0,1,0],
      [0,0,0,1,0],
      [0,0,1,0,0],
      [0,1,0,0,0],
      [0,1,0,1,1],
      [1,0,0,1,1]
    ],
    ".": [
      [0,0],
      [0,0],
      [0,0],
      [0,0],
      [0,0],
      [1,1],
      [1,1]
    ],
    "*": [
      [0,1,0],
      [1,1,1],
      [0,1,0],
      [1,0,1],
      [0,0,0],
      [0,0,0],
      [0,0,0]
    ],
    ":": [
      [0,0],
      [1,1],
      [1,1],
      [0,0],
      [1,1],
      [1,1],
      [0,0]
    ],
    ";": [
      [0,0],
      [0,0],
      [0,0],
      [1,1],
      [1,1],
      [0,1],
      [1,0]
    ],
    "!": [
      [1,1],
      [1,1],
      [1,1],
      [1,1],
      [1,1],
      [0,0],
      [1,1]
    ],
    "¡": [
      [1,1],
      [0,0],
      [1,1],
      [1,1],
      [1,1],
      [1,1],
      [1,1]
    ],
    "?": [
      [0,1,1,1,0],
      [1,0,0,0,1],
      [1,0,0,0,1],
      [0,0,0,1,0],
      [0,0,1,0,0],
      [0,0,0,0,0],
      [0,0,1,0,0]
    ],
    "¿": [
      [0,0,1,0,0],
      [0,0,0,0,0],
      [0,0,1,0,0],
      [0,1,0,0,0],
      [1,0,0,0,1],
      [1,0,0,0,1],
      [0,1,1,1,0]
    ],
    "\"": [
      [1,1,0,1,1],
      [1,1,0,1,1],
      [0,1,0,0,1],
      [1,0,0,1,0],
      [0,0,0,0,0],
      [0,0,0,0,0],
      [0,0,0,0,0]
    ],
    "<": [
      [0,0,0,1],
      [0,0,1,0],
      [0,1,0,0],
      [1,0,0,0],
      [0,1,0,0],
      [0,0,1,0],
      [0,0,0,1]
    ],
    ">": [
      [1,0,0,0],
      [0,1,0,0],
      [0,0,1,0],
      [0,0,0,1],
      [0,0,1,0],
      [0,1,0,0],
      [1,0,0,0]
    ],
    "'": [
        [1,1],
        [1,1],
        [0,1],
        [1,0],
        [0,0],
        [0,0],
        [0,0]
    ],
    "°": [
        [0,1,1,0],
        [1,0,0,1],
        [1,0,0,1],
        [0,1,1,0],
        [0,0,0,0],
        [0,0,0,0],
        [0,0,0,0]
    ],
    "|": [
        [1],
        [1],
        [1],
        [1],
        [1],
        [1],
        [1]
    ],
    "♥": [
        [0,1,1,0,1,1,0],
        [1,1,1,1,1,1,1],
        [1,1,1,1,1,1,1],
        [1,1,1,1,1,1,1],
        [0,1,1,1,1,1,0],
        [0,0,1,1,1,0,0],
        [0,0,0,1,0,0,0]
    ],
    "#": [
        [0,0,0,0,0],
        [0,1,0,1,0],
        [1,1,1,1,1],
        [0,1,0,1,0],
        [1,1,1,1,1],
        [0,1,0,1,0],
        [0,0,0,0,0]
    ],
    " ": [
        [0,0,0],
        [0,0,0],
        [0,0,0],
        [0,0,0],
        [0,0,0],
        [0,0,0],
        [0,0,0]
    ],
    "@": [
        [],
        [],
        [],
        [],
        [],
        [],
        []
    ]
  },
  "minecraft8x9": {
    "Tier": 3,
    "Disabled": false,
    "Name": "Minecraft 8px",
    "Height": 8,
    "A": [
      [1,1,1,1,1,1,1],
      [1,1,1,1,1,1,1],
      [1,1,1,0,1,1,1],
      [1,1,1,0,1,1,1],
      [1,1,1,1,1,1,1],
      [1,1,1,1,1,1,1],
      [1,1,1,0,1,1,1],
      [1,1,1,0,1,1,1]
    ],
    "B": [
      [1,1,1,1,1,1,0],
      [1,1,1,1,1,1,1],
      [1,1,1,0,1,1,1],
      [1,1,1,1,1,1,0],
      [1,1,1,1,1,1,1],
      [1,1,1,0,1,1,1],
      [1,1,1,1,1,1,1],
      [1,1,1,1,1,1,0]
    ],
    "C": [
      [0,1,1,1,1,1,1],
      [1,1,1,1,1,1,1],
      [1,1,1,1,1,1,1],
      [1,1,1,0,0,0,0],
      [1,1,1,0,0,0,0],
      [1,1,1,1,1,1,1],
      [1,1,1,1,1,1,1],
      [0,1,1,1,1,1,1]
    ],
    "D": [
      [1,1,1,1,1,1,0],
      [1,1,1,1,1,1,1],
      [1,1,1,0,1,1,1],
      [1,1,1,0,1,1,1],
      [1,1,1,0,1,1,1],
      [1,1,1,0,1,1,1],
      [1,1,1,1,1,1,1],
      [1,1,1,1,1,1,0]
    ],
    "E": [
      [1,1,1,1,1,1,1],
      [1,1,1,1,1,1,1],
      [1,1,1,0,0,0,0],
      [1,1,1,1,1,1,1],
      [1,1,1,1,1,1,1],
      [1,1,1,0,0,0,0],
      [1,1,1,1,1,1,1],
      [1,1,1,1,1,1,1]
    ],
    "F": [
      [1,1,1,1,1,1,1],
      [1,1,1,1,1,1,1],
      [1,1,1,0,0,0,0],
      [1,1,1,1,1,1,1],
      [1,1,1,1,1,1,1],
      [1,1,1,0,0,0,0],
      [1,1,1,0,0,0,0],
      [1,1,1,0,0,0,0]
    ],
    "G": [
      [0,1,1,1,1,1,1],
      [1,1,1,1,1,1,1],
      [1,1,1,0,0,0,0],
      [1,1,1,0,1,1,1],
      [1,1,1,0,1,1,1],
      [1,1,1,0,0,1,1],
      [1,1,1,1,1,1,1],
      [0,1,1,1,1,1,1]
    ],
    "H": [
      [1,1,1,0,1,1,1],
      [1,1,1,0,1,1,1],
      [1,1,1,0,1,1,1],
      [1,1,1,1,1,1,1],
      [1,1,1,1,1,1,1],
      [1,1,1,0,1,1,1],
      [1,1,1,0,1,1,1],
      [1,1,1,0,1,1,1]
    ],
    "I": [
      [1,1,1],
      [1,1,1],
      [1,1,1],
      [1,1,1],
      [1,1,1],
      [1,1,1],
      [1,1,1],
      [1,1,1]
    ],
    "J": [
      [0,1,1,1,1,1,1],
      [0,1,1,1,1,1,1],
      [0,0,0,0,1,1,1],
      [0,0,0,0,1,1,1],
      [0,0,0,0,1,1,1],
      [0,0,0,0,1,1,1],
      [1,1,1,1,1,1,1],
      [1,1,1,1,1,1,1]
    ],
    "K": [
      [1,1,0,0,0,1,1],
      [1,1,0,0,1,1,1],
      [1,1,0,1,1,1,0],
      [1,1,1,1,1,0,0],
      [1,1,1,1,1,1,0],
      [1,1,0,1,1,1,1],
      [1,1,0,0,1,1,1],
      [1,1,0,0,0,1,1]
    ],
    "L": [
      [1,1,1,0,0,0,0],
      [1,1,1,0,0,0,0],
      [1,1,1,0,0,0,0],
      [1,1,1,0,0,0,0],
      [1,1,1,0,0,0,0],
      [1,1,1,0,0,0,0],
      [1,1,1,1,1,1,1],
      [1,1,1,1,1,1,1]
    ],
    "M": [
      [1,1,0,0,0,0,1,1],
      [1,1,1,0,0,1,1,1],
      [1,1,1,1,1,1,1,1],
      [1,1,1,1,1,1,1,1],
      [1,1,1,1,1,1,1,1],
      [1,1,0,1,1,0,1,1],
      [1,1,0,0,0,0,1,1],
      [1,1,0,0,0,0,1,1]
    ],
    "N": [
      [1,1,0,0,0,1,1],
      [1,1,1,0,0,1,1],
      [1,1,1,1,0,1,1],
      [1,1,1,1,1,1,1],
      [1,1,1,1,1,1,1],
      [1,1,0,1,1,1,1],
      [1,1,0,0,1,1,1],
      [1,1,0,0,0,1,1]
    ],
    "Ñ": [
      [1,1,1,1,1,1,1],
      [0,0,0,0,0,0,0],
      [1,1,0,0,0,1,1],
      [1,1,1,0,0,1,1],
      [1,1,1,1,0,1,1],
      [1,1,0,1,1,1,1],
      [1,1,0,0,1,1,1],
      [1,1,0,0,0,1,1]
    ],
    "O": [
      [0,1,1,1,1,1,0],
      [1,1,1,1,1,1,1],
      [1,1,1,1,1,1,1],
      [1,1,1,0,1,1,1],
      [1,1,1,0,1,1,1],
      [1,1,1,1,1,1,1],
      [1,1,1,1,1,1,1],
      [0,1,1,1,1,1,0]
    ],
    "P": [
      [1,1,1,1,1,1,1],
      [1,1,1,1,1,1,1],
      [1,1,1,0,1,1,1],
      [1,1,1,1,1,1,1],
      [1,1,1,1,1,1,1],
      [1,1,1,0,0,0,0],
      [1,1,1,0,0,0,0],
      [1,1,1,0,0,0,0]
    ],
    "Q": [
      [0,1,1,1,1,1,0],
      [1,1,1,1,1,1,1],
      [1,1,0,0,0,1,1],
      [1,1,0,0,0,1,1],
      [1,1,0,0,0,1,1],
      [1,1,0,0,1,1,1],
      [1,1,1,1,1,1,0],
      [0,1,1,1,1,0,1]
    ],
    "R": [
      [1,1,1,1,1,1,1],
      [1,1,1,1,1,1,1],
      [1,1,1,0,0,1,1],
      [1,1,1,1,1,1,0],
      [1,1,1,1,1,1,1],
      [1,1,1,0,0,1,1],
      [1,1,1,0,0,1,1],
      [1,1,1,0,0,1,1]
    ],
    "S": [
      [1,1,1,1,1,1,1],
      [1,1,1,1,1,1,1],
      [1,1,1,0,0,0,0],
      [1,1,1,1,1,1,1],
      [1,1,1,1,1,1,1],
      [0,0,0,0,1,1,1],
      [1,1,1,1,1,1,1],
      [1,1,1,1,1,1,1]
    ],
    "T": [
      [1,1,1,1,1,1,1],
      [1,1,1,1,1,1,1],
      [0,0,1,1,1,0,0],
      [0,0,1,1,1,0,0],
      [0,0,1,1,1,0,0],
      [0,0,1,1,1,0,0],
      [0,0,1,1,1,0,0],
      [0,0,1,1,1,0,0]
    ],
    "U": [
      [1,1,1,0,1,1,1],
      [1,1,1,0,1,1,1],
      [1,1,1,0,1,1,1],
      [1,1,1,0,1,1,1],
      [1,1,1,0,1,1,1],
      [1,1,1,0,1,1,1],
      [1,1,1,0,1,1,1],
      [1,1,1,1,1,1,1]
    ],
    "V": [
      [1,1,1,0,1,1,1],
      [1,1,1,0,1,1,1],
      [1,1,1,0,1,1,1],
      [1,1,1,0,1,1,1],
      [1,1,1,0,1,1,1],
      [1,1,1,0,1,1,1],
      [0,1,1,1,1,1,0],
      [0,0,1,1,1,0,0]
    ],
    "W": [
      [1,1,0,0,0,1,1],
      [1,1,0,0,0,1,1],
      [1,1,0,0,0,1,1],
      [1,1,0,1,0,1,1],
      [1,1,1,1,1,1,1],
      [1,1,1,1,1,1,1],
      [1,1,1,0,1,1,1],
      [1,1,0,0,0,1,1]
    ],
    "X": [
      [1,1,0,0,0,1,1],
      [1,1,1,0,1,1,1],
      [0,1,1,1,1,1,0],
      [0,0,1,1,1,0,0],
      [0,0,1,1,1,0,0],
      [0,1,1,1,1,1,0],
      [1,1,1,0,1,1,1],
      [1,1,0,0,0,1,1]
    ],
    "Y": [
      [1,1,1,0,1,1,1],
      [1,1,1,0,1,1,1],
      [1,1,1,0,1,1,1],
      [1,1,1,0,1,1,1],
      [1,1,1,0,1,1,1],
      [0,1,1,1,1,1,0],
      [0,0,1,1,1,0,0],
      [0,0,1,1,1,0,0]
    ],
    "Z": [
      [1,1,1,1,1,1,1],
      [1,1,1,1,1,1,1],
      [0,0,0,1,1,1,1],
      [0,0,1,1,1,1,0],
      [0,1,1,1,1,0,0],
      [1,1,1,0,0,0,0],
      [1,1,1,1,1,1,1],
      [1,1,1,1,1,1,1]
    ],
    "0": [
      [0,1,1,1,1,1,0],
      [1,1,1,1,1,1,1],
      [1,1,0,0,0,1,1],
      [1,1,0,1,1,1,1],
      [1,1,1,1,0,1,1],
      [1,1,0,0,0,1,1],
      [1,1,1,1,1,1,1],
      [0,1,1,1,1,1,0]
    ],
    "1": [
      [0,0,1,1,1],
      [0,1,1,1,1],
      [1,1,1,1,1],
      [1,1,1,1,1],
      [0,0,1,1,1],
      [0,0,1,1,1],
      [0,0,1,1,1],
      [0,0,1,1,1]
    ],
    "2": [
      [0,1,1,1,1,1,0],
      [1,1,1,1,1,1,1],
      [1,1,0,0,1,1,1],
      [0,0,0,1,1,1,0],
      [0,0,1,1,1,0,0],
      [0,1,1,1,0,0,0],
      [1,1,1,1,1,1,1],
      [1,1,1,1,1,1,1]
    ],
    "3": [
      [1,1,1,1,1,1,0],
      [1,1,1,1,1,1,1],
      [0,0,0,0,0,1,1],
      [1,1,1,1,1,1,0],
      [1,1,1,1,1,1,0],
      [0,0,0,0,0,1,1],
      [1,1,1,1,1,1,1],
      [1,1,1,1,1,1,0]
    ],
    "4": [
      [0,0,0,1,1,1,0],
      [0,0,1,1,1,1,0],
      [0,1,1,1,1,1,0],
      [1,1,1,0,1,1,0],
      [1,1,1,1,1,1,1],
      [1,1,1,1,1,1,1],
      [0,0,0,0,1,1,0],
      [0,0,0,0,1,1,0]
    ],
    "5": [
      [1,1,1,1,1,1,1],
      [1,1,1,1,1,1,1],
      [1,1,0,0,0,0,0],
      [1,1,1,1,1,1,0],
      [0,1,1,1,1,1,1],
      [0,0,0,0,1,1,1],
      [1,1,1,1,1,1,1],
      [1,1,1,1,1,1,0]
    ],
    "6": [
      [0,1,1,1,1,1,1],
      [1,1,1,1,1,1,1],
      [1,1,0,0,0,0,0],
      [1,1,1,1,1,1,0],
      [1,1,1,1,1,1,1],
      [1,1,0,0,0,1,1],
      [1,1,1,1,1,1,1],
      [0,1,1,1,1,1,0]
    ],
    "7": [
      [1,1,1,1,1,1,1],
      [1,1,1,1,1,1,1],
      [0,0,0,0,1,1,1],
      [0,0,0,1,1,1,0],
      [0,0,1,1,1,0,0],
      [0,0,1,1,0,0,0],
      [0,0,1,1,0,0,0],
      [0,0,1,1,0,0,0]
    ],
    "8": [
      [0,1,1,1,1,1,0],
      [1,1,1,1,1,1,1],
      [1,1,1,0,1,1,1],
      [0,1,1,1,1,1,0],
      [1,1,1,1,1,1,1],
      [1,1,1,0,1,1,1],
      [1,1,1,1,1,1,1],
      [0,1,1,1,1,1,0]
    ],
    "9": [
      [0,1,1,1,1,1,0],
      [1,1,1,1,1,1,1],
      [1,1,0,0,0,1,1],
      [1,1,1,1,1,1,1],
      [0,1,1,1,1,1,1],
      [0,0,0,0,0,1,1],
      [1,1,1,1,1,1,1],
      [1,1,1,1,1,1,0]
    ],
    "+": [
      [0,0,0,0,0,0],
      [0,0,1,1,0,0],
      [0,0,1,1,0,0],
      [1,1,1,1,1,1],
      [1,1,1,1,1,1],
      [0,0,1,1,0,0],
      [0,0,1,1,0,0],
      [0,0,0,0,0,0]
    ],
    "-": [
      [0,0,0,0,0,0,0],
      [0,0,0,0,0,0,0],
      [0,0,0,0,0,0,0],
      [1,1,1,1,1,1,1],
      [1,1,1,1,1,1,1],
      [0,0,0,0,0,0,0],
      [0,0,0,0,0,0,0],
      [0,0,0,0,0,0,0]
    ],
    "_": [
      [0,0,0,0,0,0,0],
      [0,0,0,0,0,0,0],
      [0,0,0,0,0,0,0],
      [0,0,0,0,0,0,0],
      [0,0,0,0,0,0,0],
      [0,0,0,0,0,0,0],
      [1,1,1,1,1,1,1],
      [1,1,1,1,1,1,1]
    ],
    "(": [
      [0,0,1,1],
      [0,1,1,0],
      [1,1,0,0],
      [1,1,0,0],
      [1,1,0,0],
      [1,1,0,0],
      [0,1,1,0],
      [0,0,1,1]
    ],
    ")": [
      [1,1,0,0],
      [0,1,1,0],
      [0,0,1,1],
      [0,0,1,1],
      [0,0,1,1],
      [0,0,1,1],
      [0,1,1,0],
      [1,1,0,0]
    ],
    "{": [
      [0,1,1,1,1],
      [0,1,1,0,0],
      [0,1,1,0,0],
      [1,1,0,0,0],
      [1,1,0,0,0],
      [0,1,1,0,0],
      [0,1,1,0,0],
      [0,1,1,1,1]
    ],
    "}": [
      [0,0,1,1,1,1,0],
      [0,0,0,0,1,1,0],
      [0,0,0,0,1,1,0],
      [0,0,0,0,0,1,1],
      [0,0,0,0,0,1,1],
      [0,0,0,0,1,1,0],
      [0,0,0,0,1,1,0],
      [0,0,1,1,1,1,0]
    ],
    "[": [
      [1,1,1,1],
      [1,1,0,0],
      [1,1,0,0],
      [1,1,0,0],
      [1,1,0,0],
      [1,1,0,0],
      [1,1,0,0],
      [1,1,1,1]
    ],
    "]": [
      [1,1,1,1],
      [0,0,1,1],
      [0,0,1,1],
      [0,0,1,1],
      [0,0,1,1],
      [0,0,1,1],
      [0,0,1,1],
      [1,1,1,1]
    ],
    "=": [
      [0,0,0,0,0,0,0],
      [0,0,0,0,0,0,0],
      [1,1,1,1,1,1,1],
      [1,1,1,1,1,1,1],
      [0,0,0,0,0,0,0],
      [1,1,1,1,1,1,1],
      [1,1,1,1,1,1,1],
      [0,0,0,0,0,0,0]
    ],
    "/": [
      [0,0,0,0,0,1,1],
      [0,0,0,0,0,1,1],
      [0,0,0,0,1,1,0],
      [0,0,0,1,1,0,0],
      [0,0,1,1,0,0,0],
      [0,1,1,0,0,0,0],
      [1,1,0,0,0,0,0],
      [1,1,0,0,0,0,0]
    ],
    "\\": [
      [1,1,0,0,0,0,0],
      [1,1,0,0,0,0,0],
      [0,1,1,0,0,0,0],
      [0,0,1,1,0,0,0],
      [0,0,0,1,1,0,0],
      [0,0,0,0,1,1,0],
      [0,0,0,0,0,1,1],
      [0,0,0,0,0,1,1]
    ],
    "%": [
      [1,1,0,0,0,1,1],
      [1,1,0,0,0,1,1],
      [0,0,0,0,1,1,0],
      [0,0,0,1,1,0,0],
      [0,0,1,1,0,0,0],
      [0,1,1,0,0,0,0],
      [1,1,0,0,0,1,1],
      [1,1,0,0,0,1,1]
    ],
    ".": [
      [0,0],
      [0,0],
      [0,0],
      [0,0],
      [0,0],
      [0,0],
      [1,1],
      [1,1]
    ],
    "*": [
      [1,0,1,0,1],
      [0,1,1,1,0],
      [1,1,1,1,1],
      [0,1,1,1,0],
      [1,0,1,0,1],
      [0,0,0,0,0],
      [0,0,0,0,0],
      [0,0,0,0,0]
    ],
    ":": [
      [0,0],
      [0,0],
      [1,1],
      [1,1],
      [0,0],
      [1,1],
      [1,1],
      [0,0]
    ],
    ";": [
      [0,0],
      [0,0],
      [0,0],
      [1,1],
      [0,0],
      [1,1],
      [1,1],
      [0,1]
    ],
    "!": [
      [1,1],
      [1,1],
      [1,1],
      [1,1],
      [1,1],
      [0,0],
      [1,1],
      [1,1]
    ],
    "¡": [
      [1,1],
      [1,1],
      [0,0],
      [1,1],
      [1,1],
      [1,1],
      [1,1],
      [1,1]
    ],
    "?": [
      [0,1,1,1,1,1,0],
      [1,1,0,0,0,1,1],
      [1,1,0,0,0,1,1],
      [0,0,0,1,1,1,0],
      [0,0,1,1,1,0,0],
      [0,0,1,1,1,0,0],
      [0,0,0,0,0,0,0],
      [0,0,1,1,1,0,0]
    ],
    "¿": [
      [0,0,1,1,1,0,0],
      [0,0,0,0,0,0,0],
      [0,0,1,1,1,0,0],
      [0,0,1,1,1,0,0],
      [0,1,1,1,0,0,0],
      [1,1,0,0,0,1,1],
      [1,1,0,0,0,1,1],
      [0,1,1,1,1,1,0]
    ],
    "\"": [
      [1,1,0,1,1],
      [1,1,0,1,1],
      [1,1,0,1,1],
      [0,0,0,0,0],
      [0,0,0,0,0],
      [0,0,0,0,0],
      [0,0,0,0,0],
      [0,0,0,0,0]
    ],
    "<": [
      [0,0,0,1,1],
      [0,0,1,1,0],
      [0,1,1,0,0],
      [1,1,0,0,0],
      [1,1,0,0,0],
      [0,1,1,0,0],
      [0,0,1,1,0],
      [0,0,0,1,1]
    ],
    ">": [
      [1,1,0,0,0],
      [0,1,1,0,0],
      [0,0,1,1,0],
      [0,0,0,1,1],
      [0,0,0,1,1],
      [0,0,1,1,0],
      [0,1,1,0,0],
      [1,1,0,0,0]
    ],
    "'": [
      [1,1],
      [1,1],
      [1,1],
      [0,0],
      [0,0],
      [0,0],
      [0,0],
      [0,0]
    ],
    "°": [
      [0,1,1,0],
      [1,0,0,1],
      [1,0,0,1],
      [0,1,1,0],
      [0,0,0,0],
      [0,0,0,0],
      [0,0,0,0],
      [0,0,0,0]
    ],
    "|": [
      [1,1],
      [1,1],
      [1,1],
      [1,1],
      [1,1],
      [1,1],
      [1,1],
      [1,1]
    ],
    "♥": [
      [0,1,1,0,0,0,1,1,0],
      [1,1,1,1,0,1,1,1,1],
      [1,1,1,1,1,1,1,1,1],
      [1,1,1,1,1,1,1,1,1],
      [0,1,1,1,1,1,1,1,0],
      [0,0,1,1,1,1,1,0,0],
      [0,0,0,1,1,1,0,0,0],
      [0,0,0,0,1,0,0,0,0]
    ],
    "#": [
      [0,1,1,0,1,1,0],
      [0,1,1,0,1,1,0],
      [1,1,1,1,1,1,1],
      [1,1,1,1,1,1,1],
      [0,1,1,0,1,1,0],
      [1,1,1,1,1,1,1],
      [1,1,1,1,1,1,1],
      [0,1,1,0,1,1,0]
    ],
    " ": [
      [0,0,0],
      [0,0,0],
      [0,0,0],
      [0,0,0],
      [0,0,0],
      [0,0,0],
      [0,0,0],
      [0,0,0]
    ],
    "@": [
      [],
      [],
      [],
      [],
      [],
      [],
      [],
      []
    ]
  }
}
// abcdefghijklmnopqrstuvwxyz0123456789+
const fonts = {
  "accent": {
    "name": "Accent",
    "processed": {},
    "data": {
      tosearch:"ABCDEFGHIJKLMNÑOPQRSTUVWXYZabcdefghijklmnñopqrstuvwxyz0123456789".split(""),
      toreplace:"ĀBÇÐÊFǴĦÎĴĶĿMŇήÖPQŘŞŢŬVŴXŸƵābčďéfǥĥɨĵķłmņŇǒpqřşŧùvŵxŷž⁰¹²³⁴⁵⁶⁷⁸⁹".split("")
    }
  },
  "big": {
    "name": "Big",
    "processed": {},
    "data": {
      tosearch:"ABCDEFGHIJKLMNÑOPQRSTUVWXYZabcdefghijklmnñopqrstuvwxyz0123456789".split(""),
      toreplace:"ᗩᗷᑕᗪEᖴGᕼIᒍKᒪᗰᑎÑOᑭᑫᖇᔕTᑌᐯᗯ᙭YᘔᗩᗷᑕᗪEᖴGᕼIᒍKᒪᗰᑎñOᑭᑫᖇᔕTᑌᐯᗯ᙭Yᘔ0123456789".split("")
    }
  },
  "bubble": {
    "name": "Bubble",
    "processed": {},
    "data": {
      tosearch: "ABCDEFGHIJKLMNÑOPQRSTUVWXYZabcdefghijklmnñopqrstuvwxyz0123456789".split(""),
      toreplace:"ⒶⒷⒸⒹⒺⒻⒼⒽⒾⒿⓀⓁⓂⓃⓃⓄⓅⓆⓇⓈⓉⓊⓋⓌⓍⓎⓏⓐⓑⓒⓓⓔⓕⓖⓗⓘⓙⓚⓛⓜⓝⓝⓞⓟⓠⓡⓢⓣⓤⓥⓦⓧⓨⓩ⓪①②③④⑤⑥⑦⑧⑨".split("")
    }
  },
  "currency": {
    "name": "Currency",
    "processed": {},
    "data": {
      tosearch:"ABCDEFGHIJKLMNÑOPQRSTUVWXYZabcdefghijklmnñopqrstuvwxyz0123456789".split(""),
      toreplace:"₳฿₵ĐɆ₣₲ⱧłJ₭Ⱡ₥₦ÑØ₱QⱤ₴₮ɄV₩ӾɎⱫ₳฿₵ĐɆ₣₲ⱧłJ₭Ⱡ₥₦ñØ₱QⱤ₴₮ɄV₩ӾɎⱫ0123456789".split("")
    }
  },
  "cursed": {
    "name": "Cursed",
    "processed": {},
    "data": {
      tosearch:"ABCDEFGHIJKLMNÑOPQRSTUVWXYZabcdefghijklmnñopqrstuvwxyz0123456789".split(""),
      toreplace:"ԹՅՇԺȝԲԳɧɿʝƙʅʍՌՌԾρφՐՏԵՄעաՃՎՀԹՅՇԺȝԲԳɧɿʝƙʅʍՌՌԾρφՐՏԵՄעաՃՎՀ0123456789".split("")
    }
  },
  "elegant": {
    "name": "Elegant",
    "processed": {},
    "data": {
      tosearch:"ABCDEFGHIJKLMNÑOPQRSTUVWXYZabcdefghijklmnñopqrstuvwxyz0123456789".split(""),
      toreplace:"ąɓƈđε∱ɠɧïʆҡℓɱŋñσþҩŗşŧų√щхγẕąɓƈđε∱ɠɧïʆҡℓɱŋñσþҩŗşŧų√щхγẕ0123456789".split("")
    }
  },
  "greek": {
    "name": "Greek",
    "processed": {},
    "data": {
      tosearch:"ABCDEFGHIJKLMNÑOPQRSTUVWXYZabcdefghijklmnñopqrstuvwxyz0123456789".split(""),
      toreplace:"αႦƈԃҽϝɠԋιʝƙʅɱɳñσρϙɾʂƚυʋɯxყȥαႦƈԃҽϝɠԋιʝƙʅɱɳñσρϙɾʂƚυʋɯxყȥ0123456789".split("")
    }
  },
  "knight": {
    "name": "Knight",
    "processed": {},
    "data": {
      tosearch:"ABCDEFGHIJKLMNÑOPQRSTUVWXYZabcdefghijklmnñopqrstuvwxyz0123456789".split(""),
      toreplace:"ḀḃḉḊḕḟḠḧḭjḲḶṁṆÑṏṖqṙṠṮṳṼẇẌẏẒḀḃḉḊḕḟḠḧḭjḲḶṁṆñṏṖqṙṠṮṳṼẇẌẏẒ0123456789".split("")
    }
  },
  "krypto": {
    "name": "Krypto",
    "processed": {},
    "data": {
      tosearch:"ABCDEFGHIJKLMNÑOPQRSTUVWXYZabcdefghijklmnñopqrstuvwxyz0123456789".split(""),
      toreplace:"คც८ძ૯Բ૭ҺɿʆқՆɱՈÑ૦ƿҩՐς੮υ౮ω૪עઽคც८ძ૯Բ૭ҺɿʆқՆɱՈՈ૦ƿҩՐς੮υ౮ω૪עઽ0123456789".split("")
    }
  },
  "parenthesis": {
    "name": "Parenthesis",
    "processed": {},
    "data": {
      tosearch:"ABCDEFGHIJKLMNÑOPQRSTUVWXYZabcdefghijklmnñopqrstuvwxyz0123456789".split(""),
      toreplace:"⒜⒝⒞⒟⒠⒡⒢⒣⒤⒥⒦⒧⒨⒩⒩⒪⒫⒬⒭⒮⒯⒰⒱⒲⒳⒴⒵⒜⒝⒞⒟⒠⒡⒢⒣⒤⒥⒦⒧⒨⒩⒩⒪⒫⒬⒭⒮⒯⒰⒱⒲⒳⒴⒵⒪⑴⑵⑶⑷⑸⑹⑺⑻⑼".split("")
    }
  },
  "random": {
    "name": "Random",
    "processed": {},
    "data": {
      tosearch:"ABCDEFGHIJKLMNÑOPQRSTUVWXYZabcdefghijklmnñopqrstuvwxyz0123456789".split(""),
      toreplace:"ᏗᏰፈᎴᏋᎦᎶᏂᎥᏠᏦᏝᎷᏁÑᎧᎮᎤᏒᏕᏖᏬᏉᏇጀᎩፚᏗᏰፈᎴᏋᎦᎶᏂᎥᏠᏦᏝᎷᏁñᎧᎮᎤᏒᏕᏖᏬᏉᏇጀᎩፚ0123456789".split("")
    }
  },
  "small-caps": {
    "name": "Small caps 💎",
    "before": function(s) {
      return s.toLowerCase();
    },
    "processed": {},
    "data": {
      tosearch:"abcdefghijklmnñopqrstuvwxyzqæƀðʒǝɠɨłꟽɯœɔȣꝵʉγλπρψ0123456789-+".split(""),
      toreplace:"ᴀʙᴄᴅᴇғɢʜɪᴊᴋʟᴍɴñᴏᴘǫʀsᴛᴜᴠᴡxʏᴢǫᴁᴃᴆᴣⱻʛᵻᴌꟺꟺɶᴐᴕꝶᵾᴦᴧᴨᴩᴪ₀₁₂₃₄₅₆₇₈₉₋₊".split("")
    }
  },
  "spaced": {
    "name": "Spaced",
    "processed": {},
    "data": {
      tosearch:"ABCDEFGHIJKLMNÑOPQRSTUVWXYZabcdefghijklmnñopqrstuvwxyz0123456789".split(""),
      toreplace:"ＡＢＣＤＥＦＧＨＩＪＫＬＭＮÑＯＰＱＲＳＴＵＶＷＸＹＺａｂｃｄｅｆｇｈｉｊｋｌｍｎñｏｐｑｒｓｔｕｖｗｘｙｚ０１２３４５６７８９".split("")
    }
  },
  "superscript": {
    "name": "SuperScript",
    "processed": {},
    "data": {
      tosearch:"ABCDEFGHIJKLMNÑOPQRSTUVWXYZabcdefghijklmnñopqrstuvwxyz0123456789".split(""),
      toreplace:"ᴬᴮᶜᴰᴱᶠᴳᴴᴵᴶᴷᴸᴹᴺÑᴼᴾᵠᴿˢᵀᵁⱽᵂˣʸᶻᵃᵇᶜᵈᵉᶠᵍʰᶦʲᵏˡᵐⁿñᵒᵖᵠʳˢᵗᵘᵛʷˣʸᶻ⁰¹²³⁴⁵⁶⁷⁸⁹".split("")
    }
  },
  "tail": {
    "name": "Tail",
    "processed": {},
    "data": {
      tosearch:"ABCDEFGHIJKLMNÑOPQRSTUVWXYZabcdefghijklmnñopqrstuvwxyz0123456789".split(""),
      toreplace:"ƛƁƇƊЄƑƓӇƖʆƘԼMƝƝƠƤƢƦƧƬƲƔƜҲƳȤʌƅƈɗєƒʛɦɪʝƙʅɱɲɲơƥƣɾƨƭυvɯҳɣȥ0123456789".split("")
    }
  },
  "tailuppercase": {
    "name": "Tail Uppercase",
    "processed": {},
    "data": {
      tosearch:"ABCDEFGHIJKLMNÑOPQRSTUVWXYZabcdefghijklmnñopqrstuvwxyz0123456789".split(""),
      toreplace:"ƛƁƇƊЄƑƓӇƖʆƘԼMƝƝƠƤƢƦƧƬƲƔƜҲƳȤƛƁƇƊЄƑƓӇƖʆƘԼMƝÑƠƤƢƦƧƬƲƔƜҲƳȤ0123456789".split("")
    }
  },
  "taillowercase": {
    "name": "Tail Lowercase",
    "processed": {},
    "data": {
      tosearch:"ABCDEFGHIJKLMNÑOPQRSTUVWXYZabcdefghijklmnñopqrstuvwxyz0123456789".split(""),
      toreplace:"ʌƅƈɗєƒʛɦɪʝƙʅɱɲɲơƥƣɾƨƭυVɯҳɣȥʌƅƈɗєƒʛɦɪʝƙʅɱɲɲơƥƣɾƨƭυvɯҳɣȥ0123456789".split("")
    }
  },
  "upsidedown": {
    "name": "Upside down",
    "processed": {},
    "data": {
      tosearch:"ABCDEFGHIJKLMNÑOPQRSTUVWXYZabcdefghijklmnñopqrstuvwxyz0123456789".split(""),
      toreplace:"∀ᙠƆᗡƎℲ⅁HIſ⋊˥WNÑOԀΌᴚS⊥∩ΛWX⅄Zɐqɔpǝɟɓɥıɾʞlɯuñopqɹsʇuʌʍxʎz0⇂ᄅƐㄣގ9ㄥ89".split("")
    }
  },
  "upsidedown2": {
    "name": "Upside down #2",
    "processed": {},
    "data": {
      tosearch:"ABCDEFGHIJKLMNÑOPQRSTUVWXYZabcdefghijklmnñopqrstuvwxyz0123456789".split(""),
      toreplace:"ɐqɔpǝɟɓɥıſʞๅɯuuodbɹsʇnʌʍxʎzɐqɔpǝɟɓɥıſʞๅɯuũodbɹsʇnʌʍxʎz0123456789".split("")
    }
  },
  "upsidedown3": {
    "name": "Upside down #3",
    "processed": {},
    "data": {
      tosearch:"ABCDEFGHIJKLMNÑOPQRSTUVWXYZabcdefghijklmnñopqrstuvwxyz0123456789".split(""),
      toreplace:"∀ʙCᴅєɻƋʜǀๅĸΓWИÑObƠɩƧ⊥∏ΛMXλZɑʙcᴅєɻმʜιɿĸгwиñoƅϭʁƨ⊥nʌʍx⑃z0123456789".split("")
    }
  },
  "weird": {
    "name": "Weird",
    "processed": {},
    "data": {
      tosearch:"ABCDEFGHIJKLMNÑOPQRSTUVWXYZabcdefghijklmnñopqrstuvwxyz0123456789".split(""),
      toreplace:"ǟɮƈɖɛʄɢɦɨʝӄʟʍռñօքզʀֆȶʊʋաӼʏʐǟɮƈɖɛʄɢɦɨʝӄʟʍռñօքզʀֆȶʊʋաӼʏʐ0123456789".split("")
    }
  }
}
let currentLore = 0;
let lores = [
  [
    `&6&l✦ Divine Aegis Blade ✦&r`,
    `{IMAGE}`,
    ``,
    `&7Forged in the celestial fires of &6Astraeus&7,`,
    `&7the &6Divine Aegis Blade&7 is said to be the`,
    `&7chosen weapon of the god of the stars.`,
    ``,
    `&f ❤ Health:`,
    `&7   ♡ Additional Health: &c+2.5`,
    ``,
    `&f ⛛ Enchants slots (&a2&7/&a4&7):`,
    `&7   ◈ &aSharpness XII&r`,
    `&7   ◈ &aFire aspect V&r`,
    `&7   ◇ Empty`,
    `&7   ◇ Empty`,
    ``,
    `&f ⛨ Armor points:`,
    `&7   ◎ Additional Armor: &b+1.5`,
    `&7   ◎ Evasion Rate: &b+25%`,
    ``,
    `&f 🗡 Damage: &915`,
    `&7   ➔ Attack Speed: &910.5`,
    `&7   ➔ Critical Rate: &9+50%`,
    `&7   ➔ Critical Damage: &9+100%`,
    ``,
    `&4         ㊉ Empty Rune Slot`,
    `&4         ㊉ Empty Rune Slot`,
    `&4         ㊉ Empty Rune Slot`,
    ``,
    `&e      Found by &bAlonsoAliaga &eon`,
    `&6    Necropolis of Ephemeral Souls `
  ],
  [
    `&6&l✦ Chestplate of the Timeless Sentinel ✦&r`,
    `{IMAGE}`,
    ``,
    `&7Woven from temporal threads and infused`,
    `&7with the steadfast essence of forgotten eras,`,
    `&7this chestplate grants its wearer unyielding`,
    `&7resolve against the ravages of time.`,
    ``,
    `&f ❤ Health:`,
    `&7  ♡ Additional Health: &c+5.0`,
    `&7  ♡ Health Regeneration: &a+0.5/sec`,
    ``,
    `&f ⛛ Enchants slots (&a3&7/&a5&7):`,
    `&7  ◈ &aProtection IV&r`,
    `&7  ◈ &aUnbreaking III&r`,
    `&7  ◈ &aMending I&r`,
    `&7  ◇ Empty`,
    `&7  ◇ Empty`,
    ``,
    `&f ⛨ Armor points:`,
    `&7  ◎ Additional Armor: &b+4.0`,
    `&7  ◎ Toughness: &b+2.0`,
    `&7  ◎ Damage Reduction: &b+10%`,
    ``,
    `&f 🗲 Resistance:`,
    `&7  ➔ Fire Resistance: &e+25%`,
    `&7  ➔ Blast Resistance: &e+15%`,
    `&7  ➔ Projectile Resistance: &e+10%`,
    ``,
    `&4          ㊉ Empty Rune Slot`,
    `&4          ㊉ Empty Rune Slot`,
    `&4          ㊉ Empty Rune Slot`,
    ``,
    `&e      Discovered by &bAlonsoAliaga &eon`,
    `&6        The Chronal Spire's Summi`
  ],
  [
    `&9&l✦ Shield of the Whispering Wind ✦&r`,
    `{IMAGE}`,
    ``,
    `&7Forged from the breeze of ancient peaks,`,
    `&7this shield deflects attacks like leaves`,
    `&7in the wind, offering agile defense`,
    `&7and whispers of protection.`,
    ``,
    `&f ❤ Health:`,
    `&7  ♡ Additional Health: &c+3.0`,
    ``,
    `&f ⛛ Enchantment Slots (&a2&7/&a3&7):`,
    `&7  ◈ &aUnbreaking III&r`,
    `&7  ◈ &aMending I&r`,
    `&7  ◇ Empty`,
    ``,
    `&f 🛡 Defense:`,
    `&7  ◎ Damage Reduction: &b+15%`,
    `&7  ◎ Block Chance: &b+75%`,
    `&7  ◎ Knockback Resistance: &b+50%`,
    ``,
    `&f ✫ Special Abilities:`,
    `&7  ➔ &eAura of Protection: &7Nearby allies`,
    `&7     gain &a+5% &7damage resistance.`,
    `&7  ➔ &eDefensive Gust: &7Upon blocking a`,
    `&7     heavy hit, pushes nearby enemies back. `,
    ``,
    `&4          ㊉ Empty Rune Slot`,
    `&4          ㊉ Empty Rune Slot`,
    ``,
    `&e        Found by &bAlonsoAliaga &eon`,
    `&6      The Cave of the Distant Echo`
  ],
  [
    `&b&l✦ Spear of the Astral Wanderer ✦&r`,
    `{IMAGE}`,
    ``,
    `&7Wrought from starlight and echoes of`,
    `&7forgotten constellations, this lance`,
    `&7guides its wielder through the cosmos,`,
    `&7piercing the veil between worlds.`,
    ``,
    `&f 🗡 Damage: &918`,
    `&7  ➔ Attack Speed: &9+11.0`,
    `&7  ➔ Critical Rate: &9+60%`,
    `&7  ➔ Critical Damage: &9+120%`,
    ``,
    `&f ✫ Special Abilities:`,
    `&7  ➔ &eAstral Guidance: &7Increases movement `,
    `&7     speed and evasion by &a+10%&7.`,
    `&7  ➔ &eCosmic Impale: &7Deals bonus damage`,
    `&7     to enemies from other dimensions.`,
    ``,
    `&4        ㊉ Empty Rune Slot`,
    `&4        ㊉ Empty Rune Slot`,
    `&4        ㊉ Empty Rune Slot`,
    ``,
    `&e      Found by &bAlonsoAliaga &eon`,
    `&6     The Whispering Nebula's Edge`
  ],
  [
    `&b&l✦ Wings of the Celestial Wanderer ✦&r`,
    `{IMAGE}`,
    ``,
    `&7Crafted from pure aether and fragments`,
    `&7of fallen stars, these wings grant their`,
    `&7wearer dominion over the skies, allowing`,
    `&7flight beyond earthly bounds.`,
    ``,
    `&f ❤ Health:`,
    `&7  ◇ Additional Health: &c+4.0`,
    ``,
    `&f ⛛ Enchantment Slots (&a2&7/&a4&7):`,
    `&7  ◈ &aFeather Falling IV&r`,
    `&7  ◈ &aUnbreaking III&r`,
    `&7  ◇ Empty`,
    `&7  ◇ Empty`,
    ``,
    `&f ⬆ Flight:`,
    `&7  ⮞ Flight Speed: &9+30%`,
    `&7  ⮞ Glide Efficiency: &9+20%`,
    `&7  ⮞ Fall Damage Immunity: &9Yes`,
    ``,
    `&f ✫ Special Abilities:`,
    `&7  ➔ &eAetherial Glide: &7Upon gliding, gain`,
    `&7     a burst of speed for &a3 seconds&7.`,
    `&7  ➔ &eCelestial Ascent: &7Double-jump to`,
    `&7     propel upwards, consuming &910 mana&7. `,
    ``,
    `&4         ㊉ Empty Rune Slot`,
    `&4         ㊉ Empty Rune Slot`,
    `&4         ㊉ Empty Rune Slot`,
    ``,
    `&e       Found by &bAlonsoAliaga &eon`,
    `&6  The Summit of the Skyward Sanctuary`
  ],
  [
    `&d&l✦ Cloak of the Shadow Weaver ✦&r`,
    `{IMAGE}`,
    ``,
    `&7Woven from the deepest night and infused`,
    `&7with echoes of forgotten whispers, this cloak`,
    `&7envelopes its wearer in a shroud of secrecy,`,
    `&7granting mastery over concealment.`,
    ``,
    `&f ❤ Health:`,
    `&7  ◇ Additional Health: &c+2.0`,
    ``,
    `&f ⛛ Enchantment Slots (&a2&7/&a3&7):`,
    `&7  ◈ &aUnbreaking III&r`,
    `&7  ◈ &aThorns I&r`,
    `&7  ◇ Empty`,
    ``,
    `&f 🛡 Defense:`,
    `&7  ⮞ Physical Resistance: &b+8%`,
    `&7  ⮞ Magic Resistance: &b+5%`,
    `&7  ⮞ Movement Speed: &9+5%`,
    ``,
    `&f ✫ Special Abilities:`,
    `&7  ➔ &eShadow Meld: &7Upon crouching, become`,
    `&7     invisible for &a5 seconds&7 (20s Cooldown).`,
    `&7  ➔ &eWhispers of Deception: &7Confuses nearby`,
    `&7     enemies, causing them to attack each other. `,
    ``,
    `&4            ㊉ Empty Rune Slot`,
    `&4            ㊉ Empty Rune Slot`,
    ``,
    `&e         Found by &bAlonsoAliaga &eon`,
    `&6       The Forgotten Ruins of Eldoria`
  ],
  [
    `&d&l✦ Amulet of the Chrono Echo ✦&r`,
    `{IMAGE}`,
    ``,
    `&7A relic that shimmers with the energy`,
    `&7of fleeting moments, allowing its wearer`,
    `&7to bend time and perceive futures yet`,
    `&7to unfold.`,
    ``,
    `&f ❤ Health:`,
    `&7  ◇ Additional Health: &c+1.0`,
    ``,
    `&f ⛛ Enchantment Slots (&a1&7/&a2&7):`,
    `&7  ◈ &aMending I&r`,
    `&7  ◇ Empty`,
    ``,
    `&f ☯︎ Time Manipulation:`,
    `&7  ⮞ Cooldown Reduction: &9+20%`,
    `&7  ⮞ Duration of Effects: &9+10%`,
    `&7  ⮞ Perceived Time Slow: &9+5%`,
    ``,
    `&f ✫ Special Abilities:`,
    `&7  ➔ &eTemporal Blink: &7Teleport a short`,
    `&7     distance forward, leaving an echo.`,
    `&7  ➔ &eMoment's Insight: &7Briefly shows`,
    `&7     enemy weaknesses (15s Cooldown). `,
    ``,
    `&4        ㊉ Empty Rune Slot`,
    `&4        ㊉ Empty Rune Slot`,
    ``,
    `&e      Found by &bAlonsoAliaga &eon`,
    `&6     The Whispering Glow Cavern`
  ],
  [
    `&a&l⛣ Ring of the Bound Soul ⛣&r`,
    `{IMAGE}`,
    ``,
    `&7Forged from the unbreakable bond of`,
    `&7twin spirits, this ring amplifies the`,
    `&7wearer's essence, linking them to their`,
    `&7true potential.`,
    ``,
    `&f ❤ Health:`,
    `&7  ◇ Additional Health: &c+0.5`,
    ``,
    `&f ⛛ Enchantment Slots (&a0&7/&a1&7):`,
    `&7  ◇ Empty`,
    ``,
    `&f 🗲 Elemental Affinity:`,
    `&7  ⮞ Fire Damage: &9+10%`,
    `&7  ⮞ Ice Resistance: &b+15%`,
    `&7  ⮞ Lightning Chance: &9+5%`,
    ``,
    `&f ✫ Special Abilities:`,
    `&7  ➔ &eSoul Link: &7When below &c25% Health&7,`,
    `&7     gain &a+15% &7damage and resistance.`,
    `&7  ➔ &eEchoing Blow: &7Attacks have a chance `,
    `&7     to strike twice, dealing &950% &7damage.`,
    ``,
    `&4         ㊉ Empty Rune Slot`,
    ``,
    `&e       Found by &bAlonsoAliaga &eon`,
    `&6      The Abyss of Twin Shadows`
  ],
  [
    `&e&l✦ Blade of Perpetual Lightning ✦&r`,
    `{IMAGE}`,
    ``,
    `&7A blade humming with untamed electrical`,
    `&7fury, perpetually crackling with energy,`,
    `&7channeling the power of unending storms`,
    `&7into every strike.`,
    ``,
    `&f 🗡 Damage: &912`,
    `&7  ➔ Attack Speed: &9+1.4`,
    `&7  ➔ Critical Rate: &9+35%`,
    `&7  ➔ Critical Damage: &9+75%`,
    ``,
    `&f ⛛ Enchantment Slots (&a2&7/&a4&7):`,
    `&7  ◈ &aSmite V&r`,
    `&7  ◈ &aLooting III&r`,
    `&7  ◇ Empty`,
    `&7  ◇ Empty`,
    ``,
    `&f 🗲 Elemental Damage:`,
    `&7  ⮞ Lightning Damage: &9+5`,
    `&7  ⮞ Stun Chance: &9+10%`,
    `&7  ⮞ Chain Lightning: &93 targets`,
    ``,
    `&f ✫ Special Abilities:`,
    `&7  ➔ &eArcing Strike: &7Attacks can jump to`,
    `&7     up to &93 &7nearby enemies.`,
    `&7  ➔ &eTempest Guard: &7Blocking with this`,
    `&7     sword has a chance to zap attackers. `,
    ``,
    `&4           ㊉ Empty Rune Slot`,
    `&4           ㊉ Empty Rune Slot`,
    `&4           ㊉ Empty Rune Slot`,
    ``,
    `&e        Found by &bAlonsoAliaga &eon`,
    `&6           The Tempest Forge`
  ],
  [
    `&e&l☄ Staff of the Reality Weaver ☄&r`,
    `{IMAGE}`,
    ``,
    `&7Carved from the wood of a Converging Tree`,
    `&7and adorned with shards of Starlight Crystal,`,
    `&7this staff hums with the power to manipulate`,
    `&7the very fabric of reality.`,
    ``,
    `&f ☄ Spell Power:`,
    `&7  ⮞ Mana Pool: &b+200`,
    `&7  ⮞ Mana Regeneration: &b+2.5/sec`,
    `&7  ⮞ Spell Damage: &9+40%`,
    `&7  ⮞ Cooldown Reduction: &9+30%`,
    ``,
    `&f ✫ Special Abilities:`,
    `&7  ➔ &eReality Shift: &7Instantly swap places`,
    `&7     with a targeted ally or enemy within &a20 blocks&7. `,
    `&7  ➔ &eDimensional Rift: &7Creates a temporary`,
    `&7     portal, allowing safe passage for &a5 seconds&7.`,
    `&7  ➔ &eArcane Surge: &7Greatly amplifies the`,
    `&7     next spell cast, increasing its damage`,
    `&7     and reducing its mana cost to zero`,
    `&7     (60s Cooldown).`,
    ``,
    `&f ❁ Passive Effects:`,
    `&7  ◇ Enhanced Mind: &7Increases experience`,
    `&7     gain by &a+15%&7.`,
    `&7  ◇ Arcane Resilience: &7Grants &b+10%&7 magic`,
    `&7     damage reduction.`,
    ``,
    `&4              ㊉ Empty Rune Slot`,
    `&4              ㊉ Empty Rune Slot`,
    `&4              ㊉ Empty Rune Slot`,
    ``,
    `&e            Found by &bAlonsoAliaga &eon`,
    `&6              The Nexus Sanctuary`
  ],
  [
    `&d&l⚞ Boots of the Zephyr's Whisper ⚟&r`,
    `{IMAGE}`,
    ``,
    `&7Woven from condensed winds and imbued`,
    `&7with the spirit of swift currents, these`,
    `&7boots grant unparalleled agility, allowing`,
    `&7their wearer to dance on air.`,
    ``,
    `&f ❤ Health:`,
    `&7  ◇ Additional Health: &c+3.0`,
    ``,
    `&f ⛛ Enchantment Slots (&a2&7/&a3&7):`,
    `&7  ◈ &aFeather Falling X&r`,
    `&7  ◈ &aDepth Strider III&r`,
    `&7  ◇ Empty`,
    ``,
    `&f ⇶ Movement:`,
    `&7  ⮞ Speed: &9+40%`,
    `&7  ⮞ Jump Height: &9+2 Blocks`,
    `&7  ⮞ Fall Damage: &9Immune`,
    `&7  ⮞ Evasion Chance: &9+20%`,
    ``,
    `&f ✫ Special Abilities:`,
    `&7  ➔ &eWind Dash: &7Double-tap forward to`,
    `&7     dash swiftly, becoming invulnerable`,
    `&7     for a moment (5s Cooldown).`,
    `&7  ➔ &eAir Walk: &7Briefly walk on air after`,
    `&7     a jump (3s duration, 15s Cooldown). `,
    ``,
    `&4         ㊉ Empty Rune Slot`,
    `&4         ㊉ Empty Rune Slot`,
    ``,
    `&e      Found by &bAlonsoAliaga &eon`,
    `&6       The Sky-Touched Peaks`
  ]
]
const defaultCooldown = 3;
let copiedTimeout;
let alertMessageTimeout;
function itemsadderCopyAll() {
  copyTextToClipboard(document.getElementById("oraxen-output-yaml").textContent);
}
function itemsadderCopyNewSection() {
  copyTextToClipboard(savedNewSection);
}
function itemsadderCopyAll() {
  copyTextToClipboard(document.getElementById("itemsadder-output-yaml").textContent);
}
function newFontCopy() {
  copyTextToClipboard(document.getElementById("new-font-output").textContent);
}
function copyTextToClipboard(text) {
  let textArea = document.createElement('textarea');
  textArea.value = text;
  textArea.style.position = "fixed";
  textArea.style.bottom= 0;
  textArea.style.left= 0;

  document.body.appendChild(textArea);
  textArea.focus();
  textArea.select();

  document.execCommand('copy');
  /*
  let copiedElement = document.createElement('copied-element');
  copiedElement.style.display = "inline-block"
  if(copiedTimeout) {
    clearTimeout(copiedTimeout);
  }

  copiedTimeout = setTimeout(()=>{

    copiedTimeout = undefined;
  },500);
  alert('You text was copied! Ready to paste!\n\nThanks for using our tool!\n- AlonsoAliaga');
  */
  alertCopied();
  document.body.removeChild(textArea);
}
function getRGBColor(hex) {
  try{
    const r = parseInt(hex.slice(1, 3), 16);
    const g = parseInt(hex.slice(3, 5), 16);
    const b = parseInt(hex.slice(5, 7), 16);
    return `${r}, ${g}, ${b}`;
  }catch(e) {
    return "0, 0, 0";
  }
}
let additionalShadowX = 0,
  additionalShadowY = 0;
function updateShadowValues() {
  let shadowDirection = document.getElementById("location-selection");
  let locationData = shadowLocations[shadowDirection.value] || shadowLocations["left"];
  additionalShadowX = locationData.shadow.x;
  additionalShadowY = locationData.shadow.y;
}
let maxFontHeight = 0;
const rankCanvas = document.getElementById("rank-canvas");
const rankCanvasPreview = document.getElementById("rank-canvas-preview");
let lower = ["abcdefghijklmnñopqrstuvwxyz".split("")]
let upper = ["ABCDEFGHIJKLMNÑOPQRSTUVWXYZ".split("")]
function isLetter(c) {
  return lower.includes(c) || upper.includes(c);
}
function isLower(c) {
  return lower.includes(c);
}
function isUpper(c) {
  return upper.includes(c);
}
function updateRankImagePreview(fontIdentifier,text = undefined) {
  let letters = availableFonts[fontIdentifier];
  if(typeof letters == "undefined") {
    return false;
  }
  let context = rankCanvasPreview.getContext('2d',{alpha: true});
  context.clearRect(0, 0, rankCanvasPreview.width, rankCanvasPreview.height);
  let totalWidth = 0;
  let maxHeight = 0;
  var needed = [];
  let toWrite;
  if(typeof text == "undefined" || text.length == 0) {
    toWrite = Object.keys(letters).filter(c=>c.length == 1);
  }else{
    toWrite = [...text];
  }
  //console.log(`Writing: `,toWrite)
  for(let character of toWrite){ 
    if(character.length == 1) {
      //console.log(`Calculating: ${character}`)
      var letter = letters[character];
      if (letter) {
        let max = 0;
        for(let l of letter) {
          if(l.length > max) max = l.length;
        }
        if(letter.length > maxHeight) maxHeight = letter.length;
        totalWidth = totalWidth + max + 1;
        needed.push(letter);
      }
    }
  }
  maxHeight = maxHeight + 2;
  //console.log(`Total width: ${totalWidth} | Max height: ${maxHeight}`);
  rankCanvasPreview.width = totalWidth;
  rankCanvasPreview.height = maxHeight;
  context = rankCanvasPreview.getContext('2d',{alpha: true});
  context.fillStyle = `rgb(255, 255, 255)`;
  context.fillRect(0, 0, totalWidth, maxHeight);
  let size = 1;
  let currX = 1;
  context.fillStyle = `rgba(0, 0, 0, 1)`;
  for (i = 0; i < needed.length; i++) {
    let letter = needed[i];
    var currY = 1;
    var addX = 0;
    for (var y = 0; y < letter.length; y++) {
        var row = letter[y];
        for (var x = 0; x < row.length; x++) {
            if (row[x]) {
                context.fillRect(currX + x * size, currY, size, size);
            }
        }
        addX = Math.max(addX, row.length * size);
        currY += size;
    }
    currX += size + addX;
  }
  return true;
}
function updateRankImage(event) {
  let addBorder = document.getElementById("button-add-border").checked;
  let shadow = document.getElementById("button-shadow").checked;
  //let rounded = document.getElementById("button-rounded").checked;
  let customIconShadow = document.getElementById("button-custom-icon-shadow").checked;

  let size = 1;
  const context = rankCanvas.getContext('2d',{alpha: true});

  
  context.clearRect(0, 0, rankCanvas.width, rankCanvas.height);

  let shadowDirection = document.getElementById("location-selection");

  var needed = [];
  let start = 3;
  if(shadow) {
    if(!["up","down"].includes(shadowDirection.value)) {
      start++;
    }
  }
  let letters;
  let letterSelection = document.getElementById("font-selection");
  if(letterSelection) {
    letters = availableFonts[letterSelection.value] || availableFonts[defaultFontIdentifier];
  }else letters = availableFonts[defaultFontIdentifier];
  if(isBulkCreating) {
    if(currentBulkData && currentBulkData.font && availableFonts[currentBulkData.font]) {
      letters = availableFonts[currentBulkData.font]
    }
  }
  let letterType = letters.Case;
  if(typeof letterType != "undefined") {
    if(letterType == "upper") {
      string = inputText.value.toUpperCase(); // because I only did uppercase letters
    }else if(letterType == "lower") {
      string = inputText.value.toLowerCase(); // because I only did uppercase letters
    }else if(letterType != "both") {
      string = inputText.value.toUpperCase(); // because I only did uppercase letters
    }
  }else{
    string = inputText.value.toUpperCase(); // because I only did uppercase letters
  }
  
  //let height = 8 + (shadow ? ((shadowDirection.value.includes("up") || shadowDirection.value.includes("down")) ? 0 : 1) : 1);
  let height = 8 + (letters.Height - 4);
  //console.log(`Using font '${letters.Name}'`)
  let maxHeight = 0;
  let totalWidth = 0;
  for (var i = 0; i < string.length; i++) {
      let character = string.charAt(i);
      var letter = letters[character];
      if(!letter) {
        if(isLetter(character)) {
          if(isLower(character)) {
            letter = letters[character.toUpperCase()];
          }else{
            letter = letters[character.toLowerCase()];
          }
        }
      }
      if (letter) {
        let max = 0;
        //console.log(`Drawing ${string.charAt(i)}`)
        for(let l of letter) {
          //console.log(l)
          if(l.length > max) max = l.length;
        }
        if(letter.length > maxHeight) maxHeight = letter.length;
        start = start + max + 1;
        totalWidth = totalWidth + max + 1;
        needed.push(letter);
      }
  }
  let additionalWidth = 0;
  try{
    additionalWidth = parseInt(document.getElementById("additional-width-picker").innerText);
  }catch(e){}
  let additionalHeight = 0;
  try{
    additionalHeight = parseInt(document.getElementById("additional-height-picker").innerText);
  }catch(e){}
  maxFontHeight = maxHeight;
  let autoWidth = document.getElementById("button-auto-width").checked;
  if(autoWidth) {
    rankCanvas.width = start;
    document.getElementById("width-picker").innerText = start;
  }else{
    let customWidth = Math.max(1,parseInt(document.getElementById("width-picker").innerText));
    rankCanvas.width = customWidth;
  }
  rankCanvas.width = rankCanvas.width + additionalWidth;
  let autoHeight = document.getElementById("button-auto-height").checked;
  if(autoHeight) {
    rankCanvas.height = height;
    document.getElementById("height-picker").innerText = height;
  }else{
    let customHeight = Math.max(1,parseInt(document.getElementById("height-picker").innerText));
    rankCanvas.height = customHeight;
  }
  rankCanvas.height = rankCanvas.height + additionalHeight;

  createGradient(context);
  if(addBorder) {
    let internalColoredCorner = document.getElementById("button-internal-colored-corner-border").checked;
    let internalGradientBorder = document.getElementById("button-internal-gradient-border").checked;
    if(internalColoredCorner) {
      let internalGradientBorderRotated = document.getElementById("button-internal-gradient-border-rotate").checked;
      
      let firstColorElement = document.getElementById("first-color-internal-border-color-picker");
      let firstColor = "0, 0, 0";
      if(firstColorElement) {
        firstColor = getRGBColor(firstColorElement.value)
      }
      let firstColorOpacityElement = document.getElementById("first-color-internal-border-opacity-picker");
      let firstColorOpacity = "0.5";
      if(firstColorOpacityElement) {
        firstColorOpacity = Math.max(0,Math.min(100,firstColorOpacityElement.innerText)) / 100;
      }
      
      let secondColorElement = document.getElementById("second-color-internal-border-color-picker");
      let secondColor = "0, 0, 0";
      if(secondColorElement) {
        secondColor = getRGBColor(secondColorElement.value)
      }
      let secondColorOpacityElement = document.getElementById("second-color-internal-border-opacity-picker");
      let secondColorOpacity = "0.5";
      if(secondColorOpacityElement) {
        secondColorOpacity = Math.max(0,Math.min(100,secondColorOpacityElement.innerText)) / 100;
      }
      context.fillStyle = `rgba(${firstColor}, ${firstColorOpacity})`;
      context.fillStyle = `rgba(${secondColor}, ${secondColorOpacity})`;

      /*
        context.fillStyle = `rgba(${firstColor}, ${firstColorOpacity})`;

        context.fillRect(0, 0, rankCanvas.width, 1);
        context.fillRect(0, 1, 1, rankCanvas.height - 2);
        context.fillStyle = `rgba(${secondColor}, ${secondColorOpacity})`;

        context.fillRect(rankCanvas.width - 1, 1, 1, rankCanvas.height - 2);
        context.fillRect(0, rankCanvas.height - 1, rankCanvas.width, 1);
      */
      if(!internalGradientBorderRotated) {
        context.fillStyle = `rgba(${firstColor}, ${firstColorOpacity})`;

        context.fillRect(0, 0, rankCanvas.width, 1);
        context.fillRect(0, 1, 1, rankCanvas.height - 1);
        context.fillStyle = `rgba(${secondColor}, ${secondColorOpacity})`;

        context.fillRect(rankCanvas.width - 1, 0, 1, rankCanvas.height - 1);
        context.fillRect(0, rankCanvas.height - 1, rankCanvas.width, 1);
      }else{
        context.fillStyle = `rgba(${firstColor}, ${firstColorOpacity})`;

        context.fillRect(0, 0, rankCanvas.width, 1);
        context.fillRect(rankCanvas.width - 1, 1, 1, rankCanvas.height);
        context.fillStyle = `rgba(${secondColor}, ${secondColorOpacity})`;

        context.fillRect(0, 0, 1, rankCanvas.height - 1);
        context.fillRect(0, rankCanvas.height - 1, rankCanvas.width, 1);
      }
    }else if(internalGradientBorder) {
      let gradientBorderAmount = parseInt(document.getElementById("internal-gradient-border-colors-amount").innerText);
      let gradientBorderAngle = document.getElementById("internal-gradient-border-colors-angle").innerText;
      if(isNaN(gradientBorderAngle)) gradientBorderAngle = 0;
      else gradientBorderAngle = parseInt(gradientBorderAngle);
      let colours = defaultInternalGradientBorderColors.slice(0, gradientBorderAmount);
      //colours = colours.concat([]).reverse();
      let points = linearGradient_a(rankCanvas.width, rankCanvas.height, gradientBorderAngle);
      var gradient = context.createLinearGradient(
        points.tx,
        points.ty,
        points.bx,
        points.by
      );
      let interval = 1;
      const decrement = 1 / (colours.length - 1);
      colours.forEach(colour => {
        gradient.addColorStop(Math.max(0,interval), colour);
        interval -= decrement;
      })
      context.fillStyle = gradient;
      context.fillRect(0, 0, rankCanvas.width, 1);
      context.fillRect(rankCanvas.width - 1, 1, 1, rankCanvas.height - 2);
      context.fillRect(0, rankCanvas.height - 1, rankCanvas.width, 1);
      context.fillRect(0, 1, 1, rankCanvas.height - 2);
    }else{
      let borderColor = document.getElementById("border-color-picker");
      let theColor = "0, 0, 0";
      if(borderColor) {
        theColor = getRGBColor(borderColor.value)
      }
      let option = document.getElementById("border-opacity-picker");
      let opacity = "0.5";
      if(option) {
        opacity = Math.max(0,Math.min(100,option.innerText)) / 100;
      }
      context.fillStyle = `rgba(${theColor}, ${opacity})`;
      context.fillRect(0, 0, rankCanvas.width, 1);
      context.fillRect(rankCanvas.width - 1, 1, 1, rankCanvas.height - 2);
      context.fillRect(0, rankCanvas.height - 1, rankCanvas.width, 1);
      context.fillRect(0, 1, 1, rankCanvas.height - 2);
    }
  }
  
  let globalShadow = document.getElementById("button-global-shadow").checked;
  let buttonGlobalShadowBelowFontOption = document.getElementById("button-global-shadow-below-font").checked;
  if(globalShadow && buttonGlobalShadowBelowFontOption) {
    drawGlobalShadow(context);
    /*
    if(roundTopLeft) context.clearRect(0,0,1,1);
    if(roundTopRight) context.clearRect(rankCanvas.width - 1,0,1,1);
    if(roundBottomLeft) context.clearRect(0,rankCanvas.height - 1,1,1);
    if(roundBottomRight) context.clearRect(rankCanvas.width - 1,rankCanvas.height - 1,1,1); 
    */
  }
  
  let roundTopLeft = document.getElementById("top-left-corner").classList.contains("button-enabled");
  let roundTopRight = document.getElementById("top-right-corner").classList.contains("button-enabled");
  let roundBottomLeft = document.getElementById("bottom-left-corner").classList.contains("button-enabled");
  let roundBottomRight = document.getElementById("bottom-right-corner").classList.contains("button-enabled");
  if(roundTopLeft) context.clearRect(0,0,1,1);
  if(roundTopRight) context.clearRect(rankCanvas.width - 1,0,1,1);
  if(roundBottomLeft) context.clearRect(0,rankCanvas.height - 1,1,1);
  if(roundBottomRight) context.clearRect(rankCanvas.width - 1,rankCanvas.height - 1,1,1);
  //context.globalCompositeOperation = 'destination-over';
  //context.fillStyle = `rgba(0, 0, 0, 0)`;
  
  //context.globalAlpha = 0.7;
  //context.fillRect(x, y, rankCanvas.width, rankCanvas.height);

  //context.globalAlpha = 0.1;
  //context.globalCompositeOperation = "destination-out";   // Add line
  //context.fillStyle = "#000000";
  //context.fillRect(0, 0, 5, 5);
  //context.globalCompositeOperation = "source-over";       // Add line 
  //context.globalAlpha = 1;

  //context.clearRect(0,0,rankCanvas.width,rankCanvas.height);
  
  //context.globalCompositeOperation = 'source-over';
  
  //let locationData;
  let shadowR = 0;
  let shadowG = 0;
  let shadowB = 0;
  let shadowA = 0;
  if(shadow) {
    //locationData = shadowLocations[shadowDirection.value] || shadowLocations["left"];
    let borderColor = document.getElementById("shadow-color-picker");
    let theColor = "0, 0, 0";
    if(borderColor) {
      theColor = getRGBColor(borderColor.value)
      shadowR = parseInt(theColor.split(",")[0].trim());
      shadowG = parseInt(theColor.split(",")[1].trim());
      shadowB = parseInt(theColor.split(",")[2].trim());
    }
    let option = document.getElementById("shadow-opacity-picker");
    let opacity = "0.5";
    if(option) {
      opacity = Math.max(0,Math.min(100,option.innerText)) / 100;
      shadowA = opacity;
    }
    context.fillStyle = `rgba(${theColor}, ${opacity})`;
    let shadowStartX = textX + additionalShadowX;
    let shadowStartY = textY + additionalShadowY;

    var currX = shadowStartX;
    for (i = 0; i < needed.length; i++) {
        letter = needed[i];
        var currY = shadowStartY;
        var addX = 0;
        for (var y = 0; y < letter.length; y++) {
            var row = letter[y];
            for (var x = 0; x < row.length; x++) {
                if (row[x]) {
                    context.fillRect(currX + x * size, currY, size, size);
                }
            }
            addX = Math.max(addX, row.length * size);
            currY += size;
        }
        currX += size + addX;
    }
  }

  let fontUpColorElement = document.getElementById("font-up-color-picker");
  let fontUpColor = "0, 0, 0";
  if(fontUpColorElement) {
    fontUpColor = getRGBColor(fontUpColorElement.value)
  }

  context.fillStyle = `rgba(${fontUpColor}, 1)`;
  let fontEffectOption = document.getElementById("button-font-effect").checked;
  let fontGradientOption = document.getElementById("button-font-gradient").checked;
  let fontEffectColor = `rgba(${fontUpColor}, 1)`;
  let fontEffectHeight = 5;
  var currX = textX;
  if(isBulkCreating && typeof currentBulkData.fontColors != "undefined") {
    context.fillStyle = `rgba(${getRGBColor(currentBulkData.fontColors[0])}, 1)`;
  }
  if(fontEffectOption) {
    if(isBulkCreating && typeof currentBulkData.fontColors != "undefined") {
      fontEffectColor = `rgba(${getRGBColor(currentBulkData.fontColors[0])}, 1)`;
    }else{
      fontEffectColor = `rgba(${getRGBColor(document.getElementById("color-font-effect-picker").value)}, 1)`;
    }
    fontEffectHeight = Math.max(0,Math.min(letters.Height,parseInt(document.getElementById("font-effect-picker-height").innerText)));
  }else if(fontGradientOption) {
    let colours;
    if(isBulkCreating && typeof currentBulkData.fontColors != "undefined") {
      colours = currentBulkData.fontColors;
    }else{
      //console.log(`Font gradient type is: ${fontGradientType}`)
      if(fontGradientType == 1) {
        let currentAmount = isNaN(colorsFontGradientButton.innerText) ? 2 : Math.max(1,Math.min(maxFontGradientColorsAmount,parseInt(colorsFontGradientButton.innerText)));
        colours = defaultFontGeneratorColors.slice(0, currentAmount);
        //colours.reverse();
      }else{
        if(typeof defaultFontGradients[currentFontGradient] !== "undefined") {
          colours = defaultFontGradients[currentFontGradient].colors;
          //console.log(`Creating gradient.. ${defaultGradients[currentGradient].identifier}`)
        }else {
          colours = defaultFontGradients[0].colors;
          //console.log(`Creating gradient.. ${defaultGradients[0].identifier}`)
        }
      }
      colours = colours.concat([]).reverse();
    }
    //console.log(`Using custom font gradient colors: ${colours.join(", ")}`)
    //console.log(`Gradient of  ${totalWidth}px x ${maxHeight}px`)

    let angleValue = parseInt(document.getElementById("font-gradient-angle-picker").innerText);
    let points = linearGradient_a(totalWidth, maxHeight, angleValue);
    var gradient = context.createLinearGradient(
      points.tx + currX,
      points.ty + textY,
      points.bx + currX,
      points.by + textY
    );
    /*
    let points = linearGradient_a(context.canvas.width, context.canvas.height, angleValue);
    var gradient = context.createLinearGradient(
      points.tx,
      points.ty,
      points.bx,
      points.by
    );
    */
    let interval = 1;
    const decrement = 1 / (colours.length - 1);
    colours.forEach(colour => {
      //console.log(`Fixed: ${interval.toFixed(5)}`);
      //console.log(`Adding color stop interval: ${interval}${interval>1?` CAUTION GREATER+!`:``}${interval<0?` CAUTION LOWER-!`:``}`)
      gradient.addColorStop(Math.max(0,interval), colour);
      interval -= decrement;
    })
    context.fillStyle = gradient;
  }
  for (i = 0; i < needed.length; i++) {
      letter = needed[i];
      var currY = textY;
      var addX = 0;
      for (var y = 0; y < letter.length; y++) {
          var row = letter[y];
          if(fontEffectOption) {
            if(y >= fontEffectHeight) context.fillStyle = fontEffectColor;
            else context.fillStyle = `rgba(${fontUpColor}, 1)`;
          }
          for (var x = 0; x < row.length; x++) {
              if (row[x]) {
                  context.fillRect(currX + x * size, currY, size, size);
              }
          }
          addX = Math.max(addX, row.length * size);
          currY += size;
      }
      currX += size + addX;
  }
  let customIconToUse = customIcon;
  if(isBulkCreating && currentBulkData.icon) {
    customIconToUse = imagesInCache.get(currentBulkData.icon);
  }
  if(customIconToUse) {
    if(shadow && customIconShadow) {
      if(true) {
        let tempCanvas = document.getElementById("temp-canvas");
        tempCanvas.width = customIconToUse.width;
        tempCanvas.height = customIconToUse.height;
        let tempContext = tempCanvas.getContext("2d",{ willReadFrequently: true, alpha: true});
        tempContext.clearRect(0, 0, tempCanvas.width, tempCanvas.height);
        tempContext.drawImage(customIconToUse,0,0);

        let imageData = tempContext.getImageData(0,0,tempCanvas.width,tempCanvas.height);

        //let startX = iconX + locationData.icon.x;
        //let startY = iconY + locationData.icon.y;
        let startX = iconX + additionalShadowX;
        let startY = iconY + additionalShadowY;
        var theData = imageData.data;
        let alphaValue = shadowA * 255;
        //console.log(theData.join(" "))
        for (var i = 0, n = theData.length; i < n; i += 4) {
          if(theData[i+3] != 0) {
          //if(theData[i] != 0 && theData[i+1] != 0 && theData[i+2] != 0 && theData[i+3] != 0) {
            theData[i  ] = shadowR;
            theData[i+1] = shadowG;
            theData[i+2] = shadowB;
            theData[i+3] = alphaValue;
          }
        }
        //console.log(theData.join(" "))
        tempContext.putImageData(imageData,0,0);
        context.drawImage(tempCanvas,startX,startY);
        //console.log(`Drew ${theData.length} values! R=>${shadowR} G=>${shadowG} B=>${shadowB} A=>${shadowA}`)
      }
    }
    context.drawImage(customIconToUse,iconX,iconY);
  }
  let relief = document.getElementById("button-relief").checked;
  let heightBeforeRelief = rankCanvas.height;
  if(globalShadow && !buttonGlobalShadowBelowFontOption) {
    drawGlobalShadow(context);
    /*
    let globalShadowHeight = document.getElementById("global-shadow-picker-height").innerText;
    if(isNaN(globalShadowHeight)) globalShadowHeight = 3;
    else globalShadowHeight = Math.max(0,Math.min(rankCanvas.height,globalShadowHeight));
    let globalShadowOpacity = document.getElementById("global-shadow-picker-opacity").innerText;
    if(isNaN(globalShadowOpacity)) globalShadowOpacity = 0.25;
    else globalShadowOpacity = Math.max(0,Math.min(100,globalShadowOpacity)) / 100;
    let globalShadowColor = `rgba(${getRGBColor(document.getElementById("global-shadow-picker").value)}, ${globalShadowOpacity})`;
    context.fillStyle = globalShadowColor;
    context.fillRect(0, rankCanvas.height - globalShadowHeight, rankCanvas.width, globalShadowHeight);
    */
    if(roundTopLeft) context.clearRect(0,0,1,1);
    if(roundTopRight) context.clearRect(rankCanvas.width - 1,0,1,1);
    if(roundBottomLeft) context.clearRect(0,rankCanvas.height - 1,1,1);
    if(roundBottomRight) context.clearRect(rankCanvas.width - 1,rankCanvas.height - 1,1,1); 
  }

  let ticketBorder = document.getElementById("button-ticket-border").checked;
  //console.log(`Ticket border is ${ticketBorder}`);
  if(ticketBorder) {
    let ticketBorderAuto = document.getElementById("button-ticket-border-auto").checked;
    let height = heightBeforeRelief;
    let size = Math.floor(height/3);
    if(!ticketBorderAuto) {
      size = Math.max(0,Math.min(parseInt(document.getElementById("button-ticket-border-size").innerText), height - 2));
      document.getElementById("button-ticket-border-size").innerText = size;
      //console.log(`Ticket custom size: ${size}`);
    }else{
      //console.log(`Ticket auto size: ${size}`);
    }
    
    let ticketLeftSide = document.getElementById("ticket-left-side").classList.contains("button-enabled");
    let ticketRightSide = document.getElementById("ticket-right-side").classList.contains("button-enabled");

    let ticketBorderShadow = document.getElementById("button-ticket-border-shadow").checked;
    let ticketBoderModeShadowValue = parseInt(document.getElementById("button-ticket-border-shadow-mode").getAttribute("data-value"));
    //console.log(`Ticket shadow mode value: ${ticketBoderModeShadowValue}`)
    if(ticketBorderShadow) {
      let rgb = getRGBColor(document.getElementById("ticket-border-shadow-picker").value);
      let opa = parseInt(document.getElementById("ticket-border-shadow-picker-opacity").innerText)/100;
      context.fillStyle = `rgba(${rgb}, ${opa})`;
      //console.log(`Ticket border shadow color is ${context.fillStyle} | rgba(${rgb},${opa})`);
    }
    let canvasIsEven = height % 2 == 0;
    if(canvasIsEven) {
      let sizeIsOdd = size % 2 != 0;
      if(sizeIsOdd) {
        size = size - 1
      }
      if(size > 0) {
        let startY = (height / 2) - (size / 2);
        if(ticketBorderShadow) {
          if(ticketBoderModeShadowValue == 1) {
            if(ticketLeftSide) {
              context.fillRect(0,0,1,height);
              context.fillRect(1,startY,1,size);
            }
            
            if(ticketRightSide) {
              context.fillRect(rankCanvas.width - 1,0,1,height);
              context.fillRect(rankCanvas.width - 2,startY,1,size);
            }
          }else{
            if(ticketLeftSide) {
              context.fillRect(0,0,2,height);
              context.fillRect(2,0,1,1);
              context.fillRect(2,height - 1,1,1);
            }

            if(ticketRightSide) {
              context.fillRect(rankCanvas.width - 2,0,2,height);
              context.fillRect(rankCanvas.width - 3,0,1,1);
              context.fillRect(rankCanvas.width - 3,height - 1,1,1);
            }
          }
        }
        if(ticketLeftSide) context.clearRect(0,startY,1,size);
        if(ticketRightSide) context.clearRect(rankCanvas.width - 1,startY,1,size);
      }
    }else{
      let sizeIsEven = size % 2 == 0;
      if(sizeIsEven) {
        size = size - 1
      }
      if(size > 0) {
        let startY = ((height - 1) / 2) - ((size - 1) / 2);
        if(ticketBorderShadow) {
          if(ticketBoderModeShadowValue == 1) {
            if(ticketLeftSide) {
              context.fillRect(0,0,1,height);
              context.fillRect(1,startY,1,size);
            }
            if(ticketRightSide) {
              context.fillRect(rankCanvas.width - 1,0,1,height);
              context.fillRect(rankCanvas.width - 2,startY,1,size);
            }
          }else{
            if(ticketLeftSide) {
              context.fillRect(0,0,2,height);
              context.fillRect(2,0,1,1);
              context.fillRect(2,height - 1,1,1);
            }
            if(ticketRightSide) {
              context.fillRect(rankCanvas.width - 2,0,2,height);
              context.fillRect(rankCanvas.width - 3,0,1,1);
              context.fillRect(rankCanvas.width - 3,height - 1,1,1);
            }
          }
        }
        if(ticketLeftSide) context.clearRect(0,startY,1,size);
        if(ticketRightSide) context.clearRect(rankCanvas.width - 1,startY,1,size);
      }
    }
    if(roundTopLeft) context.clearRect(0,0,1,1);
    if(roundTopRight) context.clearRect(rankCanvas.width - 1,0,1,1);
    if(roundBottomLeft) context.clearRect(0,rankCanvas.height - 1,1,1);
    if(roundBottomRight) context.clearRect(rankCanvas.width - 1,rankCanvas.height - 1,1,1); 
    //console.log(`Ticket fixed size: ${size}`);
    if(ticketBorderAuto) {
      document.getElementById("button-ticket-border-size").innerText = size;
    }
  }
  let shadowCornerEffect = document.getElementById("button-shadow-corner-effect").checked;
  if(shadowCornerEffect) {
    let shadowCornerColorElement = document.getElementById("shadow-corner-effect-color-picker");
    let shadowCornerColor = "0, 0, 0";
    if(shadowCornerColorElement) {
      shadowCornerColor = getRGBColor(shadowCornerColorElement.value)
    }
    let shadowCornerOpacityElement = document.getElementById("shadow-corner-effect-picker-opacity");
    let shadowCornerOpacity = "0.5";
    if(shadowCornerOpacityElement) {
      shadowCornerOpacity = Math.max(0,Math.min(100,shadowCornerOpacityElement.innerText)) / 100;
    }
    context.fillStyle = `rgba(${shadowCornerColor}, ${shadowCornerOpacity})`;
    
    if(roundTopLeft) {
      //context.clearRect(0,0,1,1);
      context.fillRect(1,0,1,1);
      context.fillRect(0,1,1,1);
    }
    if(roundTopRight) {
      //context.clearRect(rankCanvas.width - 1,0,1,1);
      context.fillRect(rankCanvas.width - 2,0,1,1);
      context.fillRect(rankCanvas.width - 1,1,1,1);
    }
    if(roundBottomLeft) {
      //context.clearRect(0,rankCanvas.height - 1,1,1);
      context.fillRect(0,rankCanvas.height - 2,1,1);
      context.fillRect(1,rankCanvas.height - 1,1,1);
    }
    if(roundBottomRight) {
      //context.clearRect(rankCanvas.width - 1,rankCanvas.height - 1,1,1);
      context.fillRect(rankCanvas.width - 2,rankCanvas.height - 1,1,1);
      context.fillRect(rankCanvas.width - 1,rankCanvas.height - 2,1,1);
    }
  }
  if(relief) {
    heightBeforeRelief = drawRelief(context,roundBottomLeft,roundBottomRight);
  }
  let globalBorder = document.getElementById("button-global-border").checked;
  if(globalBorder) {
    let globalBorderWidth = 1;
    try{
      globalBorderWidth = Math.max(1,Math.min(10,parseInt(document.getElementById("global-border-picker-width").innerText)));
    }catch(e){}
    drawGlobalBorder(context,globalBorderWidth);
    /*
    let globalBorderColor = `rgba(${getRGBColor(document.getElementById("global-border-picker").value)}, 1)`;
    let tempCanvas = document.createElement("canvas");
    tempCanvas.width = rankCanvas.width;
    tempCanvas.height = rankCanvas.height;
    let tempContext = tempCanvas.getContext("2d",{alpha:true});
    tempContext.drawImage(rankCanvas,0,0);

    rankCanvas.width = rankCanvas.width + 2;
    rankCanvas.height = rankCanvas.height + 2;
    context.fillStyle = globalBorderColor;
    context.fillRect(0, 0, rankCanvas.width, rankCanvas.height);
    context.drawImage(tempCanvas,1,1);
    
    if(roundTopLeft) context.clearRect(0,0,1,1);
    if(roundTopRight) context.clearRect(rankCanvas.width - 1,0,1,1);
    if(roundBottomLeft) context.clearRect(0,rankCanvas.height - 1,1,1);
    if(roundBottomRight) context.clearRect(rankCanvas.width - 1,rankCanvas.height - 1,1,1); 
    */
  }
  let imageShadow = document.getElementById("button-image-shadow").checked;
  let extraX = 1, extraY = 1;
  if(imageShadow) {
    let colorString = document.getElementById("image-shadow-color-picker").value.replace(/#/g,"");
    const r = parseInt(colorString.substring(0, 2), 16);
    const g = parseInt(colorString.substring(2, 4), 16);
    const b = parseInt(colorString.substring(4, 6), 16);
    //let globalImageShadowColor = `rgba(${getRGBColor(document.getElementById("image-shadow-color-picker").value)}, 1)`;
    let tempBlackCanvas = document.createElement("canvas");
    tempBlackCanvas.width = rankCanvas.width;
    tempBlackCanvas.height = rankCanvas.height;
    let tempBlackCanvasContext = tempBlackCanvas.getContext('2d',{alpha:true});
    let originalContext = rankCanvas.getContext('2d',{alpha:true,willReadFrequently:true});
    const originalImageData = originalContext.getImageData(0, 0, rankCanvas.width, rankCanvas.height);
    const blackData = originalImageData.data;
    for (let i = 0; i < blackData.length; i += 4) {
      blackData[i] = r; // Red
      blackData[i + 1] = g; // Green
      blackData[i + 2] = b; // Blue
    }
    tempBlackCanvasContext.putImageData(originalImageData,0,0);

    let tempCanvas = document.createElement("canvas");
    tempCanvas.width = rankCanvas.width + extraX;
    tempCanvas.height = rankCanvas.height + extraY;
    let tempContext = tempCanvas.getContext("2d",{alpha:true});
    tempContext.drawImage(tempBlackCanvas,extraX,extraY);
    tempContext.drawImage(rankCanvas,0,0);

    rankCanvas.width = tempCanvas.width;
    rankCanvas.height = tempCanvas.height;
    context.clearRect(0, 0, rankCanvas.width, rankCanvas.height);
    context.drawImage(tempCanvas,0,0);
  }
  //cutSides(context);
  //console.log("Updating previews..")
  //let newCanvas = document.getElementById("new-canvas");
  //let newContext = newCanvas.getContext("2d",{alpha:true});
  //newCanvas.width = rankCanvas.width;
  //newCanvas.height = rankCanvas.height;
  //drawOutline(newContext,rankCanvas);

  //console.log('Drew ' + string + ' at ' + size);
  updatePreviews()
}
function cutSides(context) {
  let cutSideEnabled = document.getElementById("button-cut-sides").checked;
  if(cutSideEnabled) {
    let upSize = parseInt(document.getElementById("cut-side-up-amount").innerText);
    let rightSize = parseInt(document.getElementById("cut-side-right-amount").innerText);
    let downSize = parseInt(document.getElementById("cut-side-down-amount").innerText);
    let leftSize = parseInt(document.getElementById("cut-side-left-amount").innerText);
    //console.log(upSize,rightSize,downSize,leftSize);
    if(isBulkCreating) {
      if(currentBulkData.cutSide) {
        if(currentBulkData.cutSide.hasOwnProperty("up")) upSize = currentBulkData.cutSide.up;
        if(currentBulkData.cutSide.hasOwnProperty("right")) rightSize = currentBulkData.cutSide.right;
        if(currentBulkData.cutSide.hasOwnProperty("down")) downSize = currentBulkData.cutSide.down;
        if(currentBulkData.cutSide.hasOwnProperty("left")) leftSize = currentBulkData.cutSide.left;
      }
    }
    if(upSize != 0 || rightSize != 0 || downSize != 0 || leftSize != 0) {
      let newWidth = rankCanvas.width + leftSize + rightSize;
      let newHeight = rankCanvas.height + upSize + downSize;
      let tempCanvas = document.createElement("canvas");
      tempCanvas.width = newWidth;
      tempCanvas.height = newHeight;
      //console.log(`Drawing temp canvas w=${newWidth} h=${newHeight}`);
      let tempContext = tempCanvas.getContext("2d",{alpha:true});
      tempContext.drawImage(rankCanvas,leftSize,upSize)//, rankCanvas.width, rankCanvas.height);
      //console.log(`Writing temp canvas in x=${leftSize * -1} y=${upSize * -1}`);
      //console.log(`Converting RankCanvas ${rankCanvas.width}=>${newWidth} ${rankCanvas.height}=>${newHeight}`);
      rankCanvas.width = tempCanvas.width;
      rankCanvas.height = tempCanvas.height;
      let rankContext = rankCanvas.getContext("2d",{alpha:true});
      rankContext.drawImage(tempCanvas,0,0);
    }
  }
}
function drawRelief(context,roundBottomLeft,roundBottomRight) {
  let reliefColor;
  if(isBulkCreating && typeof currentBulkData.reliefColor != "undefined") {
    reliefColor = currentBulkData.reliefColor;
  }else{
    reliefColor = `rgba(${getRGBColor(document.getElementById("relief-color-picker").value)}, 1)`;
  }
  let reliefHeight = Math.max(1,Math.min(10,parseInt(document.getElementById("relief-picker-height").innerText)));
  //let reliefColor = `rgba(${getRGBColor(document.getElementById("relief-color-picker").value)}, 1)`;
  let tempCanvas = document.createElement("canvas");
  tempCanvas.width = rankCanvas.width;
  tempCanvas.height = rankCanvas.height;
  let tempContext = tempCanvas.getContext("2d",{alpha:true});
  tempContext.drawImage(rankCanvas,0,0);
  //console.log(`Old canvas height: ${rankCanvas.height}`);
  let firstX = 0,firstY = rankCanvas.height, secondX = 1,seccondY = rankCanvas.height, thirdX = rankCanvas.width - 1,thirdY = rankCanvas.height;
  if(roundBottomLeft) {
    firstY--;
  }
  if(roundBottomRight) {
    thirdY--;
  }
  let heightBeforeRelief = rankCanvas.height;
  let newHeight = rankCanvas.height + reliefHeight;
  //console.log(`New canvas height: ${rankCanvas.height}`);
  rankCanvas.height = newHeight;
  context.fillStyle = reliefColor;
  context.fillRect(firstX, firstY, 1, reliefHeight);
  context.fillRect(secondX, seccondY, rankCanvas.width - 2, reliefHeight);
  context.fillRect(thirdX, thirdY, 1, reliefHeight);
  context.drawImage(tempCanvas,0,0);
  return heightBeforeRelief;
}
function drawGlobalBorder(context, globalBorderWidth = 1) {
  if(globalBorderWidth < 1) return;
  let globalBorderColor;
  if(isBulkCreating && typeof currentBulkData.globalBorderColor != "undefined") {
    globalBorderColor = currentBulkData.globalBorderColor.replace(/#/g,"");
  }else{
    globalBorderColor = document.getElementById("global-border-picker").value.replace(/#/g,"");
  }
  const r = parseInt(globalBorderColor.substring(0, 2), 16);
  const g = parseInt(globalBorderColor.substring(2, 4), 16);
  const b = parseInt(globalBorderColor.substring(4, 6), 16);
  
  let tempBlackCanvas = document.createElement("canvas");
  tempBlackCanvas.width = rankCanvas.width;
  tempBlackCanvas.height = rankCanvas.height;
  let tempBlackCanvasContext = tempBlackCanvas.getContext('2d',{willReadFrequently:true,alpha:true});
  let originalContext = rankCanvas.getContext('2d',{willReadFrequently:true,alpha:true});
  const originalImageData = originalContext.getImageData(0, 0, rankCanvas.width, rankCanvas.height);
  const blackData = originalImageData.data;
  for (let i = 0; i < blackData.length; i += 4) {
    blackData[i] = r; // Red
    blackData[i + 1] = g; // Green
    blackData[i + 2] = b; // Blue
  }
  tempBlackCanvasContext.putImageData(originalImageData,0,0);
  let savedCanvas;
  for(let i = 0; i < globalBorderWidth; i++) {
    if(i == 0) {
      savedCanvas = document.createElement("canvas");
      savedCanvas.width = tempBlackCanvas.width + 2;
      savedCanvas.height = tempBlackCanvas.height + 2;
      let savedCanvasContext = savedCanvas.getContext('2d',{willReadFrequently:true,alpha:true});
      savedCanvasContext.drawImage(tempBlackCanvas,0,0);
      savedCanvasContext.drawImage(tempBlackCanvas,0,1);
      savedCanvasContext.drawImage(tempBlackCanvas,0,2);
      savedCanvasContext.drawImage(tempBlackCanvas,1,0);
      savedCanvasContext.drawImage(tempBlackCanvas,1,1);
      savedCanvasContext.drawImage(tempBlackCanvas,1,2);
      savedCanvasContext.drawImage(tempBlackCanvas,2,0);
      savedCanvasContext.drawImage(tempBlackCanvas,2,1);
      savedCanvasContext.drawImage(tempBlackCanvas,2,2);
    }else{
      let newCanvas = document.createElement("canvas");
      newCanvas.width = savedCanvas.width + 2;
      newCanvas.height = savedCanvas.height + 2;
      let newCanvasContext = newCanvas.getContext('2d',{alpha:true});
      newCanvasContext.drawImage(savedCanvas,0,0);
      newCanvasContext.drawImage(savedCanvas,2,0);
      newCanvasContext.drawImage(savedCanvas,0,2);
      newCanvasContext.drawImage(savedCanvas,2,2);
      savedCanvas.width = newCanvas.width;
      savedCanvas.height = newCanvas.height;
      let savedCanvasContext = savedCanvas.getContext('2d',{alpha:true});
      savedCanvasContext.drawImage(newCanvas,0,0)
    }
  }
  if(typeof savedCanvas != "undefined") {
    let copyOriginal = copyCanvas(rankCanvas);
    rankCanvas.width = savedCanvas.width;
    rankCanvas.height = savedCanvas.height;
    context.clearRect(0, 0, rankCanvas.width, rankCanvas.height);
    context.drawImage(savedCanvas,0,0);
    context.drawImage(copyOriginal,globalBorderWidth,globalBorderWidth);
  }
}
function copyCanvas(canvas) {
  let copyCanvas = document.createElement("canvas");
  copyCanvas.width = canvas.width;
  copyCanvas.height = canvas.height;
  let copyCanvasContext = copyCanvas.getContext('2d',{alpha:true});
  copyCanvasContext.drawImage(canvas,0,0);
  return copyCanvas;
}
function drawGlobalShadow(context) {
  let globalShadowHeight = document.getElementById("global-shadow-picker-height").innerText;
  if(isNaN(globalShadowHeight)) globalShadowHeight = 3;
  else globalShadowHeight = Math.max(0,Math.min(rankCanvas.height,globalShadowHeight));
  let globalShadowOpacity = document.getElementById("global-shadow-picker-opacity").innerText;
  if(isNaN(globalShadowOpacity)) globalShadowOpacity = 0.25;
  else globalShadowOpacity = Math.max(0,Math.min(100,globalShadowOpacity)) / 100;
  let globalShadowColor = `rgba(${getRGBColor(document.getElementById("global-shadow-picker").value)}, ${globalShadowOpacity})`;
  context.fillStyle = globalShadowColor;
  context.fillRect(0, rankCanvas.height - globalShadowHeight, rankCanvas.width, globalShadowHeight);

  let buttonGlobalShadowRoundedOption = document.getElementById("button-global-shadow-rounded").checked;
  if(buttonGlobalShadowRoundedOption) {
    let globalShadowRoundedWidthElement = document.getElementById("button-global-shadow-rounded-width");
    let globalShadowRoundedWidth = globalShadowRoundedWidthElement.innerText;
    if(isNaN(globalShadowRoundedWidth)) globalShadowRoundedWidth = 1;
    else globalShadowRoundedWidth = Math.max(0,Math.min(parseInt(globalShadowRoundedWidth),rankCanvas.width / 2));
    globalShadowRoundedWidthElement.innerText = parseInt(globalShadowRoundedWidth);
    //console.log(`Shadow rounded width: ${globalShadowRoundedWidth} (${parseInt(globalShadowRoundedWidth)})`);
    context.fillRect(0, rankCanvas.height - globalShadowHeight - 1, globalShadowRoundedWidth, 1);
    context.fillRect(rankCanvas.width - globalShadowRoundedWidth, rankCanvas.height - globalShadowHeight - 1, globalShadowRoundedWidth, 1);
  }
}
function drawOutline(context,img) {
        
  var dArr = [-1,-1, 0,-1, 1,-1, -1,0, 1,0, -1,1, 0,1, 1,1], // offset array
      s = 1,  // thickness scale
      i = 0,  // iterator
      x = 1,  // final position
      y = 0;
  
  // draw images at offsets from the array scaled by s
  for(; i < dArr.length; i += 2)
  context.drawImage(img, x + dArr[i]*s, y + dArr[i+1]*s);
  
  // fill with color
  context.globalCompositeOperation = "source-in";
  context.fillStyle = "white";
  context.fillRect(0,0,canvas.width, canvas.height);
  
  // draw original image in normal mode
  context.globalCompositeOperation = "source-over";
  context.drawImage(img, x, y);
}
function updatePreviews(){
  let lorePreview = document.getElementById("button-lore-preview").checked;
  if(lorePreview) {
    let destinationCanvas = document.getElementById("copy-canvas-lore");
    if(destinationCanvas) {
      destinationCanvas.width = rankCanvas.width;
      destinationCanvas.height = rankCanvas.height;
      let destCtx = destinationCanvas.getContext('2d');
      destCtx.drawImage(rankCanvas, 0, 0);
    }
  }
  let chatPreview = document.getElementById("button-chat-preview").checked;
  if(chatPreview) {
    let destinationCanvas = document.getElementById("copy-canvas-chat");
    if(destinationCanvas) {
      destinationCanvas.width = rankCanvas.width;
      destinationCanvas.height = rankCanvas.height;
      let destCtx = destinationCanvas.getContext('2d');
      destCtx.drawImage(rankCanvas, 0, 0);
    }
  }
  let tagPreview = document.getElementById("button-tab-preview").checked;
  if(tagPreview) {
    let destinationCanvas = document.getElementById("copy-canvas-tab");
    if(destinationCanvas) {
      destinationCanvas.width = rankCanvas.width;
      destinationCanvas.height = rankCanvas.height;
      let destCtx = destinationCanvas.getContext('2d');
      destCtx.drawImage(rankCanvas, 0, 0);
    }
  }
  let nametagPreview = document.getElementById("button-nametag-preview").checked;
  if(nametagPreview) {
    let destinationCanvas = document.getElementById("copy-canvas-nametag");
    if(destinationCanvas) {
      destinationCanvas.width = rankCanvas.width;
      destinationCanvas.height = rankCanvas.height;
      let destCtx = destinationCanvas.getContext('2d');
      destCtx.drawImage(rankCanvas, 0, 0);
    }
  }
}
function alertBar(text = ['Thanks for using our tool!','- AlonsoAliaga'], time = 3000, size = [25,15]) {
  //console.log(`Alerting..`);
  if(alertMessageTimeout) {
    clearTimeout(alertMessageTimeout);
    var sb = document.getElementById("snackbar");
    sb.classList.remove("show6","show");
  }
  var sb = document.getElementById("snackbar");

  //this is where the class name will be added & removed to activate the css

  sb.innerHTML = `<b style="font-size: ${size[0]}px;">${text[0]}</b><br><span style="font-size: ${size[1]}px;">${text[1]}</span>`
  sb.classList.add(time == 6000 ? "show6":"show");

  alertMessageTimeout = setTimeout(()=>{ sb.classList.remove("show6","show"); }, time);
}
function alertCopied() {
  if(copiedTimeout) {
    clearTimeout(copiedTimeout);
    var sb = document.getElementById("snackbar");
    sb.className = sb.className.replace("show", "");
  }
  var sb = document.getElementById("snackbar");

  //this is where the class name will be added & removed to activate the css
  sb.className = "show";

  copiedTimeout = setTimeout(()=>{ sb.className = sb.className.replace("show", ""); }, 3000);
}
let textX = 3,
  textY = 2;
function moveShadow(direction) {
  if(direction == "up") {
    additionalShadowY--;
  }else if(direction == "right") {
    additionalShadowX++;
  }else if(direction == "down") {
    additionalShadowY++;
  }else if(direction == "left") {
    additionalShadowX--;
  }
  updateRankImage();
}
function moveText(direction) {
  if(direction == "up") {
    textY--;
  }else if(direction == "right") {
    textX++;
  }else if(direction == "down") {
    textY++;
  }else if(direction == "left") {
    textX--;
  }
  updateRankImage();
}
function moveIcon(direction) {
  if(direction == "up") {
    iconY--;
  }else if(direction == "right") {
    iconX++;
  }else if(direction == "down") {
    iconY++;
  }else if(direction == "left") {
    iconX--;
  }
  updateRankImage();
}
function markAll() {
  for(let errorType of Object.keys(errorsFormat)) {
    let errorTypeOption = document.getElementById(`${errorType}-option`);
    if(errorTypeOption) {
      errorTypeOption.checked = true;
    }
  }
}
function unmarkAll() {
  for(let errorType of Object.keys(errorsFormat)) {
    let errorTypeOption = document.getElementById(`${errorType}-option`);
    if(errorTypeOption) {
      errorTypeOption.checked = false;
    }
  }
}
function toggleCorner(element) {
  if(element.classList.contains("button-enabled")) {
    element.classList.remove("button-enabled");
  }else{
    element.classList.add("button-enabled");
  }
  updateRankImage();
}
function switchInternalBorderColors() {
  let firstColor = document.getElementById("first-color-internal-border-color-picker").value;
  let firstOpacity = document.getElementById("first-color-internal-border-opacity-picker").innerText;

  let secondColor = document.getElementById("second-color-internal-border-color-picker").value;
  let secondOpacity = document.getElementById("second-color-internal-border-opacity-picker").innerText;

  document.getElementById("first-color-internal-border-color-picker").value = secondColor;
  document.getElementById("first-color-internal-border-opacity-picker").innerText = secondOpacity;

  document.getElementById("second-color-internal-border-color-picker").value = firstColor;
  document.getElementById("second-color-internal-border-opacity-picker").innerText = firstOpacity;
}
function test() {
  console.log("TESTING WORKS!")
}
let  buttonsToToggleDarkMode = ["testfontbutton","font-effect-picker-height","button-add-border-div","button-shadow-left-div","appearance","inputText","download-all",
"border-opacity-picker","shadow-opacity-picker","colors-amount","button-toggle-custom-gradient-div","location-selection","button-rounded-div",
"font-selection","button-select-custom-icon-div","button-upload-custom-icon-div","height-picker","width-picker","angle-picker","button-auto-height-div","button-auto-width-div",
"button-lore-preview-div","new-lore-button-div","button-nametag-preview-div","button-chat-preview-div","button-tab-preview-div","relief-picker-height",
"button-custom-icon-shadow-div","button-remove-custom-icon-div","lore-input","chat-preview-format-input","chat-preview-username-input","chat-preview-message-input",
"tab-preview-format-input","tab-name-format-input","tab-preview-username-input","nametag-preview-format-input","nametag-preview-username-input",
"button-remove-watermark-download-div","button-custom-background-div","button-revert-skin-div","button-shadow-div","button-no-background-div",
"global-border-picker-height","font-gradient-colors-amount","font-gradient-angle-picker","font-gradient-preset-picker",
"global-shadow-picker-opacity","global-shadow-picker-height","button-global-shadow-rounded-width","shadow-corner-effect-picker-opacity",
"button-shadow-corner-effect-div","button-font-gradient-div","button-relief-div","button-global-shadow-div","button-shadow-below-font-div",
"button-shadow-rounded-font-div","button-global-border-div","button-custom-font-gradient-div",
"first-color-internal-border-opacity-picker","second-color-internal-border-opacity-picker","button-internal-gradient-border-div",
"internal-gradient-border-colors-amount","internal-gradient-border-colors-angle",
"button-internal-colored-corner-border-div","button-internal-gradient-border-rotate-div","button-internal-gradient-border-switch-div",
"button-ticket-border-div","button-ticket-border-auto-div","button-ticket-border-size","ticket-border-shadow-picker-opacity",
"button-ticket-border-shadow-div","button-ticket-border-shadow-mode-div","identifier-bulk-subfolder",
"button-toggle-oraxen-config-div","identifier-oraxen-input","path-oraxen-input","permission-oraxen-input","oraxen-output-yaml","button-oraxen-copy-all-div","oraxen-instructions",
"button-toggle-itemsadder-config-div","namespace-itemsadder-input","identifier-itemsadder-input","permission-itemsadder-input","itemsadder-output-yaml","button-itemsadder-copy-new-section-div","button-itemsadder-copy-all-div","itemsadder-instructions",
"button-toggle-bulk-create-div","button-toggle-bulk-create-start-div","additional-width-picker","additional-height-picker",
"image-shadow-picker-height","button-image-shadow-div","bulk-input","button-bulk-only-showcase-div","global-border-picker-width",
"global-new-font-width","global-new-font-height","button-toggle-new-font-div","new-font-output","button-toggle-new-font-copy-div",
"button-font-effect-div","button-transparent-background-div","button-bulk-number-if-repeated","bulk-config-name","button-bulk-download-last-div",
"button-bulk-number-if-repeated-div","oraxen-remove-chat-div","button-cut-sides-div",
"cut-side-up-amount","cut-side-right-amount","cut-side-down-amount","cut-side-left-amount",
"pixels-between-lines","pixels-between-ranks"
];
function toggleDarkmode() {
    if (document.getElementById('darkmode').checked == true) {
      document.body.classList.add('dark');
      //document.getElementById('result').classList.add("darktextboxes");
      for(let n of   buttonsToToggleDarkMode) {
        let d = document.getElementById(n);
        if(d) {
          d.classList.remove("lightbuttonboxes");
          d.classList.add("darkbuttonboxes");
        }
      }
      let success = document.getElementById('success_message');
      if(success) {
        success.classList.remove("successlight");
        success.classList.add("successdark");
      }
    } else {
      document.body.classList.remove('dark');
      //document.getElementById('result').classList.remove("darktextboxes");
      //Buttons
      for(let n of   buttonsToToggleDarkMode) {
        let d = document.getElementById(n);
        if(d) {
          d.classList.remove("darkbuttonboxes");
          d.classList.add("lightbuttonboxes");
        }
      }
      let success = document.getElementById('success_message');
      if(success) {
        success.classList.remove("successdark");
        success.classList.add("successlight");
      }
    }
    //console.log("Dark mode is now: "+(document.getElementById('darkmode').checked))
}
function checkSite(window) {
  let search = window.location.search;
  /*
  if(typeof search !== "undefined" && search.length > 0) {
    let parts = atob(search.slice(1)).split("&");
    for(let part of parts) {
      let [k,v] = part.split("=");
      k = btoa(k);
      if(k == "dXNlcm5hbWU=") {
        if(v.match(/[a-z0-9_]/gi)) {
          setTimeout(()=>{
            usernameInput.value = v;
            processUsername();
          },500);
        }
      }
    }
  }
  */
  setTimeout(()=>{
    let href = window.location.href;
    if(!href.includes(atob("YWxvbnNvYWxpYWdhLmdpdGh1Yi5pbw=="))) {
      try{document.title = `Page stolen from https://${atob("YWxvbnNvYWxpYWdhLmdpdGh1Yi5pbw==")}`;}catch(e){}
      window.location = `https://${atob("YWxvbnNvYWxpYWdhLmdpdGh1Yi5pbw==")}/rank-textures/`}
  });
  fetch('https://raw.githubusercontent.com/AlonsoAliaga/AlonsoAliagaAPI/refs/heads/main/api/tools/tools-list.json')
    .then(res => res.json())
    .then(content => {
      let toolsData = content;
      let toolsArray = []
      for(let toolData of toolsData) {
        let clazz = typeof toolData.clazz == "undefined" ? "" : ` class="${toolData.clazz}"`;
        let style = typeof toolData.style == "undefined" ? "" : ` style="${toolData.style}"`;
        toolsArray.push(`<span>💠</span> <span${clazz}${style}><a title="${toolData.description}" id="tool-priority-${toolData.priority}" href="${toolData.link}">${toolData.name}</a></span>`);
      }
      document.getElementById("tools-for-you").innerHTML = toolsArray.join(`<br>`);
    });
}
function selectTab(evt, tabName, buttonName) {
  // Declare all variables
  var i, tabcontent, tablinks;

  // Get all elements with class="tabcontent" and hide them
  tabcontent = document.getElementsByClassName("tabcontent");
  for (i = 0; i < tabcontent.length; i++) {
    tabcontent[i].style.display = "none";
  }

  // Get all elements with class="tablinks" and remove the class "active"
  tablinks = document.getElementsByClassName("tablinks");
  for (i = 0; i < tablinks.length; i++) {
    tablinks[i].className = tablinks[i].className.replace(" active", "");
  }

  // Show the current tab, and add an "active" class to the button that opened the tab
  document.getElementById(tabName).style.display = "block";
  if(evt) {
    evt.currentTarget.className += " active";
  }else if(buttonName) {
    let b = document.getElementById(buttonName);
    if(b) b.className += " active";
  }
}
//const jsyaml = require("js-yaml");
function compareFiles() {
  clearResults();
  processed1 = undefined;
  processed2 = undefined;
  outputExtension = ".yml";
  let input1 = document.getElementById("current-config");
  let input2 = document.getElementById("new-config");
  let currentFile = input1.files[0];
  let newFile = input2.files[0];
  if(typeof currentFile == "undefined") {
    alert('Current configuration cannot be empty!');
    return;
  }
  let matchExtension = allowedExtensions.find(r=> currentFile.name.endsWith(r));
  if(!matchExtension) {
    alert(`Current configuration must be a valid yaml file!\nAllowed types: ${allowedExtensions.join(" ")}`);
    return;
  }
  if(typeof newFile == "undefined") {
    alert('New configuration cannot be empty!');
    return;
  }
  if(!allowedExtensions.find(r=> newFile.name.endsWith(r))) {
    alert(`New configuration must be a valid yaml file!\nAllowed types: ${allowedExtensions.join(" ")}`);
    return;
  }
  outputExtension = matchExtension;
  // console.log(`Attempting to compare '${currentFile.name}' & '${newFile.name}'`);
  input1.value = "";
  input2.value = "";
  var reader1 = new FileReader();
  //let schem1 = jsyaml.DEFAULT_SCHEMA;
  reader1.onloadend = function(event) {
    // console.log(`Starting load of ${currentFile.name}`)
    let result = event.target.result;
    // console.log(`Successfully result ${currentFile.name}`)
    //processed1 = result;
    //console.log(result);
    /*
    processed1 = jsyaml.load(result, { schem1 });
    console.log(`Successfully loaded ${currentFile.name}`)
    console.log(processed1)
    */
    //if(processed2) processComparator();

    //var reader2 = new FileReader();
    //let schem2 = jsyaml.DEFAULT_SCHEMA;
    reader1.onloadend = function(event2) {
      // console.log(`Starting load of ${newFile.name}`)
      let result2 = event2.target.result;
      // console.log(`Successfully result ${newFile.name}`)
      //processed2 = result2;
      //console.log(result2);
      //processed2 = jsyaml.load(result2, { schem2 });
      //console.log(`Successfully loaded ${newFile.name}`)
      //console.log(processed2)
      if(result) processComparator(result,result2);
    }

    reader1.readAsText(newFile)
  }
  reader1.readAsText(currentFile)
}
function mergeObjects(obj1, obj2) {
  const diff = {};
  for (let key in obj2) {
    if (obj2.hasOwnProperty(key)) {
      if (
        typeof obj2[key] === "object" &&
        obj2[key] !== null &&
        typeof obj1[key] === "object" &&
        obj1[key] !== null && !Array.isArray(obj2[key])
      ) {
        const nestedDiff = mergeObjects(obj1[key], obj2[key]);
        if (Object.keys(nestedDiff).length > 0) {
          diff[key] = nestedDiff;
        }
      } else if (!obj1.hasOwnProperty(key)/* || obj1[key] !== obj2[key]*/) {
        diff[key] = obj2[key];
        obj1[key] = obj2[key];
      }
    }
  }
  return diff;
}
let stopBulkCreation = false;
let processed1;
let processed2;
let outputExtension;
let allowedExtensions = [".yaml",".yml",".txt"]
function processComparator(processedCurrent,processedNew) {
  let schem = jsyaml.DEFAULT_SCHEMA;
  let first = jsyaml.load(processedCurrent,schem)
  let second = jsyaml.load(processedNew,schem)
  let firstToModify = jsyaml.load(processedCurrent,schem)
  // console.log(first)
  // console.log(second)
  // setTimeout(() => {
  //   first["love"] = "HOLAAAAAAAAAAAAAAAAA";
  //   second["love"] = "HOLAAAAAAAAAAAAAAAAA 2222222222222222222";
  // }, 5000);
  // console.log(`Both files were proccessed!`);
  // //console.log(jsyaml)
  // console.log(`This is processed #1:`)
  // console.log(processed1)
  // console.log(`Successfully loaded #1`)
  // //processed1 = jsyaml.load(processedCurrent,schem);
  // console.log(processed1)
  // console.log(`This is processed #2:`)
  // console.log(processed2)
  // console.log(`Successfully loaded #2`)
  // //processed2 = jsyaml.load("Hello: 10",schem);
  // console.log(processed2)
  let resultsFull = document.getElementById("results");
  if(resultsFull) {
    resultsFull.style.display = "block";
  }
  selectTab(null, 'fixed-config',"f-c-b");
  let difference = mergeObjects(firstToModify,second);
  // console.log(`This is the new yaml #1:`)
  // console.log(firstToModify);
  // console.log(`This is difference:`)
  // console.log(difference);
  let fixedYAML = jsyaml.dump(firstToModify,{skipInvalid:true,lineWidth:-1,noCompatMode:true})
  let differenceYAML;
  if(Object.keys(difference).length === 0) {
    differenceYAML = "#We couldn't find any missing option. Your config is up-to-date!";
  }else{
    differenceYAML = jsyaml.dump(difference,{skipInvalid:true,lineWidth:-1,noCompatMode:true})
  }
  processed1 = fixedYAML;
  processed2 = differenceYAML;
  document.getElementById("output-fixed").innerText = fixedYAML;
  document.getElementById("output-differences").innerText = differenceYAML;
  // console.log(fixedYAML);
  // console.log(differenceYAML);
  //console.log(YAML)
}
function downloadRank() {
  var anchor = document.createElement("a");
  anchor.href = rankCanvas.toDataURL("image/png");
  let text = inputText?.value || `Unknown`;
  anchor.download = `Rank-${text}(alonsoaliaga.com/rank-textures).png`;
  anchor.click();
}
const shadowLocationsBackup = {
  up: {
    name: "Up ⬆️",
    shadow:{
      x: 2,
      y: 1
    },
    letter:{
      x: 2,
      y: 2
    },
    icon: {
      x: 0,
      y: -1
    }
  },
  right_up: {
    name: "Right up ↗️",
    shadow:{
      x: 3,
      y: 1
    },
    letter:{
      x: 2,
      y: 2
    },
    icon: {
      x: 1,
      y: -1
    }
  },
  right: {
    name: "Right ➡️",
    shadow:{
      x: 3,
      y: 2
    },
    letter:{
      x: 2,
      y: 2
    },
    icon: {
      x: 1,
      y: 0
    }
  },
  right_down: {
    name: "Right down ↘️",
    shadow:{
      x: 3,
      y: 2
    },
    letter:{
      x: 2,
      y: 1
    },
    icon: {
      x: 1,
      y: 1
    }
  },
  down: {
    name: "Down ⬇️",
    shadow:{
      x: 2,
      y: 2
    },
    letter:{
      x: 2,
      y: 1
    },
    icon: {
      x: 0,
      y: 1
    }
  },
  left_down: {
    name: "Left down ↙️",
    shadow:{
      x: 2,
      y: 2
    },
    letter:{
      x: 3,
      y: 1
    },
    icon: {
      x: -1,
      y: 1
    }
  },
  left: {
    name: "Left ⬅️",
    shadow:{
      x: 2,
      y: 2
    },
    letter:{
      x: 3,
      y: 2
    },
    icon: {
      x: -1,
      y: 0
    }
  },
  left_up: {
    name: "Left up ↖️",
    shadow:{
      x: 2,
      y: 1
    },
    letter:{
      x: 3,
      y: 2
    },
    icon: {
      x: -1,
      y: -1
    }
  }
}
const shadowLocations = {
  up: {
    name: "Up ⬆️",
    shadow:{
      x: 0,
      y: -1
    },
    letter:{
      x: 2,
      y: 2
    },
    icon: {
      x: 0,
      y: -1
    }
  },
  right_up: {
    name: "Right up ↗️",
    shadow:{
      x: 1,
      y: -1
    },
    letter:{
      x: 2,
      y: 2
    },
    icon: {
      x: 1,
      y: -1
    }
  },
  right: {
    name: "Right ➡️",
    shadow:{
      x: 1,
      y: 0
    },
    letter:{
      x: 2,
      y: 2
    },
    icon: {
      x: 1,
      y: 0
    }
  },
  right_down: {
    name: "Right down ↘️",
    shadow:{
      x: 1,
      y: 1
    },
    letter:{
      x: 2,
      y: 1
    },
    icon: {
      x: 1,
      y: 1
    }
  },
  down: {
    name: "Down ⬇️",
    shadow:{
      x: 0,
      y: 1
    },
    letter:{
      x: 2,
      y: 1
    },
    icon: {
      x: 0,
      y: 1
    }
  },
  left_down: {
    name: "Left down ↙️",
    shadow:{
      x: -1,
      y: 1
    },
    letter:{
      x: 3,
      y: 1
    },
    icon: {
      x: -1,
      y: 1
    }
  },
  left: {
    name: "Left ⬅️",
    shadow:{
      x: -1,
      y: 0
    },
    letter:{
      x: 3,
      y: 2
    },
    icon: {
      x: -1,
      y: 0
    }
  },
  left_up: {
    name: "Left up ↖️",
    shadow:{
      x: -1,
      y: -1
    },
    letter:{
      x: 3,
      y: 2
    },
    icon: {
      x: -1,
      y: -1
    }
  }
}
let currentFont = "rounded5x5"
function updateFontSelection() {
  let select = document.getElementById('font-selection');
  if(currentFont !== select.value) {
    let current = availableFonts[currentFont];
    let newFont = availableFonts[select.value];
    if(current && newFont) {
      if(current.Height != newFont.Height) {
        //New font size selected
        //console.log(`New size selected: ${newFont.Height}`);
        let buttonAutoHeight = document.getElementById("button-auto-height");
        //console.log(`Esta: ${buttonAutoHeight.checked}`)
        if(buttonAutoHeight.checked) {
          let heightPicker = document.getElementById("height-picker");
          let newHeight = parseInt(heightPicker.innerText) + 4;
          heightPicker.innerText = Math.max(1,newHeight);
          updateRankImage();
        }
      }
    }
  }
  currentFont = select.value;
}
function addDefaultsFonts() {
  let select = document.getElementById('font-selection');
  if(select) {
    select.innerHTML = "";
    for(let value of Object.keys(availableFonts)) {
      //console.log(`Checking format value: ${value}`);
      let data = availableFonts[value];
      if(data) {
        if(data.Disabled) continue;
        //console.log(`Adding ${data.Name} with value ${value}`);
        let option = document.createElement('option');
        option.innerHTML = data.Name;
        option.setAttribute("value",`${value}`);
        option.setAttribute("style",`text-align: center;padding: 5px 10px 5px 5px;`);
        select.appendChild(option);
      }
    }
    select.value = defaultFontIdentifier;
  }
}
function addDefaultsLocations() {
  let select = document.getElementById('location-selection');
  if(select) {
    for(let value of Object.keys(shadowLocations)) {
      // console.log(`Checking format value: ${value}`);
      let data = shadowLocations[value];
      if(data) {
        //console.log(`Adding ${data.name} with value ${value}`);
        let option = document.createElement('option');
        option.innerHTML = data.name;
        option.setAttribute("value",`${value}`);
        option.setAttribute("style",`text-align: center;padding: 5px;`);
        select.appendChild(option);
      }
    }
    select.value = "left";
    additionalShadowX = shadowLocations[select.value].shadow.x,
    additionalShadowY = shadowLocations[select.value].shadow.y;
  }
}
function toggleInternalColoredCornerBorderBox(event) {
  let effectBox = document.getElementById("button-internal-colored-corner-border-box");
  let effectOption = document.getElementById("button-internal-colored-corner-border").checked;
  if(effectOption) {
    document.getElementById("button-internal-gradient-border").checked = false;
    toggleInternalGradientBorderBox(event)

    effectBox.classList.add("expanded");
  }else{
    effectBox.classList.remove("expanded");
  }
}
function toggleInternalGradientBorderBox(event) {
  let effectBox = document.getElementById("button-internal-gradient-border-box");
  let effectOption = document.getElementById("button-internal-gradient-border").checked;
  if(effectOption) {
    document.getElementById("button-internal-colored-corner-border").checked = false;
    toggleInternalColoredCornerBorderBox(event)

    effectBox.classList.add("expanded");
  }else{
    effectBox.classList.remove("expanded");
  }
}
function toggleNewFontBox(event) {
  let effectBox = document.getElementById("toggle-new-font-box");
  let effectOption = document.getElementById("button-toggle-new-font").checked;
  if(effectOption) {
    effectBox.classList.add("expanded");
  }else{
    effectBox.classList.remove("expanded");
  }
}
function toggleImportFontBox(event) {
  let effectBox = document.getElementById("toggle-import-font-box");
  let effectOption = document.getElementById("button-toggle-import-font").checked;
  if(effectOption) {
    effectBox.classList.add("expanded");
  }else{
    effectBox.classList.remove("expanded");
  }
}
function toggleBulkCreateBox(event) {
  let effectBox = document.getElementById("toggle-bulk-create-box");
  let effectOption = document.getElementById("button-toggle-bulk-create").checked;
  if(effectOption) {
    effectBox.classList.add("expanded");
  }else{
    effectBox.classList.remove("expanded");
  }
}
function toggleOraxenConfigBox(event) {
  let effectBox = document.getElementById("toggle-oraxen-config-box");
  let effectOption = document.getElementById("button-toggle-oraxen-config").checked;
  if(effectOption) {
    effectBox.classList.add("expanded");
  }else{
    effectBox.classList.remove("expanded");
  }
}
function toggleItemsAdderConfigBox(event) {
  let effectBox = document.getElementById("toggle-itemsadder-config-box");
  let effectOption = document.getElementById("button-toggle-itemsadder-config").checked;
  if(effectOption) {
    effectBox.classList.add("expanded");
  }else{
    effectBox.classList.remove("expanded");
  }
}
function toggleTicketBorderShadowBox(event) {
  let effectBox = document.getElementById("ticket-border-shadow-box");
  let effectOption = document.getElementById("button-ticket-border-shadow").checked;
  if(effectOption) {
    effectBox.classList.add("expanded");
  }else{
    effectBox.classList.remove("expanded");
  }
}
function toggleTicketBorder(event) {
  let effectBox = document.getElementById("ticket-border-box");
  let effectOption = document.getElementById("button-ticket-border").checked;
  if(effectOption) {
    effectBox.classList.add("expanded");
  }else{
    effectBox.classList.remove("expanded");
  }
}
function toggleGlobalShadowRounded(event) {
  let effectBox = document.getElementById("button-shadow-rounded-box");
  let effectOption = document.getElementById("button-global-shadow-rounded").checked;
  if(effectOption) {
    effectBox.classList.add("expanded");
  }else{
    effectBox.classList.remove("expanded");
  }
}
function toggleShadowCornerEffectBox(event) {
  let effectBox = document.getElementById("shadow-corner-effect-box");
  let effectOption = document.getElementById("button-shadow-corner-effect").checked;
  if(effectOption) {
    effectBox.classList.add("expanded");
  }else{
    effectBox.classList.remove("expanded");
  }
}
function toggleGlobalShadowBox(event) {
  let effectBox = document.getElementById("global-shadow-box");
  let effectOption = document.getElementById("button-global-shadow").checked;
  if(effectOption) {
    effectBox.classList.add("expanded");
  }else{
    effectBox.classList.remove("expanded");
  }
}
function toggleCustomColorFontGradientBox(event) {
  let effectBox = document.getElementById("custom-color-font-gradient-box");
  let effectOption = document.getElementById("button-custom-font-gradient").checked;
  if(effectOption) {
    fontGradientType = 1;
    effectBox.classList.add("expanded");
  }else{
    fontGradientType = 0;
    effectBox.classList.remove("expanded");
  }
}
function toggleCustomFontGradientBox(event) {
  let effectBox = document.getElementById("custom-font-gradient-box");
  let effectOption = document.getElementById("button-font-gradient").checked;
  if(effectOption) {
    effectBox.classList.add("expanded");
    let fontEffectOption = document.getElementById("button-font-effect");
    fontEffectOption.checked = false;
    toggleCustomFontEffectBox(event);
  }else{
    effectBox.classList.remove("expanded");
  }
}
function toggleGlobalBorderBox(event) {
  let effectBox = document.getElementById("global-border-box");
  let effectOption = document.getElementById("button-global-border").checked;
  if(effectOption) {
    effectBox.classList.add("expanded");
  }else{
    effectBox.classList.remove("expanded");
  }
}
function toggleImageShadowBox(event) {
  let effectBox = document.getElementById("custom-image-shadow-box");
  let effectOption = document.getElementById("button-image-shadow").checked;
  if(effectOption) {
    effectBox.classList.add("expanded");
  }else{
    effectBox.classList.remove("expanded");
  }
}
function toggleReliefBox(event) {
  let effectBox = document.getElementById("custom-relief-box");
  let effectOption = document.getElementById("button-relief").checked;
  if(effectOption) {
    effectBox.classList.add("expanded");
  }else{
    effectBox.classList.remove("expanded");
  }
}
function toggleCustomFontEffectBox(event) {
  let effectBox = document.getElementById("custom-font-effect-box");
  let effectOption = document.getElementById("button-font-effect").checked;
  if(effectOption) {
    effectBox.classList.add("expanded");
    let fontEffectOption = document.getElementById("button-font-gradient");
    fontEffectOption.checked = false;
    toggleCustomFontGradientBox(event);
  }else{
    effectBox.classList.remove("expanded");
  }
}
function toggleShadowBox(event) {
  let shadowBox = document.getElementById("custom-shadow-box");
  let shadowOption = document.getElementById("button-shadow").checked;
  if(shadowOption) {
    shadowBox.classList.add("expanded");
  }else{
    shadowBox.classList.remove("expanded");
  }
}
function toggleBorderBox(event) {
  let borderBox = document.getElementById("custom-border-box");
  let borderOption = document.getElementById("button-add-border").checked;
  if(borderOption) {
    borderBox.classList.add("expanded");
  }else{
    borderBox.classList.remove("expanded");
  }
}
function toggleCutSidesBox(event) {
  let optionBox = document.getElementById("cut-sides-box");
  let checkedOption = document.getElementById("button-cut-sides").checked;
  if(checkedOption) {
    optionBox.classList.add("expanded");
  }else{
    optionBox.classList.remove("expanded");
  }
}
function toggleCustomGradientBox(event) {
  let customGradientBox = document.getElementById("custom-gradient-box");
  let customGradientsOpened = document.getElementById("button-toggle-custom-gradient").checked;
  if(customGradientsOpened) {
    if(event) backgroundType = 2;
    customGradientBox.classList.add("expanded");
    updateRankImage();
  }else{
    backgroundType = 0;
    customGradientBox.classList.remove("expanded");
    updateRankImage();
  }
}
function toggleWatermark(event) {
  let removeWatermark = document.getElementById("button-remove-watermark-download").checked;
  let downloadButton = document.getElementById("download-all-label");
  if(removeWatermark) {
    downloadButton.innerText = "Download your McPFP without watermark📥"
  }else{
    downloadButton.innerText = "Download your McPFP with watermark 📥"
  }
}
let colorsFontGradientButton = document.getElementById("font-gradient-colors-amount");
let colorsBorderGradientButton = document.getElementById("internal-gradient-border-colors-amount");
let colorsButton = document.getElementById("colors-amount");
const maxColorsAmount = 100;
const maxFontGradientColorsAmount = 100;
const maxInternalGradientColorsAmount = 100;
function updateGradientBorderColors() {
  let currentAmount = colorsBorderGradientButton.innerText;
  if(isNaN(currentAmount)) {
    currentAmount = 2;
    colorsBorderGradientButton.innerText = currentAmount;
  }else{
    if(currentAmount < 1) {
      currentAmount = 1;
    }
    colorsBorderGradientButton.innerText = currentAmount;
  }
  //console.log(`Limiting to ${currentAmount} font colors!`)
  for(let i = maxInternalGradientColorsAmount; i >= parseInt(currentAmount);i--) {
    let pickerToHide = document.getElementById(`internal-gradient-color-picker-${i}`);
    //console.log(`Hiding color #${i}`);
    if(pickerToHide) {
      pickerToHide.style.display = "none";
    }
  }
  //updateRankImage();
}
function updateFontGradientColors() {
  let currentAmount = colorsFontGradientButton.innerText;
  if(isNaN(currentAmount)) {
    currentAmount = 2;
    colorsFontGradientButton.innerText = currentAmount;
  }else{
    if(currentAmount < 1) {
      currentAmount = 1;
    }
    colorsFontGradientButton.innerText = currentAmount;
  }
  //console.log(`Limiting to ${currentAmount} font colors!`)
  for(let i = maxFontGradientColorsAmount; i >= currentAmount;i--) {
    let pickerToHide = document.getElementById(`font-gradient-color-picker-${i}`);
    //console.log(`Hiding color #${i}`);
    if(pickerToHide) {
      pickerToHide.style.display = "none";
    }
  }
  //updateRankImage();
}
function updateColors() {
  let currentAmount = colorsButton.innerText;
  if(isNaN(currentAmount)) {
    currentAmount = 2;
    colorsButton.innerText = currentAmount;
  }else{
    if(currentAmount < 1) {
      currentAmount = 1;
    }
    colorsButton.innerText = currentAmount;
  }
  for(let i = maxColorsAmount; i >= currentAmount;i--) {
    let pickerToHide = document.getElementById(`color-picker-${i}`);
    //console.log(`Hiding color #${i}`);
    if(pickerToHide) {
      pickerToHide.style.display = "none";
    }
  }
  //updateRankImage();
}
function modifyInternalGradientColorAmount(event,toAdd) {
  let customAmount = document.getElementById("internal-gradient-border-colors-amount");
  //console.log(`Old amount ${customAmount.innerText}`);
  let newAmount = parseInt(customAmount.innerText) + (toAdd  * ((event.ctrlKey||event.altKey) ? 5 : 1));
  customAmount.innerText = Math.max(2,Math.min(maxInternalGradientColorsAmount,newAmount));
  newAmount = parseInt(customAmount.innerText);
  //console.log(`New amount ${customAmount.innerText}`);
  if(toAdd > 0) {
    for(let i = 0; i < newAmount;i++) {
      let pickerToShow = document.getElementById(`internal-gradient-color-picker-${i}`);
      //console.log(`Showing color #${i}`);
      if(pickerToShow) {
        pickerToShow.style.display = "";
      }
    }
  }else{
    for(let i = maxColorsAmount; i >= newAmount;i--) {
      let pickerToHide = document.getElementById(`internal-gradient-color-picker-${i}`);
      //console.log(`Hiding color #${i}`);
      if(pickerToHide) {
        pickerToHide.style.display = "none";
      }
    }
  }
  updateRankImage();
}
function toggleTicketBorderShadowMode(event) {
  let modeElement = document.getElementById("button-ticket-border-shadow-mode");
  let modeElementValue = modeElement.getAttribute("data-value");
  //console.log(`=======================================`);
  //console.log(modeElement);
  //console.log(`Initial value: ${modeElementValue}`);
  if(typeof modeElementValue == "undefined" || modeElementValue == null) {
    modeElementValue = 2;
  }else{
    modeElementValue = parseInt(modeElement.dataset.value);
    modeElementValue++;
  }
  if(modeElementValue > 2) modeElementValue = 1;
  //console.log(`New value: ${modeElementValue}`);
  document.getElementById("ticket-mode-string").innerText = `Mode #${modeElementValue}`;
  modeElement.setAttribute("data-value",modeElementValue);
}
function modifyNewFontWidth(event,toAdd) {
  let customSize= document.getElementById("global-new-font-width");
  let newSize = parseInt(customSize.innerText) + (toAdd  * ((event.ctrlKey||event.altKey) ? 2 : 1));
  if(newSize <= 1) {    
    customSize.innerText = 1;
  }else{
    customSize.innerText = Math.max(1,Math.min(20,newSize));
  }
  updateNewFont();
}
function modifyNewFontHeight(event,toAdd) {
  let customSize= document.getElementById("global-new-font-height");
  let newSize = parseInt(customSize.innerText) + (toAdd  * ((event.ctrlKey||event.altKey) ? 2 : 1));
  if(newSize <= 1) {    
    customSize.innerText = 1;
  }else{
    customSize.innerText = Math.max(1,Math.min(20,newSize));
  }
  updateNewFont();
}
function modifyGlobalBorderWidth(event,toAdd) {
  let customSize= document.getElementById("global-border-picker-width");
  let newSize = parseInt(customSize.innerText) + (toAdd  * ((event.ctrlKey||event.altKey) ? 2 : 1));
  if(newSize <= 0) {    
    customSize.innerText = 1;
    document.getElementById("button-global-border").checked = false;
    toggleGlobalBorderBox(event)
  }else{
    customSize.innerText = Math.max(1,Math.min(10,newSize));
  }
  updateRankImage();
}
function modifyTicketBorderSize(event,toAdd) {
  document.getElementById("button-ticket-border-auto").checked = false;
  let customSize= document.getElementById("button-ticket-border-size");
  let newSize = parseInt(customSize.innerText) + (toAdd  * ((event.ctrlKey||event.altKey) ? 2 : 1));
  customSize.innerText = Math.max(1,Math.min(1000,newSize));
  updateRankImage();
}
function modifyShadowRoundWidth(event,toAdd) {
  let customWidth = document.getElementById("button-global-shadow-rounded-width");
  let newWidth = parseInt(customWidth.innerText) + (toAdd  * ((event.ctrlKey||event.altKey) ? 5 : 1));
  customWidth.innerText = Math.max(1,Math.min(100,newWidth));
  updateRankImage();
}
function modifyTicketBorderShadowOpacity(event,toAdd) {
  let customOpacity = document.getElementById("ticket-border-shadow-picker-opacity");
  let newOpacity = parseInt(customOpacity.innerText) + (toAdd  * ((event.ctrlKey||event.altKey) ? 10 : 1));
  customOpacity.innerText = Math.max(0,Math.min(100,newOpacity));
  updateRankImage();
}
function modifyFirstColorOpacity(event,toAdd) {
  let customOpacity = document.getElementById("first-color-internal-border-opacity-picker");
  let newOpacity = parseInt(customOpacity.innerText) + (toAdd  * ((event.ctrlKey||event.altKey) ? 10 : 1));
  customOpacity.innerText = Math.max(0,Math.min(100,newOpacity));
  updateRankImage();
}
function modifySecondColorOpacity(event,toAdd) {
  let customOpacity = document.getElementById("second-color-internal-border-opacity-picker");
  let newOpacity = parseInt(customOpacity.innerText) + (toAdd  * ((event.ctrlKey||event.altKey) ? 10 : 1));
  customOpacity.innerText = Math.max(0,Math.min(100,newOpacity));
  updateRankImage();
}
function modifyGlobalShadowCornerOpacity(event,toAdd) {
  let customOpacity = document.getElementById("shadow-corner-effect-picker-opacity");
  let newOpacity = parseInt(customOpacity.innerText) + (toAdd  * ((event.ctrlKey||event.altKey) ? 10 : 1));
  customOpacity.innerText = Math.max(0,Math.min(100,newOpacity));
  updateRankImage();
}
function modifyGlobalShadowOpacity(event,toAdd) {
  let customOpacity = document.getElementById("global-shadow-picker-opacity");
  let newOpacity = parseInt(customOpacity.innerText) + (toAdd  * ((event.ctrlKey||event.altKey) ? 10 : 1));
  customOpacity.innerText = Math.max(0,Math.min(100,newOpacity));
  updateRankImage();
}
function modifyGlobalShadowHeight(event,toAdd) {
  let customHeight= document.getElementById("global-shadow-picker-height");
  let newHeight = parseInt(customHeight.innerText) + (toAdd  * ((event.ctrlKey||event.altKey) ? 2 : 1));
  customHeight.innerText = Math.min(rankCanvas.height,Math.max(1,newHeight));
  updateRankImage();
}
function modifyInternalGradientColorAngle(event,toAdd) {
  let customAngle= document.getElementById("internal-gradient-border-colors-angle");
  let newAngle = parseInt(customAngle.innerText) + (toAdd  * ((event.ctrlKey||event.altKey) ? 10 : 1));
  customAngle.innerText = Math.min(360,Math.max(0,newAngle));
  updateRankImage();
}
function modifyFontGradientAngle(event,toAdd) {
  let customAngle= document.getElementById("font-gradient-angle-picker");
  let newAngle = parseInt(customAngle.innerText) + (toAdd  * ((event.ctrlKey||event.altKey) ? 10 : 1));
  customAngle.innerText = Math.min(360,Math.max(0,newAngle));
  updateRankImage();
}
function modifyReliefHeight(event,toAdd) {
  let customHeight= document.getElementById("relief-picker-height");
  let newHeight = parseInt(customHeight.innerText) + (toAdd  * ((event.ctrlKey||event.altKey) ? 2 : 1));
  customHeight.innerText = Math.min(10,Math.max(1,newHeight));
  updateRankImage();
}
function modifyAngle(event,toAdd) {
  let customAngle = document.getElementById("angle-picker");
  let newAngle = parseInt(customAngle.innerText) + (toAdd  * ((event.ctrlKey||event.altKey) ? 10 : 1));
  customAngle.innerText = Math.min(360,Math.max(0,newAngle));
  updateRankImage();
}
function modifyAdditionalWidth(event,toAdd) {
  let customWidth = document.getElementById("additional-width-picker");
  let newWidth = parseInt(customWidth.innerText) + (toAdd  * ((event.ctrlKey||event.altKey) ? 5 : 1));
  customWidth.innerText = Math.max(-10,newWidth);
  updateRankImage();
}
function modifyAdditionalHeight(event,toAdd) {
  let customHeight = document.getElementById("additional-height-picker");
  let newHeight = parseInt(customHeight.innerText) + (toAdd  * ((event.ctrlKey||event.altKey) ? 5 : 1));
  customHeight.innerText = Math.max(-10,newHeight);
  updateRankImage();
}
function modifyBetweenRanks(event,toAdd) {
  let customOption = document.getElementById("pixels-between-ranks");
  let newSize = parseInt(customOption.innerText) + (toAdd  * ((event.ctrlKey||event.altKey) ? 5 : 1));
  customOption.innerText = Math.max(0,newSize);
}
function modifyBetweenLines(event,toAdd) {
  let customOption = document.getElementById("pixels-between-lines");
  let newSize = parseInt(customOption.innerText) + (toAdd  * ((event.ctrlKey||event.altKey) ? 5 : 1));
  customOption.innerText = Math.max(0,newSize);
}
let cutSideTop = 0, cutSideRight = 0, cutSideDown = 0, cutSideLeft = 0;
function modifySide(event,side,toAdd) {
  let toModify = (event.ctrlKey||event.altKey) ? 2 : 1;
  if(side == "up") {
    let sizeElement = document.getElementById("cut-side-up-amount");
    let newSize = parseInt(sizeElement.innerText) + (toAdd  * toModify);
    sizeElement.innerText = newSize;
  }else if(side == "right") {
    let sizeElement = document.getElementById("cut-side-right-amount");
    let newSize = parseInt(sizeElement.innerText) + (toAdd  * toModify);
    sizeElement.innerText = newSize;
  }else if(side == "down") {
    let sizeElement = document.getElementById("cut-side-down-amount");
    let newSize = parseInt(sizeElement.innerText) + (toAdd  * toModify);
    sizeElement.innerText = newSize;
  }else if(side == "left") {
    let sizeElement = document.getElementById("cut-side-left-amount");
    let newSize = parseInt(sizeElement.innerText) + (toAdd  * toModify);
    sizeElement.innerText = newSize;
  }else return; 
  updateRankImage();
}
function modifyWidth(event,toAdd) {
  let buttonCustomWidth = document.getElementById("button-auto-width");
  buttonCustomWidth.checked = false;
  let customWidth = document.getElementById("width-picker");
  let newWidth = parseInt(customWidth.innerText) + (toAdd  * ((event.ctrlKey||event.altKey) ? 5 : 1));
  customWidth.innerText = Math.max(1,newWidth);
  updateRankImage();
}
function modifyHeight(event,toAdd) {
  let buttonCustomHeight = document.getElementById("button-auto-height");
  buttonCustomHeight.checked = false;
  let customHeight = document.getElementById("height-picker");
  let newHeight = parseInt(customHeight.innerText) + (toAdd  * ((event.ctrlKey||event.altKey) ? 5 : 1));
  customHeight.innerText = Math.max(1,newHeight);
  updateRankImage();
}
function increaseFontEffectHeight(event) {
  let option = document.getElementById("font-effect-picker-height");
  if(option) {
    if(option.innerText < maxFontHeight) {
      option.innerText = Math.min(parseInt(option.innerText) + (event.ctrlKey || event.altKey ? 5 : 1),100);
      updateRankImage();
    }
  }
}
function decreaseFontEffectHeight(event) {
  let option = document.getElementById("font-effect-picker-height");
  if(option) {
    if(option.innerText > 0) {
      option.innerText = Math.max(0,parseInt(option.innerText) - ((event.ctrlKey || event.altKey) ? 5 : 1));
      updateRankImage();
    }
  }
}
function increaseBorderOpacity(event) {
  let option = document.getElementById("border-opacity-picker");
  if(option) {
    if(option.innerText < 100) {
      option.innerText = Math.min(parseInt(option.innerText) + ((event.ctrlKey || event.altKey) ? 10 : 1),100);
      updateRankImage();
    }
  }
}
function decreaseBorderOpacity(event) {
  let option = document.getElementById("border-opacity-picker");
  if(option) {
    if(option.innerText > 0) {
      option.innerText = Math.max(0,parseInt(option.innerText) - ((event.ctrlKey || event.altKey) ? 10 : 1));
      updateRankImage();
    }
  }
}
function increaseShadowOpacity(event) {
  let option = document.getElementById("shadow-opacity-picker");
  if(option) {
    if(option.innerText < 100) {
      option.innerText = Math.min(parseInt(option.innerText) + ((event.ctrlKey || event.altKey) ? 10 : 1),100);
      updateRankImage();
    }
  }
}
function decreaseShadowOpacity(event) {
  let option = document.getElementById("shadow-opacity-picker");
  if(option) {
    if(option.innerText > 0) {
      option.innerText = Math.max(0,parseInt(option.innerText) - ((event.ctrlKey || event.altKey) ? 10 : 1));
      updateRankImage();
    }
  }
}
function removeColor(event) {
  if(event) backgroundType = 2;
  let currentAmount = colorsButton.innerText;
  if(isNaN(currentAmount)) {
    currentAmount = 2;
    colorsButton.innerText = currentAmount;
  }else{
    currentAmount--;
    if(currentAmount < 1) {
      currentAmount = 1;
    }
    colorsButton.innerText = currentAmount;
  }
  //console.log(`Current amount: ${currentAmount}`);
  for(let i = maxColorsAmount; i >= currentAmount;i--) {
    let pickerToHide = document.getElementById(`color-picker-${i}`);
    //console.log(`Hiding color #${i}`);
    if(pickerToHide) {
      pickerToHide.style.display = "none";
    }
  }
  if(event) updateRankImage();
}
function addColor(event) {
  backgroundType = 2;
  let currentAmount = colorsButton.innerText;
  if(isNaN(currentAmount)) {
    currentAmount = 2;
    colorsButton.innerText = currentAmount;
  }else{
    currentAmount++;
    if(currentAmount > maxColorsAmount) {
      currentAmount = maxColorsAmount;
    }
    let maxWithoutAds = 2;
    if(currentAmount >= maxWithoutAds + 1) {
      if(!isRunning) {
        currentAmount = maxWithoutAds;
        alertBar([`⛔ You reached max colos amount! ⛔`,`Click \"Unlock features 🧪\" button to increase limit!`],6000,[15,12])
      }
    }
    let maxWithoutSecret = 5;
    if(currentAmount >= maxWithoutSecret + 1) {
      if(!isRunningSec) {
        currentAmount = maxWithoutSecret;
        alertBar([`⛔ You reached max colos amount! ⛔`,`You cannot select more than ${maxWithoutSecret} colors. Or maybe..`],6000,[15,12])
      }
    }
    colorsButton.innerText = currentAmount;
  }
  //console.log(`Current amount: ${currentAmount}`);
  for(let i = 0; i < currentAmount;i++) {
    let pickerToShow = document.getElementById(`color-picker-${i}`);
    //console.log(`Showing color #${i}`);
    if(pickerToShow) {
      pickerToShow.style.display = "";
    }
  }
  updateRankImage();
}
function removeFontGradientColor(event) {
  let fontGradientColorsAmount = document.getElementById("font-gradient-colors-amount");
  let currentAmount = fontGradientColorsAmount.innerText;
  if(isNaN(currentAmount)) {
    currentAmount = 2;
    fontGradientColorsAmount.innerText = currentAmount;
  }else{
    currentAmount--;
    if(currentAmount < 2) {
      currentAmount = 2;
    }
    fontGradientColorsAmount.innerText = currentAmount;
  }
  //console.log(`Current amount: ${currentAmount}`);
  for(let i = maxColorsAmount; i >= currentAmount;i--) {
    let pickerToHide = document.getElementById(`font-gradient-color-picker-${i}`);
    //console.log(`Hiding color #${i}`);
    if(pickerToHide) {
      pickerToHide.style.display = "none";
    }
  }
  if(event) updateRankImage();
}
function addFontGradientColor(event) {
  let fontGradientColorsAmount = document.getElementById("font-gradient-colors-amount");
  let currentAmount = fontGradientColorsAmount.innerText;
  if(isNaN(currentAmount)) {
    currentAmount = 2;
    fontGradientColorsAmount.innerText = currentAmount;
  }else{
    currentAmount++;
    if(currentAmount > maxFontGradientColorsAmount) {
      currentAmount = maxFontGradientColorsAmount;
    }
    fontGradientColorsAmount.innerText = currentAmount;
  }
  //console.log(`Current amount: ${currentAmount}`);
  for(let i = 0; i < currentAmount;i++) {
    let pickerToShow = document.getElementById(`font-gradient-color-picker-${i}`);
    //console.log(`Showing color #${i}`);
    if(pickerToShow) {
      pickerToShow.style.display = "";
    }
  }
  updateRankImage();
}
function downloadProfile2() {
  let inputBox = document.getElementById(`inputText`);
  let content = `Original:\nUnknown input`;
  if(inputBox) content = `Original:\n${inputBox.value}\n\n`;
  let i = 1;
  for(let fontType of Object.keys(fonts)) {
    let data = fonts[fontType];
    let b = document.getElementById(`${fontType}-box`);
    if(b) {
      content+= `${i}. ${data.name}:\n${b.value}\n\n`;
    }
    i++;
  }
  content += `\n💎 Thanks for using our font generator tool! 👁‍🗨\n📩 File generated using https://alonsoaliaga.com/font-generator`
  const blob = new Blob([content], { type: 'text/text' });

  // Create a URL object with the Blob data
  const url = window.URL.createObjectURL(blob);
  
  // Create a link element with download attribute pointing to the URL object
  const link = document.createElement('a');
  link.download = `fonts-${Date.now().toString()}.txt`; // Set the download file name
  link.href = url; // Set the link href to the URL object
  
  // Append the link element to the document body
  document.body.appendChild(link);
  
  // Programmatically click the link to initiate the download of the YAML file
  link.click();

  // Remove the link element from the document body
  document.body.removeChild(link);

  // Revoke the URL object to free up system resources
  window.URL.revokeObjectURL(url);
}
function readFile(evt) {
  clearIssues();
  var files = evt.target.files;
  var file = files[0];    
  // console.log(`Attempting to read ${file}`);
  document.getElementById("log-file").value = "";
  var reader = new FileReader();
  reader.onload = function(event) {
    let result = event.target.result;
    processData(result);
  }
  reader.readAsText(file)
}
function checkYamlFile(evt) {
  var files = evt.target.files;
  var file = files[0];
  clearResults();
  processed1 = undefined;
  processed2 = undefined;
  document.getElementById("output-fixed").innerText = "Loading..";
  document.getElementById("output-differences").innerText = "Loading..";
  if(typeof file == "undefined") {
    let f = document.getElementById(evt.target.id);
    if(f) f.value = "";
    console.log(`Wrong! File is null: '${file.name}'`);
    alert('Configuration cannot be empty!');
    return;
  }
  let matchExtension = allowedExtensions.find(r=> file.name.endsWith(r));
  if(!matchExtension) {
    let f = document.getElementById(evt.target.id);
    if(f) f.value = "";
    console.log(`Wrong! File type not allowed: '${file.name}'`);
    alert(`Configuration must be a valid yaml file!\nAllowed types: ${allowedExtensions.join(" ")}`);
    return;
  }
  console.log(`Detected '${evt.target.id}' file!`);
}
window.onclick = function(event) {
  if (event.target == document.getElementById("error-full")) {
    clearIssues();
  }
}
let loadedSkinBuffer = undefined;
const usernameInput = document.getElementById('inputText');
const usernameInputDiv = document.getElementById('inputTextDiv');
const cacheSkins = new Map();
async function processUsername(order) {
  skinType = 0;
  if(order != "no-cooldown") blockUsername(defaultCooldown);
  let username = usernameInput?.value || "AlonsoAliaga";
  let fullSkin;
  let inCache = cacheSkins.has(username.toLowerCase());
  if(inCache) {
    fullSkin = cacheSkins.get(username.toLowerCase());
    loadedSkinBuffer = fullSkin;
  }else{
    let url = `https://minotar.net/skin/${username}.png`;
    try{
      fullSkin = await loadImage(url);
      loadedSkinBuffer = fullSkin;
    }catch(e) {
      //console.log(e);
      drawFailed();
      return;
    }
    cacheSkins.set(username.toLowerCase(),fullSkin);
  }
  //Fetch skin logic
  updateSkin(inCache);
}

function createGradient(ctx, colours) {
  let transparentBackgroundEnabled = document.getElementById("button-transparent-background").checked;
  if(transparentBackgroundEnabled) return ctx;
  if(isBulkCreating && typeof currentBulkData.backgroundColors != "undefined") {
    colours = currentBulkData.backgroundColors;
  }else if(!colours) {
    if(backgroundType == 2) {
      let currentAmount = isNaN(colorsButton.innerText) ? 2 : Math.max(1,Math.min(maxColorsAmount,parseInt(colorsButton.innerText)));
      colours = defaultColors.slice(0, currentAmount);
    }else{
      if(typeof defaultGradients[currentGradient] !== "undefined") {
        colours = defaultGradients[currentGradient].colors;
        //console.log(`Creating gradient.. ${defaultGradients[currentGradient].identifier}`)
      }else {
        colours = defaultGradients[0].colors;
        //console.log(`Creating gradient.. ${defaultGradients[0].identifier}`)
      }
    }
  }else{
    //console.log(`Creating custom gradient.. ${colours}`)
  }
  colours = colours.concat([]).reverse();
  //console.log(colours);
  if(colours.length == 1) {
    ctx.fillStyle = colours[0];
    ctx.fillRect(0, 0, ctx.canvas.width,ctx.canvas.height);
    return ctx; 
  }

  let angleValue = parseInt(document.getElementById("angle-picker").innerText);
  
  if(isBulkCreating && typeof currentBulkData.bgAngle != "undefined") {
    angleValue = currentBulkData.bgAngle;
  }

  let points = linearGradient_a(ctx.canvas.width, ctx.canvas.height, angleValue);
  var gradient = ctx.createLinearGradient(
    points.tx,
    points.ty,
    points.bx,
    points.by
  );
  //let angle = angleValue * Math.PI / 180;
  //console.log(`Angle is: ${angleValue} | ${angle}`)
  //let x2 = 100 * Math.cos(angle);
  //let y2 = 30 * Math.sin(angle);

	//const gradient2 = ctx.createLinearGradient(0, 0, x2,y2);

	//const gradient = ctx.createLinearGradient(0, 0, ctx.canvas.width,ctx.canvas.height);
	//const gradient = ctx.createLinearGradient(0, 0, 18.75, 18.75);

	let interval = 1;
	const decrement = 1 / (colours.length - 1);
	colours.forEach(colour => {
    //console.log(`Fixed: ${interval.toFixed(5)}`);
    //console.log(`Adding color stop interval: ${interval}${interval>1?` CAUTION GREATER+!`:``}${interval<0?` CAUTION LOWER-!`:``}`)
		gradient.addColorStop(Math.max(0,interval), colour);
		interval -= decrement;
	})
	ctx.fillStyle = gradient;
	//ctx.fillRect(0, 0, 18.75, 18.75);
	ctx.fillRect(0, 0, ctx.canvas.width,ctx.canvas.height);
  return ctx;
}
function linearGradient_a(w, h, deg) {
  var caseAngle1 = Math.round((Math.atan(w / h) * 180) / Math.PI),
           caseAngle2 = Math.round(180 - caseAngle1),
           caseAngle3 = Math.round(180 + caseAngle1),
           caseAngle4 = Math.round(360 - caseAngle1);
         
       var bx = tx = wh = w/2,
         hh = h/2,
         ty = h,    
         by = 0,
         angInRad = (deg * Math.PI) / 180,    
         count1;
 
       if (deg == caseAngle1) {   tx = 0;bx = w;} else 
       if (deg == caseAngle2) {   tx = 0;ty = 0;bx = w;by = h;} else
       if (deg == caseAngle3) {   tx = w;ty = 0;bx = 0;by = h;} else
       if (deg == caseAngle4) {   tx = w;ty = h;bx = 0;by = 0;} else
       {
         var mtan = Math.tan(angInRad);
 
         if (0 < deg && deg < caseAngle1) {    
           count1 = (mtan * h) / 2;
           tx = wh - count1;    
           bx = wh + count1;    
         } 
         else if (caseAngle1 < deg && deg < caseAngle2) {    
           count1 = wh / mtan;
           tx = 0;
           ty = hh + count1;
           bx = w;
           by = hh - count1;  
         } else if (caseAngle2 < deg && deg < caseAngle3) {    
           count1 = (mtan * h) / 2;
           tx = wh + count1;
           ty = 0;
           bx = wh - count1;
           by = h;    
         } else if (caseAngle3 < deg && deg < caseAngle4) {    
           count1 = wh / mtan;
           tx = w;
           ty = hh - count1;
           bx = 0;
           by = hh + count1;    
         } else if (caseAngle4 < deg && deg < 361) {
           count1 = (mtan * h) / 2;
           tx = wh - count1;
           ty = h;
           bx = wh + count1;
           by = 0;    
         }
       }
   return { tx: tx, ty: ty, bx: bx, by: by };
 }
function testFont(event) {
  let dev = event.altKey && event.ctrlKey;
  if(dev) {
    let letterSelection = document.getElementById("font-selection");
    let letters = availableFonts[letterSelection.value] || availableFonts[defaultFontIdentifier];
    inputText.value = Object.keys(letters).filter(n=>n.length < 4).join("");
  }else inputText.value = "ABCDEFGHIJKLMNÑOPQRSTUVWXYZ0123456789";
  updateRankImage();
}
function updateNewFont() {
  let fontWidth = 3;
  let fontHeight = 3;
  try{
    fontWidth = Math.max(1,parseInt(document.getElementById("global-new-font-width").innerText));
  }catch(e){}
  try{
    fontHeight = Math.max(1,parseInt(document.getElementById("global-new-font-height").innerText));
  }catch(e){}
  let size = `${fontHeight}x${fontWidth}`;
  let line = `[${Array(fontWidth + 1).join(' ').split('').join(",")}]`;
  let column = []
  for(let i = 1; i <= fontHeight; i++) column.push(line);
  let finalObject = {
  }
  let letters = {
    "Disabled": true,
    "Name": `$Font ${fontHeight}px$`,
    "Height": fontHeight,
  }
  for(let char of `0123456789ABCDEFGHIJKLMNÑOPQRSTUVWXYZ+-_(){}[]=/\\\\%.*:,;!¡?¿★<>'°|♥#^ @`) {
    let l = `$${char.replace("$",`\\$`)}$`;
    //console.log(`Writing => ${l}`);
    if(char == "@") {
      let column2 = []
      for(let i = 1; i <= fontHeight; i++) column2.push([]);
      letters[l] = column2
    }else{
      letters[l] = column
    }
  }
  finalObject[`font${size}`] = letters;
  //let yamlString = jsyaml.dump(finalObject, { indent: 2 ,noCompatMode: true });
  //newFontOutputElement.textContent = yamlString;
  let finalContent = JSON.stringify(finalObject, null, 2).replace(/"/g,"").replace(/\$/g,"\"").replace(/★/g,"\\\"");
  let newFontOutputElement = document.getElementById("new-font-output");
  newFontOutputElement.textContent = finalContent.slice(2,finalContent.length - 2);
}
function moveFontGradient(event, toModify) {
  let add = toModify > 0;
  fontGradientType = 0;
  if(typeof defaultFontGradients[currentFontGradient + toModify] !== "undefined") {
    if(add) currentFontGradient++;
    else currentFontGradient--;
  }else {
    if(add) {
      currentFontGradient = 0;
    }else{
      currentFontGradient = Object.keys(defaultFontGradients).length - 1;
    }
  }
  let fontGradientText = document.getElementById("font-gradient-preset-picker");
  let diplayName = defaultFontGradients[currentFontGradient].identifier;
  fontGradientText.innerText = diplayName.slice(0,1).toUpperCase() + diplayName.slice(1);

  let customGradientsOpened = document.getElementById("button-custom-font-gradient");
  if(customGradientsOpened.checked) {
    let customGradientBox = document.getElementById("custom-color-font-gradient-box");
    customGradientBox.classList.remove("expanded");
    customGradientsOpened.checked = false;
  }
  updateRankImage();
}
function previousGradient() {
  backgroundType = 0;
  if(typeof defaultGradients[currentGradient - 1] !== "undefined") {
    currentGradient--;
  }else currentGradient = Object.keys(defaultGradients).length - 1;
  let customGradientsOpened = document.getElementById("button-toggle-custom-gradient");
  if(customGradientsOpened.checked) {
    let customGradientBox = document.getElementById("custom-gradient-box");
    customGradientBox.classList.remove("expanded");
    customGradientsOpened.checked = false;
  }
  updateRankImage();
}
function nextGradient() {
  backgroundType = 0;
  if(typeof defaultGradients[currentGradient + 1] !== "undefined") {
    currentGradient++;
  }else currentGradient = 0;
  let customGradientsOpened = document.getElementById("button-toggle-custom-gradient");
  if(customGradientsOpened.checked) {
    let customGradientBox = document.getElementById("custom-gradient-box");
    customGradientBox.classList.remove("expanded");
    customGradientsOpened.checked = false;
  }
  updateRankImage();
}
let backgroundType = 0; //0 - gradient | 1 - image | 2 - custom gradient
let currentGradient = 0;
let fontGradientType = 0; //0 - gradient | 1 - custom gradient
let currentFontGradient = 0;
let skinType = 0; //0 - username | 1 - custom
function updateSkin(inCache = true) {
  let username = usernameInput?.value || "AlonsoAliaga";
  //
  let revertSkin = document.getElementById("button-revert-skin").checked;
  let shadow = document.getElementById("button-shadow").checked;
  let transparentBackground = document.getElementById("button-no-background").checked;
  //
  let finalCanvas = document.getElementById("final-canvas");
  let finalCtx = finalCanvas.getContext("2d");
  finalCtx.clearRect(0, 0, finalCanvas.width, finalCanvas.height);
  finalCtx.imageSmoothingEnabled = false;
  //
  let backgroundCtx = backgroundCanvas.getContext("2d");
  if(!transparentBackground) {
    finalCanvas.style.border = "1px solid #d3d3d3";
    if(backgroundType == 0) {
      backgroundCtx.clearRect(0, 0, backgroundCtx.canvas.width, backgroundCtx.canvas.height);
      createGradient(backgroundCtx);
      finalCtx.drawImage(backgroundCanvas,0,0);
    }else if(backgroundType == 1) {
      //console.log(`Writing custom background..`);
      finalCtx.drawImage(backgroundCanvas,0,0);
      //createGradient(backgroundCtx);
    }else{
      backgroundCtx.clearRect(0, 0, backgroundCtx.canvas.width, backgroundCtx.canvas.height);
      let currentAmount = isNaN(colorsButton.innerText) ? 2 : Math.max(2,Math.min(maxColorsAmount,parseInt(colorsButton.innerText)));
      createGradient(backgroundCtx,defaultColors.slice(0, currentAmount));
      finalCtx.drawImage(backgroundCanvas,0,0);
    }
  }else{
    finalCanvas.style.border = "none";
  }
  //siteCtx.fillStyle = "#FFFF00";
  //siteCtx.fillRect(0, 0,siteCanvas.width,siteCanvas.height);
  //console.log("Site canvas:",finalCanvas.width,finalCanvas.height);
  //let skinCanvas = document.getElementById("skin-canvas");
  let skinCtx = skinCanvas.getContext("2d");
  skinCtx.clearRect(0, 0, skinCanvas.width, skinCanvas.height);
  //startingCtx.fillStyle = "#FF0000";
  //startingCtx.fillRect(0, 0,startingCanvas.width,startingCanvas.height);
  skinCtx.imageSmoothingEnabled = false;
  //console.log("Starting canvas:",skinCanvas.width,skinCanvas.height);
  
  if(shadow) {
    skinCtx.drawImage(backdropBuffer, 0, 0, 20, 20);
  }
  //console.log(`Type of loadedSkinBuffer: ${typeof loadedSkinBuffer}`);
  if (loadedSkinBuffer.height === 32) {
    skinCtx.drawImage(loadedSkinBuffer, 8, 9, 7, 7, 8, 4, 7, 7); // Head (bottom layer)
    skinCtx.drawImage(loadedSkinBuffer, 5, 9, 3, 7, 5, 4, 3, 7); // Head Side (bottom layer)
    skinCtx.drawImage(loadedSkinBuffer, 44, 20, 3, 7, 12, 13, 3, 7); // Arm Right Side (bottom layer)
    skinCtx.drawImage(loadedSkinBuffer, 21, 20, 6, 1, 7, 11, 6, 1); // Chest Neck Small Line (bottom layer)
    skinCtx.drawImage(loadedSkinBuffer, 20, 21, 8, 8, 6, 12, 8, 8); // Chest Other (Bottom layer)
    skinCtx.drawImage(loadedSkinBuffer, 44, 20, 3, 7, 5, 13, 3, 7); // Arm Left Side (bottom layer)
    skinCtx.drawImage(loadedSkinBuffer, 40, 9, 7, 7, 8, 4, 7, 7); // Head (top layer)
    skinCtx.drawImage(loadedSkinBuffer, 33, 9, 3, 7, 5, 4, 3, 7); // Head Side (top layer)

  } else {
    // * BOTTOM LAYER
    skinCtx.drawImage(loadedSkinBuffer, 8, 9, 7, 7, 8, 4, 7, 7); // Head (bottom layer)
    skinCtx.drawImage(loadedSkinBuffer, 5, 9, 3, 7, 5, 4, 3, 7); // Head Side (bottom layer)
    skinCtx.drawImage(loadedSkinBuffer, 36, 52, 3, 7, 12, 13, 3, 7); // Arm Right Side (bottom layer)
    skinCtx.drawImage(loadedSkinBuffer, 21, 20, 6, 1, 7, 11, 6, 1); // Chest Neck Small Line (bottom layer)
    skinCtx.drawImage(loadedSkinBuffer, 20, 21, 8, 8, 6, 12, 8, 8); // Chest Other (Bottom layer)
    skinCtx.drawImage(loadedSkinBuffer, 44, 20, 3, 7, 5, 13, 3, 7); // Arm Left Side (bottom layer)

    // * TOP LAYER
    skinCtx.drawImage(loadedSkinBuffer, 40, 9, 7, 7, 8, 4, 7, 7); // Head (top layer)
    skinCtx.drawImage(loadedSkinBuffer, 33, 9, 3, 7, 5, 4, 3, 7); // Head Side (top layer)
    skinCtx.drawImage(loadedSkinBuffer, 52, 52, 3, 7, 12, 13, 3, 7); // Arm Right Side (top layer)
    skinCtx.drawImage(loadedSkinBuffer, 52, 36, 3, 7, 5, 13, 3, 7); // Arm Left Side (top layer)
    skinCtx.drawImage(loadedSkinBuffer, 20, 37, 8, 8, 6, 12, 8, 8); // Chest Other (top layer)
    skinCtx.drawImage(loadedSkinBuffer, 21, 36, 6, 1, 7, 11, 6, 1); // Chest Neck Small Line (top layer)
  }
  skinCtx.drawImage(shadingBuffer, 0, 0, 20, 20);
  if(revertSkin) {
    finalCtx.save();
    finalCtx.scale(-1, 1);
    finalCtx.drawImage(skinCanvas, skinCtx.canvas.width * -1, 0, skinCtx.canvas.width, skinCtx.canvas.height);
    finalCtx.restore();
  }else{
    finalCtx.drawImage(skinCanvas,0,0,300,300)
  }

  //console.log(`Username: ${username}\nRevert skin: ${revertSkin}\nShadow: ${shadow}\nTransparent background: ${transparentBackground}\nIn cache: ${inCache}`);
}
const usernameInputCooldown = document.getElementById('inputTextCooldown');
let blockInterval;
function blockUsername(seconds = 3) {
  if(blockInterval) clearInterval(blockInterval);
  usernameInputDiv.style.display = "none"
  usernameInputCooldown.style.display = ""
  let i = Math.max(3,seconds);
  usernameInputCooldown.value = `${i} seconds left..`
  blockInterval = setInterval(()=> {
    i--;
    usernameInputCooldown.value = `${i} seconds left..`
    if(i <= 0) {
      usernameInputCooldown.style.display = "none"
      usernameInputDiv.style.display = ""
      clearInterval(blockInterval);
      blockInterval = undefined;
      return;
    }
  },1000);
}
const defaultColors = [];
const defaultFontGeneratorColors = [];
const defaultInternalGradientBorderColors = ["#e7a000","#e76f00","#ad2200"];
let failedBuffer;
let backdropBuffer;
let shadingBuffer;
const backgroundCanvas = document.getElementById("background-canvas");
const skinCanvas = document.getElementById("skin-canvas");
const siteCanvas = document.getElementById("final-canvas");
const markedCanvas = document.getElementById("marked-canvas");
async function addListeners() {
  /*
	failedBuffer = await loadImage("https://raw.githubusercontent.com/AlonsoAliaga/mcpfp/main/assets/images/notFound.png");
	backdropBuffer = await loadImage("https://raw.githubusercontent.com/AlonsoAliaga/mcpfp/main/assets/images/backdropshading.png");
	shadingBuffer = await loadImage("https://raw.githubusercontent.com/AlonsoAliaga/mcpfp/main/assets/images/20x20pshading.png");
  backgroundCanvas.getContext("2d").scale(15, 15);
  skinCanvas.getContext("2d").scale(15, 15);
  usernameInput.addEventListener("keyup", function (e) {
    if (e.key === 'Enter' || e.keyCode === 13) {
        processUsername();
    }
  });
  let markedCtx = markedCanvas.getContext("2d");
  const text = "Generated on https://alonsoaliaga.com/minecraft-pfp";
  markedCtx.fillStyle = "#302a3b"; // Set the fill color to white
  markedCtx.fillRect(0, 300, 300, 20);
  let fontSize = 24; // Initial font size
  let textWidth = 0;
  do {
    fontSize--; // Decrease the font size
    markedCtx.font = `${fontSize}px MinecraftBold`; // Set the new font size
    textWidth = markedCtx.measureText(text).width;
  } while (textWidth > 290);
  markedCtx.fillStyle = "#ffffff"; // Set the fill color to gray
  markedCtx.font = `${fontSize}px MinecraftBold`; // Set the font style
  markedCtx.textAlign = "center"; // Set the text alignment to center
  markedCtx.textBaseline = "middle"; // Set the text baseline to middle
  markedCtx.fillText(text, markedCanvas.width / 2, 310); // Write the text at the center of the rectangle
  processUsername("no-cooldown");
  */
  for(let i = 0; i < maxColorsAmount; i++) {
    if(defaultColors.length < maxColorsAmount) {
      let newColor = getRandomHexColor();
      //console.log(`Random color: ${newColor}${newColor.length != 7?` | CAUTION!`:``}`),
      defaultColors.push(newColor);
    }
    let colorsDiv = document.getElementById("colors-div");
    //console.log(`Creating color picker #${i}`);
    let p = document.createElement("input");
    p.type = "color";
    p.id = `color-picker-${i}`;
    p.index = i;
    p.value = defaultColors[i];
    p.addEventListener('change', function() {
      const color = this.value;
      //console.log(`Color picked: ${color} | ID: ${this.id} | Index: ${this.index}`);
      defaultColors[this.index] = color;
      updateRankImage();
    });
    if(i != 0) {
      let s = document.createElement("span");
      s.innerText = " ";
      colorsDiv.appendChild(s);
    }
    colorsDiv.appendChild(p);
    //console.log(`Creating color picker #${i}! display="${p.style.display}"`)
  }
  for(let i = 0; i < maxFontGradientColorsAmount; i++) {
    if(defaultFontGeneratorColors.length < maxFontGradientColorsAmount) {
      let newColor = getRandomHexColor();
      //console.log(`Random color: ${newColor}${newColor.length != 7?` | CAUTION!`:``}`),
      defaultFontGeneratorColors.push(newColor);
    }
    let colorsDiv = document.getElementById("font-gradient-colors-div");
    //console.log(`Creating color picker #${i}`);
    let p = document.createElement("input");
    p.type = "color";
    p.id = `font-gradient-color-picker-${i}`;
    p.index = i;
    p.value = defaultFontGeneratorColors[i];
    p.addEventListener('change', function() {
      const color = this.value;
      //console.log(`Color picked: ${color} | ID: ${this.id} | Index: ${this.index}`);
      defaultFontGeneratorColors[this.index] = color;
      updateRankImage();
    });
    if(i != 0) {
      let s = document.createElement("span");
      s.innerText = " ";
      colorsDiv.appendChild(s);
    }
    colorsDiv.appendChild(p);
    //console.log(`Creating font gradient color picker #${i}! display="${p.style.display}"`)
  }
  for(let i = 0; i < maxInternalGradientColorsAmount; i++) {
    if(defaultInternalGradientBorderColors.length < maxInternalGradientColorsAmount) {
      let newColor = getRandomHexColor();
      //console.log(`Random color: ${newColor}${newColor.length != 7?` | CAUTION!`:``}`),
      defaultInternalGradientBorderColors.push(newColor);
    }
    let colorsDiv = document.getElementById("internal-gradient-border-colors-div");
    //console.log(`Creating color picker #${i}`);
    let p = document.createElement("input");
    p.type = "color";
    p.id = `internal-gradient-color-picker-${i}`;
    p.index = i;
    p.value = defaultInternalGradientBorderColors[i];
    p.addEventListener('change', function() {
      const color = this.value;
      //console.log(`Color picked: ${color} | ID: ${this.id} | Index: ${this.index}`);
      defaultInternalGradientBorderColors[this.index] = color;
      updateRankImage();
    });
    if(i != 0) {
      let s = document.createElement("span");
      s.innerText = " ";
      colorsDiv.appendChild(s);
    }
    colorsDiv.appendChild(p);
    //console.log(`Creating font gradient color picker #${i}! display="${p.style.display}"`)
  }
  window.addEventListener('scroll', function() {
    const rankShowcase = document.getElementById('rank-showcase');
    const scrollPosition = window.scrollY;
    //const mainContentBottom = mainContent.offsetTop + mainContent.offsetHeight;
    if (scrollPosition > 400) {
      rankShowcase.classList.add("sticky-showcase");
      rankShowcase.classList.remove("rank-showcase-class");
    } else if(scrollPosition < 380) {
      rankShowcase.classList.add("rank-showcase-class");
      rankShowcase.classList.remove("sticky-showcase");
    }
  });
  //chatContainer.addEventListener("mousedown", element => console.log(element));
  //removeColor();
  //document.getElementById("aa").addEventListener("mousedown", startDrag(this));
  loreContainer.addEventListener('mousedown', event => startDrag(event));
  chatContainer.addEventListener('mousedown', event => startDrag(event));
  tabContainer.addEventListener('mousedown', event => startDrag(event));
  nametagContainer.addEventListener('mousedown', event => startDrag(event));
  window.addEventListener('mousemove', event => drag(event));
  window.addEventListener('mouseup', event => stopDrag(event));
  updateColors();
  updateFontGradientColors();
  updateGradientBorderColors();
  runDelayed();
}
let allowed = ["lore-container","chat-container","tab-container","nametag-container"];
let beingDrag;
function startDrag(event) {
  //console.log(`Start dragging ${event.target.id}..`)
  if(allowed.includes(event.target.id)){
    beingDrag = event.target.id;
  }else if(event.target.offsetParent && allowed.includes(event.target.offsetParent.id)) {
    beingDrag = event.target.offsetParent.id;
  }else return;
  let dragged = document.getElementById(beingDrag);
  if(dragged) {
    offsetX = event.clientX - dragged.offsetLeft;
    offsetY = event.clientY - dragged.offsetTop;
  }
}
function stopDrag(event) {
  //console.log("Stop")
  beingDrag = undefined;
}
function drag(event) {
  //console.log("Drag")
  let dragged = document.getElementById(beingDrag);
  if(dragged) {
    dragged.style.left = (event.clientX - offsetX) + 'px';
    dragged.style.top = (event.clientY - offsetY) + 'px';
  }
}
function getRandomHexColor() {
  return `#${Math.floor(Math.random()*16777215).toString(16).toUpperCase().padStart(6, '0')}`;
}
function getRandomHexColorNoSign() {
  return `${Math.floor(Math.random()*16777215).toString(16).toUpperCase().padStart(6, '0')}`;
}
function uploadCustomSkinTexture(event) {
  //console.log(event);
  //let imageContainer = document.getElementById("motd-icon");
  // Create a new input element
  const uploadInput = document.createElement('input');
  uploadInput.type = 'file';

  // Add event listener to handle file selection
  uploadInput.addEventListener('change', function(event) {
    const file = event.target.files[0];
    // Handle the file upload or further processing here
    
    // Create a FileReader object
    const reader = new FileReader();

    // Set up a load event listener on the FileReader
    reader.addEventListener('load', function() {
      // Update the image source with the uploaded image
      var img = new Image();
      img.src = reader.result;
      //console.log(`Processing custom image: ${file.name} | ${img.width}px x ${img.height}px`);
      img.onload = function () {
        if(img.width !== 64) {
          alertError(`<b>💎 Wrong skin texture! 💎</b><br><span style="font-size: small;">Skin must be 64px width!</span>`);
          return;
        }
        if(![64,32].includes(img.height)) {
          alertError(`<b>💎 Wrong skin texture! 💎</b><br><span style="font-size: small;">Skin must be 64px or 32px width!</span>`);
          return;
        }
        skinType = 1;
        loadedSkinBuffer = img;
        //console.log(`Uploaded custom image: ${file.name} | ${img.width}px x ${img.height}px`);
        updateSkin(true);
      };
    });

    // Read the uploaded file as a data URL
    reader.readAsDataURL(file);
  });

  // Append the input element to the image container
  document.body.appendChild(uploadInput);

  // Trigger a click event on the input element
  uploadInput.click();
  
  document.body.removeChild(uploadInput);
}
let errorTimeout = undefined;
function alertError(text = "Empty error.") {
  //console.log(`Alerting: ${text}`)
  if(errorTimeout) {
    clearTimeout(errorTimeout);
    var sb = document.getElementById("snackbar-error");
    sb.className = sb.className.replace("show", "");
  }
  var sb = document.getElementById("snackbar-error");
  sb.innerHTML = text;
  //this is where the class name will be added & removed to activate the css
  sb.className = "show";

  errorTimeout = setTimeout(()=>{ sb.className = sb.className.replace("show", ""); }, 3000);
}
function uploadCustomBackground(event) {
  //console.log(event);
  //let imageContainer = document.getElementById("motd-icon");
  // Create a new input element
  const uploadInput = document.createElement('input');
  uploadInput.type = 'file';

  // Add event listener to handle file selection
  uploadInput.addEventListener('change', function(event) {
    const file = event.target.files[0];
    // Handle the file upload or further processing here
    
    // Create a FileReader object
    const reader = new FileReader();
    let backgroundCtx = backgroundCanvas.getContext("2d");
    backgroundCtx.clearRect(0, 0, backgroundCtx.canvas.width, backgroundCtx.canvas.height);

    // Set up a load event listener on the FileReader
    reader.addEventListener('load', function() {
      backgroundType = 1;
      
      let customGradientsOpened = document.getElementById("button-toggle-custom-gradient");
      if(customGradientsOpened.checked) {
        let customGradientBox = document.getElementById("custom-gradient-box");
        customGradientBox.classList.remove("expanded");
        customGradientsOpened.checked = false;
      }
      
      // Update the image source with the uploaded image
      var img = new Image();
      img.src = reader.result;
      img.onload = function () {
        backgroundCtx.save();
        //backgroundCtx.scale(1,1);
        backgroundCtx.drawImage(img,0,0,img.width,img.height,0,0,20,20);
        backgroundCtx.restore();
        //console.log(`Uploaded custom image: ${file.name}`,img.width,img.height);
        updateSkin(true);
      };
    });

    // Read the uploaded file as a data URL
    reader.readAsDataURL(file);
  });

  // Append the input element to the image container
  document.body.appendChild(uploadInput);

  // Trigger a click event on the input element
  uploadInput.click();
  
  document.body.removeChild(uploadInput);
}
let customIcon;
let iconX = 1, iconY = 1;
function uploadCustomIcon(event) {
  //console.log(event);
  //let imageContainer = document.getElementById("motd-icon");
  // Create a new input element
  const uploadInput = document.createElement('input');
  uploadInput.type = 'file';

  // Add event listener to handle file selection
  uploadInput.addEventListener('change', function(event) {
    const file = event.target.files[0];
    // Handle the file upload or further processing here
    
    // Create a FileReader object
    const reader = new FileReader();
    let iconCanvas = document.getElementById("icon-canvas");
    let iconCanvasContext = iconCanvas.getContext("2d");

    iconCanvasContext.clearRect(0, 0, iconCanvasContext.canvas.width, iconCanvasContext.canvas.height);

    // Set up a load event listener on the FileReader
    reader.addEventListener('load', function() {
      // Update the image source with the uploaded image
      var img = new Image();
      img.src = reader.result;
      img.onload = function () {
        let customIconBox = document.getElementById("custom-icon-box");
        customIconBox.classList.add("expanded");
        iconCanvas.width = img.width;
        iconCanvas.height = img.height;
        iconCanvasContext.drawImage(img,0,0);
        customIcon = img;
        //backgroundCtx.save();
        //backgroundCtx.scale(1,1);
        //backgroundCtx.drawImage(img,0,0,img.width,img.height,0,0,20,20);
        //backgroundCtx.restore();
        //console.log(`Uploaded custom image: ${file.name}`,img.width,img.height);
        updateRankImage();
      };
    });

    // Read the uploaded file as a data URL
    reader.readAsDataURL(file);
  });

  // Append the input element to the image container
  document.body.appendChild(uploadInput);

  // Trigger a click event on the input element
  uploadInput.click();
  
  document.body.removeChild(uploadInput);
}
function removeCustomIcon() {
  iconX = 1;
  iconY = 1;
  customIcon = undefined;
  let customIconBox = document.getElementById("custom-icon-box");
  customIconBox.classList.remove("expanded");
  let customIconBoxButton = document.getElementById("button-upload-custom-icon");
  customIconBoxButton.checked = false;
}
function loadFonts() {
  let fontsTable = document.getElementById('fonts-table');
  if(fontsTable) {
    let s = "";
    let i = 1;
    for(let fontType of Object.keys(fonts)) {
      let fontData = fonts[fontType];
      s += `<div class="text-type"><div class="font-name-type ${(i % 2 === 0?"even":"odd")}">${i}. ${fontData.name}</div> <textarea readonly `+
        `id="${fontType}-box" class="fontsBoxes options" type="text" `+
        `checked id="${fontType}-option" onclick="copyTextToClipboard(this.textContent);"></textarea><label for="${fontType}-option" `+
        `></label><br></div>`
      fontData.processed = {};
      if(fontData.data && fontData.data.tosearch && fontData.data.toreplace &&
        fontData.data.tosearch.length == fontData.data.toreplace.length) {
          for (let i = 0; i < fontData.data.tosearch.length; i++) {
            fontData.processed[fontData.data.tosearch[i]] = fontData.data.toreplace[i];
          }
      }
      i++;
    }
    fontsTable.innerHTML = s;
  }
}
let times = 0;
function loadCounter() {
 let href = window.location.href;
 if(!href.includes(atob("YWxvbnNvYWxpYWdhLmdpdGh1Yi5pbw=="))) return;
 let link = atob("aHR0cHM6Ly9hbG9uc29hcGkuZGlzY2xvdWQuYXBwL2NvdW50ZXI/c2l0ZT08c2l0ZT4ma2V5PTxrZXk+")
  .replace(/<site>/g,"rank-textures").replace(/<key>/g,"KEY-A");
 let counter = document.getElementById("visitor-counter");
 //console.log(link)
 if(counter) {
   $.ajax({
     url: link,
     type: "GET", /* or type:"GET" or type:"PUT" */
     dataType: "json",
     data: {
     },
     success: function (result) {
       if(isNaN(result))
         document.getElementById("counter-amount").innerHTML = "Click to return!";
       else document.getElementById("counter-amount").innerHTML = `Visits: ${result}`;
     },
     error: function (e) {
       times++;
       document.getElementById("counter-amount").innerHTML = "Click to return!";
       if(times <= 1) {
        setTimeout(()=>{
          loadCounter();
        },1000*10);
       }
     }
   });
 }
}
function updateOutput(event) {
  //console.log(event)
  let inputText = document.getElementById("inputText");
  if(inputText) {
    //console.log(`Input: ${inputText.value}`)
    let theText;
    if(!inputText.value || inputText.value.length === 0) theText = "Type your text above"
    else theText = inputText.value;
    for(let identifier of Object.keys(fonts)) {
      let toUpdate = document.getElementById(`${identifier}-box`)
      if(toUpdate) {
        let fontData = fonts[identifier];
        let toModify = theText;
        let toUse = "";
        if(typeof fontData.before != "undefined") {
          toModify = fontData.before(toModify);
        }
        let processed = fontData.processed;
        for (let i = 0; i < toModify.length; i++) {
          toUse += processed[toModify[i]] || toModify[i];
        }
        if(typeof fontData.after != "undefined") {
          toUse = fontData.after(toUse);
        }
        toUpdate.innerText = toUse;
      }
    }
  }
}
if (history.scrollRestoration) {
  history.scrollRestoration = 'manual';
} else {
  window.onbeforeunload = function () {
      window.scrollTo(0, 0);
  }
}
toggleDarkmode();
addListeners();
updateOutput();

//Canvas functions
async function loadImage(url) {
	return new Promise((resolve, reject) => {
		const img = new Image()
		img.crossOrigin = "Anonymous";
		img.src = url
		img.onload = () => {
			resolve(img)
		}
		img.onerror = e => {
			reject(e)
		}
	})
}

async function mergeCanvases(canvases) {
	const canvas = document.createElement("final-canvas");
	canvas.width = canvases[0].width;
	canvas.height = canvases[0].height;

	const ctx = canvas.getContext("2d");
	for (const c of canvases) {
		const imageVersion = new Image();
		await new Promise(r => {
			imageVersion.onload = r, imageVersion.src = c.toDataURL()
		})
		ctx.drawImage(imageVersion, 0, 0)
	}

	return canvas
}
async function drawFailed(ctx) {
	ctx.clearRect(0, 0, 300, 300);
	ctx.drawImage(backdropBuffer, 0, 0, 20, 20);
	ctx.resetTransform();
	ctx.drawImage(failedBuffer, 0, 0, 300, 300);
	ctx.scale(16, 16);
	//ctx.drawImage(shading, 0, 0, 20, 20)
}
function runDelayed() {
  /*
  setTimeout(()=>{
    document.getElementById("button-toggle-custom-gradient").checked = true;
    toggleCustomGradientBox();
  },500);
  */
}
function store(key, value) {
  localStorage.setItem(key, e.value)
}
function loadLocalStorage() {
  return;
  if(localStorage.getItem('local') !== null) {
    document.getElementById('local-input').value = localStorage.getItem('local')
  }
}
//let customIcons = ["bulbasaur","carlman","coin-1","pacman-ghost-blue","pacman-ghost-red","thropy"]
let customIcons = {}
let availableHeights = []
let imagesInCache = new Map();
addDefaultsLocations();
loadLocalStorage();
//loadCustomIcons();
//setTimeout(()=>loadCustomIconsCache(),1500);
function loadCustomIcons() {
  let availableHeightsDiv = document.getElementById("available-heights");
  let map = new Map();
  let selector = document.getElementById("available-icons");
  let html = [];
  for(let name of Object.keys(customIcons)) {
    if(name.length > 0) {
      let data = customIcons[name];
      if(!data) continue;
      if(data.link.length > 0) {
        if(!map.has(data.height)) {
          //map.set(data.height,`<button id="button-height-${data.height}" onclick="console.log('You clicked height of ${data.height}px');" style=""></button><label for="button-height-${data.height}">${data.height}</label>`);
          map.set(data.height,`<button class="button-enabled button-small" id="button-height-${data.height}" class="button-small" style="display: inline;margin: 10px;vertical-align: middle" onclick="toggleHeight('${data.height}');">${data.height}</button>`)
        }
        if(!availableHeights.includes(data.height)) availableHeights.push(data.height);
        data.html = `<img width="50px" onclick="selectCustomImage(event,'${name}');" style="image-rendering: pixelated;height: 50px;object-fit:contain;" src="${data.link}">`;
        html.push(data.html);
      }
    }
    // let img = document.createElement("img");
    // img.width = `50px`;
    // img.src = `./custom-icons/${name}.png`
    // selector.appendChild(img);
    // img.addEventListener("", function () {
    //   console.log(`You clicked ${name}!`);
    // });
  }
  availableHeightsDiv.innerHTML = [...map.values()].sort().join("<span> </span>");
  selector.innerHTML = html.join("<span> </span>");
}
async function loadCustomIconsCache() {
  let total = Object.keys(customIcons).filter(l=>l.length >= 1).length;
  console.log(`Attempting to load ${total} icons in cache!`);
  for(let name of Object.keys(customIcons)) {
    if(name.length > 0) {
      let data = customIcons[name];
      if(!data) continue;
      if(data.link.length > 0) {
        let canvas = await getImageCanvas(data.link);
        imagesInCache.set(name,canvas);
      }
    }
  }
  console.log(`Successfully loaded ${imagesInCache.size}/${total}!`);
}
function toggleHeight(height) {
  if(typeof height !== "undefined" && height != null) {
    //console.log(`Clicked height ${height}`);
    let clickedButton = document.getElementById(`button-height-${height}`);
    if(clickedButton) clickedButton.classList.toggle("button-enabled");
  }
  let enabledHeights = []
  for(let availableHeight of availableHeights) {
    let heightButton = document.getElementById(`button-height-${availableHeight}`);
    if(heightButton.classList.contains("button-enabled")) {
      enabledHeights.push(parseInt(heightButton.innerHTML));
    }
  }
  let toDisplay = []
  for(let name of Object.keys(customIcons)) {
    if(name.length > 0) {
      let data = customIcons[name];
      if(!data) continue;
      if(data.link.length > 0) {
        if(enabledHeights.includes(data.height)) {
          toDisplay.push(data.html);
        }
      }
    }
  }
  //console.log(`Displaying heights: ${enabledHeights.join(", ")} | Total icons: ${toDisplay.length}`);
  let selector = document.getElementById("available-icons");
  selector.innerHTML = toDisplay.join("<span> </span>");
}
function getMinMax(bound1,bound2) {
  return [Math.min(bound1,bound2),Math.max(bound1,bound2)];
}
let hideBulkProgressTimeout;
var bulkProgressElement = document.getElementById("bulk-progress-snackbar");
var bulkTextElement = document.getElementById("bulk-text");
async function showProgress() {
  //console.log(`Showing progress snackbar..`);
  if(hideBulkProgressTimeout) {
    clearTimeout(hideBulkProgressTimeout);
    //bulkProgressElement.classList.remove("show");
  }
  //this is where the class name will be added & removed to activate the css
  bulkProgressElement.classList.add("show");
}
function hideProgress() {
  //console.log(`Scheduling hide progress snackbar..`);
  hideBulkProgressTimeout = setTimeout(()=> {
    bulkProgressElement.classList.remove("show");
    bulkProgressElement.classList.add("hide");
    setTimeout(()=> bulkProgressElement.classList.remove("hide"), 450);
    hideBulkProgressTimeout = undefined;
  },2500);
}
function stopBulk() {
  if(!isBulkCreating) {
    console.log(`No bulk in progress.. What are you trying to do?`);
    return;
  }
  stopBulkCreation = true;
  console.log(`Attempting to stop bulk creation..`);
}
function setBulkProgressHTML(html) {
  bulkTextElement.innerText = html;
}
function wait(milliseconds){
  return new Promise(resolve => {
      setTimeout(resolve, milliseconds);
  });
}
let isBulkCreating = false;
//let bulkColors = [];
let currentBulkData = undefined;
let lastestBulkZip;

function downloadLastestBulk() {
  if(!lastestBulkZip) {
    alertError(`❌ Generate bulk first!`);
    return;
  }
  alertError(`✅ Downloading latest generation!`);
  saveAs(lastestBulkZip, "download-ranks.zip");
}
function endsWithNumber(str) {
  return /\d$/.test(str);
}
function duplicateElements(colors, times) {
  return colors.flatMap(color => Array(times).fill(color));
}
async function getImageCanvas(url) {
  let icon = await loadImage(url);
  let iconCanvas = document.createElement(`canvas`);
  let iconCanvasContext = iconCanvas.getContext("2d");
  iconCanvasContext.clearRect(0, 0, iconCanvasContext.canvas.width, iconCanvasContext.canvas.height);
  iconCanvas.width = icon.width;
  iconCanvas.height = icon.height;
  iconCanvasContext.drawImage(icon,0,0);
  return iconCanvas;
}
async function selectCustomImage(event,name) {
  console.log(event);
  if(event.ctrlKey) {
    copyTextToClipboard(name);
    alertCopied();
    return;
  }
  let data = customIcons[name];
  if(!data) return;
  let link = data.link
  document.getElementById('available-custom-icons-div').style.display = 'none';
  let icon = await loadImage(link);
  //let icon = await loadImage(`./custom-icons/${name}.png`);
  let iconCanvas = document.getElementById("icon-canvas");
  let iconCanvasContext = iconCanvas.getContext("2d");
  iconCanvasContext.clearRect(0, 0, iconCanvasContext.canvas.width, iconCanvasContext.canvas.height);

  let customIconBox = document.getElementById("custom-icon-box");
  customIconBox.classList.add("expanded");
  iconCanvas.width = icon.width;
  iconCanvas.height = icon.height;
  iconCanvasContext.drawImage(icon,0,0);

  //let tempImage = document.createElement('img');
  //tempImage.src = iconCanvas.toDataURL('image/jpeg', 1.0);

  customIcon = icon;
  updateRankImage();
}
async function selectCustomImage2(name) {
  document.getElementById('available-custom-icons-div').style.display = 'none';
  var img = new Image();
  img.src = `./custom-icons/${name}.png`;
  let iconCanvas = document.getElementById("icon-canvas");
  let iconCanvasContext = iconCanvas.getContext("2d");
  iconCanvasContext.clearRect(0, 0, iconCanvasContext.canvas.width, iconCanvasContext.canvas.height);
  img.onload = async function () {
    let customIconBox = document.getElementById("custom-icon-box");
    customIconBox.classList.add("expanded");
    iconCanvas.width = img.width;
    iconCanvas.height = img.height;
    iconCanvasContext.drawImage(img,0,0);
    //img.crossOrigin = "Anonymous";
    let tempImage = document.createElement('img');
    //tempImage.crossOrigin = 'anonymous'
    //tempImage.src = iconCanvas.toDataURL('image/jpeg', 1.0);
    await new Promise(r => {
			tempImage.onload = r, tempImage.src = iconCanvas.toDataURL('image/jpeg', 1.0);
      updateRankImage();
		})
    customIcon = tempImage;
    //backgroundCtx.save();
    //backgroundCtx.scale(1,1);
    //backgroundCtx.drawImage(img,0,0,img.width,img.height,0,0,20,20);
    //backgroundCtx.restore();
    //console.log(`Uploaded custom image: ${file.name}`,img.width,img.height);
    updateRankImage();
  };
}
function openSelectorCustomIcon(event) {
  let selector = document.getElementById("available-custom-icons-div");
  selector.style.display = "block";
}
let savedNewSection;
let enterChar = `
`;
function updateTabPreview() {
  const formatInput = document.getElementById('tab-preview-format-input').value;
  const nameFormatInput = document.getElementById('tab-name-format-input').value;
  let pingImage = `<img style="vertical-align: middle" height="20px" src="https://i.imgur.com/0InefO6.png">`
  let nameFormatNew = `<p style="text-align: center;height: min-content !important;width: max-content !important;font-size: 20px;padding: 5px 10px 5px 15px;display: inline-block;color: white;height: 20px;background-color: rgba(255, 255, 255, 0.20);">${nameFormatInput.replace(/{PING}/g,pingImage)}</p>`;
  const usernameInput = document.getElementById('tab-preview-username-input').value;
  const convertedText = parseMinecraftText(formatInput.replace(/{PLAYER}/g,nameFormatNew).replace(/{USERNAME}/g,usernameInput)
    .replace(/\n/g, '<br>'),"tab","top");
  //console.log(convertedText);
  document.getElementById('tab-text').innerHTML = convertedText;
  
  updatePreviews();
}
let nameTagUsername = "AlonsoAliaga";
function updateNameTagUsername() {
  const usernameInput = document.getElementById('nametag-preview-username-input').value.replace(/[^\w]/g, "");
  let username = usernameInput.length <= 3 ? `AlonsoAliaga` : usernameInput;
  //let skinRender = new SkinRender({/* options */}, document.getElementById("nametag-skin-container"));
  //skinRender.render(username);
  document.getElementById("nametag-skin").src = `https://mc-heads.net/player/${username}/`;
}
function updateNameTagPreview() {
  const usernameInput = document.getElementById('nametag-preview-username-input').value;
  const formatInput = document.getElementById('nametag-preview-format-input').value;
  const convertedText = parseMinecraftText(formatInput.replace(/{USERNAME}/g,usernameInput).replace(/\n/g, '<br>'),"nametag");
  document.getElementById('nametag-text').innerHTML = convertedText;
  updateNameTagUsername()
  updatePreviews();
}
function updateChatPreview() {
  const usernameInput = document.getElementById('chat-preview-username-input').value;
  const messageInput = document.getElementById('chat-preview-message-input').value;
  const formatInput = document.getElementById('chat-preview-format-input').value;
  const convertedText = parseMinecraftText(formatInput.replace(/{USERNAME}/g,usernameInput).replace(/{MESSAGE}/g,messageInput)
    .replace(/\n/g, '<br>'),"chat","text-top");
  document.getElementById('chat-text').innerHTML = convertedText;
  
  updatePreviews();
}
function updateLorePreview() {
  const inputText = document.getElementById('lore-input').value;
  const convertedText = parseMinecraftText(inputText.replace(/\n/g, '<br>').replace(/ /g,"⠀"),"lore");
  document.getElementById('lore-text').innerHTML = convertedText;
  
  updatePreviews();
}
function toggleNameTagPreview(event) {
  let container = document.getElementById("nametag-container");
  let optionsBox = document.getElementById("nametag-preview-box");
  if(event.checked) {
    if(container.style.left.length == 0 || container.style.top.length == 0) {
      container.style.left = "15px";
      container.style.top = "80px";
    }else{
      let x = parseInt(container.style.left.replace(/px/g,""));
      let y = parseInt(container.style.top.replace(/px/g,""));
      if(x > (window.innerWidth - 50) || x < - 300) {
        container.style.left = "15px";
      }
      if(y > (window.innerHeight - 50) || y < -300) {
        container.style.top = "15px";
      }
    }
    container.style.display = "inline";
    optionsBox.classList.add("expanded");
  }else{
    container.style.display = "none";
    optionsBox.classList.remove("expanded");
  }
  updatePreviews();
}
function toggleChatPreview(event) {
  let container = document.getElementById("chat-container");
  let optionsBox = document.getElementById("chat-preview-box");
  if(event.checked) {
    if(container.style.left.length == 0 || container.style.top.length == 0) {
      container.style.left = "15px";
      container.style.top = "80px";
    }else{
      let x = parseInt(container.style.left.replace(/px/g,""));
      let y = parseInt(container.style.top.replace(/px/g,""));
      if(x > (window.innerWidth - 50) || x < - 300) {
        container.style.left = "15px";
      }
      if(y > (window.innerHeight - 50) || y < -300) {
        container.style.top = "15px";
      }
    }
    container.style.display = "inline-block";
    optionsBox.classList.add("expanded");
  }else{
    container.style.display = "none";
    optionsBox.classList.remove("expanded");
  }
  updatePreviews();
}
function toggleTabPreview(event) {
  let container = document.getElementById("tab-container");
  let optionsBox = document.getElementById("tab-preview-box");
  if(event.checked) {
    if(container.style.left.length == 0 || container.style.top.length == 0) {
      container.style.left = "15px";
      container.style.top = "80px";
    }else{
      let x = parseInt(container.style.left.replace(/px/g,""));
      let y = parseInt(container.style.top.replace(/px/g,""));
      if(x > (window.innerWidth - 50) || x < - 300) {
        container.style.left = "15px";
      }
      if(y > (window.innerHeight - 50) || y < -300) {
        container.style.top = "15px";
      }
    }
    container.style.display = "inline-block";
    optionsBox.classList.add("expanded");
  }else{
    container.style.display = "none";
    optionsBox.classList.remove("expanded");
  }
  updatePreviews();
}
function toggleLorePreview(event) {
  let container = document.getElementById("lore-container");
  let optionsBox = document.getElementById("lore-preview-box");
  if(event.checked) {
    if(container.style.left.length == 0 || container.style.top.length == 0) {
      container.style.left = "15px";
      container.style.top = "15px";
    }else{
      let x = parseInt(container.style.left.replace(/px/g,""));
      let y = parseInt(container.style.top.replace(/px/g,""));
      if(x > (window.innerWidth - 50) || x < - 300) {
        container.style.left = "15px";
      }
      if(y > (window.innerHeight - 50) || y < -300) {
        container.style.top = "15px";
      }
    }
    container.style.display = "inline-block";
    optionsBox.classList.add("expanded");
  }else{
    container.style.display = "none";
    optionsBox.classList.remove("expanded");
  }
  updatePreviews();
}
function parseMinecraftText2(inputText) {
    // Replace newline characters with <br>
    const textWithLineBreaks = inputText.replace(/ /g,"⠀").replace(/\n/g, '<br>');

    // Replace {IMAGE} with canvas HTML
    const textWithCanvas = textWithLineBreaks.replace(/{IMAGE}/g, '<canvas class="cloned-canvas" id="copy-canvas" width="20" height="8"></canvas>');
    // Replace hex color codes in the format &#rrggbb with Minecraft color classes
    const minecraftText = textWithCanvas.replace(/&#([0-9a-fA-F]{6})/g, (match, color) => {
        return `<span style="color: #${color.replace(/&#/g,"")};">`;
    });
    // Replace Minecraft color codes in the format &0, &1, &2, etc.
    const formattedText = minecraftText.replace(/&([0-9a-fA-Fklmnor])/g, (match, code) => {
        if (code.toLowerCase() === 'r') {
            // Reset color
            return '</span>';
        } else if (code.toLowerCase() === 'l') {
            // Bold
            return '<span style="font-weight: bold;">';
        } else if (code.toLowerCase() === 'n') {
            // Underline
            return '<span style="text-decoration: underline;">';
        } else if (code.toLowerCase() === 'o') {
            // Italic
            return '<span style="font-style: italic;">';
        } else {
            // Minecraft color codes
            return `<span class="mc-${code.toLowerCase()}">`;
        }
    });
    return formattedText;
}
function parseMinecraftText(inputText,type,align) {
    // Replace newline characters with <br>
    const textWithLineBreaks = inputText//.replace(/\n/g, '<br>');

    // Replace {IMAGE} with canvas HTML
    const textWithCanvas = textWithLineBreaks.replace(/{IMAGE}/g, `<canvas style="text-align: left;display:inline;vertical-align: ${align||"middle"};" id="copy-canvas-${type}" width="20" height="8"></canvas>`);
    // Replace hex color codes in the format &#rrggbb with Minecraft color classes
    const minecraftText = textWithCanvas.replace(/&#([0-9a-fA-F]{6})/g, (match, color) => {
        return `<span style="text-align: left;display:inline;vertical-align: middle;color: #${color.replace(/&#/g,"")};">`;
    });
    // Replace Minecraft color codes in the format &0, &1, &2, etc.
    const formattedText = minecraftText.replace(/&([0-9a-fA-Fklmnor])/g, (match, code) => {
        if (code.toLowerCase() === 'r') {
            // Reset color
            return '</span>';
        } else if (code.toLowerCase() === 'l') {
            // Bold
            return '<span style="text-align: left;display:inline;vertical-align: middle;font-weight: bold;">';
        } else if (code.toLowerCase() === 'n') {
            // Underline
            return '<span style="text-align: left;display:inline;vertical-align: middle;text-decoration: underline;">';
        } else if (code.toLowerCase() === 'o') {
            // Italic
            return '<span style="text-align: left;display:inline;vertical-align: middle;font-style: italic;">';
        } else {
            // Minecraft color codes
            return `<span style="text-align: left;display:inline;vertical-align: middle;" class="mc-${code.toLowerCase()}">`;
        }
    });
    return formattedText;
}
/*
function openW() {
  const newWindow = window.open('./popup.html', '_blank', 'width=400,height=300');
  // Listen for a message from the new window
  // Send data to the new window
  let data = 
  newWindow.postMessage('Hello from the main page!', JSON.stringify(data));
}
*/
/*
window.addEventListener('message', function(event) {
    // Handle the data received from the new window
    console.log(event)
    if(event.data && event.data.startsWith("setImmediate")) return;
    let data;
    try{
      data = JSON.parse(event.data);
    }catch(e) {
      console.log(`Error parsing incoming message: ${e.message}`);
      console.log("Original message:");
      console.log(event.data);
      return;
    }
    console.log(`Message received: ${event.data}`)
});
*/
updateLorePreview();
updateChatPreview();
updateTabPreview();
updateNameTagPreview();
updateNewFont();
let adFeatures = ["button-lore-preview-div"]
function lockElementWithMessage(className,message,iconUrl='https://raw.githubusercontent.com/AlonsoAliaga/version-generator/main/assets/images/lock-icon.png') {
  let elements = adFeatures.map(n=>document.getElementById(n)).filter(Boolean);
  for(let element of elements) {
    element.classList.add(className);
    const ov = document.createElement('div');
    ov.className = 'overlay';
    ov.innerHTML = `<img src="${iconUrl}"><span>${message}</span>`;
    element.append(ov);
  }
}
function lockTheElementWithMessage(element,className,message,iconUrl='https://raw.githubusercontent.com/AlonsoAliaga/version-generator/main/assets/images/lock-icon.png') {
  element = document.getElementById(element);
  if(element) {
    removeInlineOnclicksFromAllChildren(element);
    element.classList.add(className);
    const ov = document.createElement('div');
    ov.className = 'overlay';
    ov.innerHTML = `<img src="${iconUrl}"><span>${message}</span>`;
    element.append(ov);
  }
}
function processAds() {
  //lockElementWithMessage("adlocked",`Disable AdBlock for this shortcut!`)
  //lockTheElementWithMessage("button-toggle-custom-gradient-div","adlockedt",`Disable AdBlock to access custom gradients!`)
  //lockTheElementWithMessage("button-lore-preview-div","adlocked",`Disable AdBlock to access lore preview!`)
  lockTheElementWithMessage("button-chat-preview-div","adlocked",`Disable AdBlock to access chat preview!`)
  //lockTheElementWithMessage("button-tab-preview-div","adlocked",`Disable AdBlock to access tab preview!`)
  lockTheElementWithMessage("button-nametag-preview-div","adlocked",`Disable AdBlock to access nametag preview!`)
  lockTheElementWithMessage("shadow-location-div","adlockedhalf",`Disable AdBlock to select the position of the shadow!`)
  document.querySelectorAll(".toremoverightemoji").forEach((e,i)=>e.classList.remove("right-emoji"));
}
document.addEventListener("DOMContentLoaded", () => {
  loadCounter();
  checkSite(window);
  updateRankImage();
});
function removeInlineOnclicksFromAllChildren(parentElement) {
    if (!(parentElement instanceof HTMLElement)) {
        //console.error("Invalid input: parentElement must be an HTMLElement.");
        return;
    }
    const allDescendantElements = parentElement.querySelectorAll('*');
    allDescendantElements.forEach(element => {
        if (element.hasAttribute('onclick')) {
            element.removeAttribute('onclick');
            //console.log(`Removed inline 'onclick' from: <${element.tagName}> (ID: ${element.id || 'N/A'}, Class: ${element.className || 'N/A'})`);
        }
    });
    if (parentElement.hasAttribute('onclick')) {
        parentElement.removeAttribute('onclick');
        //console.log(`Removed inline 'onclick' from parent: <${parentElement.tagName}> (ID: ${parentElement.id || 'N/A'}, Class: ${parentElement.className || 'N/A'})`);
    }
    //console.log(`Finished checking all elements within: <${parentElement.tagName}> (ID: ${parentElement.id || 'N/A'})`);
}
function nextLore(event) {
  event.preventDefault();
  let loresKeys = Object.keys(lores);
  currentLore = currentLore + (event.type == "contextmenu" ? -1 : 1);
  if(currentLore < 0) currentLore = loresKeys.length - 1;
  else if(currentLore >= loresKeys.length) currentLore = 0;
  let loreData = lores[loresKeys[currentLore]];
  document.getElementById("lore-input").textContent = loreData.join("\r\n")
  updateLorePreview();
}
let textAnimationElement = document.getElementById("text-animation");
let textAnimationValue = true;
setInterval(()=>{
  if(textAnimationValue) {
    textAnimationValue = false;
    textAnimationElement.textContent = "_"
  }else{
    textAnimationValue = true;
    textAnimationElement.textContent = " "
  }
},500)
const importInput = document.getElementById('font-import-input');
const importErrorDebug = document.getElementById('import-error-debug');
const MAX_FONT_HEIGHT = 30;
const MAX_FONT_WIDTH = 30;
let importErrorTimeout;
function importData() {
  clearTimeout(importErrorTimeout); // Clear any existing timeout
  importErrorDebug.style.display = 'none'; // Hide previous error
  try {
      let currentFontKey;
      const importedString = importInput.value;
      const parsedData = JSON.parse(importedString);
      const fontKey = Object.keys(parsedData)[0];
      if (!fontKey || !parsedData[fontKey] || typeof parsedData[fontKey].Height === 'undefined' || typeof parsedData[fontKey].Width === 'undefined') {
          throw new Error("Invalid font data structure: Missing font key, Height, or Width.");
      }
      currentFontKey = fontKey; // Set the current font key
      // Deep copy to ensure no reference issues
      const importedFontData = JSON.parse(JSON.stringify(parsedData));
      // Initialize CharacterWidths as an empty object for new derived widths
      let fontData = {
        Disabled: importedFontData[currentFontKey].Disabled,
        Tier: -999,
        Name: `${importedFontData[currentFontKey].Name} 👑`,
        Height: Math.min(MAX_FONT_HEIGHT, importedFontData[currentFontKey].Height), // Clamp imported height
        Width: Math.min(MAX_FONT_WIDTH, importedFontData[currentFontKey].Width),   // Clamp imported width
      };
      if(typeof availableFonts[currentFontKey] != "undefined") {
        let current = availableFonts[currentFontKey];
        if(current.Tier != -999) {
          throw new Error("You cannot import a font with this name.");
        }
      }
      for(let char of Object.keys(importedFontData[currentFontKey])) {
        if(char.length > 1) continue;
        fontData[char] = importedFontData[currentFontKey][char];
      }
      availableFonts = {
        [currentFontKey]: fontData,
        ...availableFonts
      }
      //availableFonts[currentFontKey] = fontData;
      addDefaultsFonts();
      importInput.value = ''; // Clear export output after import
      importErrorDebug.innerHTML = `Successfully imported font!<br><br>Reminder: Imported font data must be generated with our <a href="https://alonsoaliaga/font-creator" rel="noopener" target="_blank">Font Creator</a> tool.`;
      importErrorDebug.style.display = 'block';
      importErrorTimeout = setTimeout(() => {
          importErrorDebug.style.display = 'none';
      }, 15000); // Hide after 10 seconds
      let empty = {};
      empty[currentFontKey] = fontData;
      let updatedRankPreview = updateRankImagePreview(currentFontKey);
      if(updatedRankPreview) {
        fontData.Preview = rankCanvasPreview.toDataURL();
      }
      //console.log(fontData)
      checkFont(empty);
  } catch (error) {
      //console.error("Error importing font data:", error);
      importErrorDebug.innerHTML = `Import Error: ${error.message}<br><br>Reminder: Imported font data must be generated with our <a href="https://alonsoaliaga/font-creator" rel="noopener" target="_blank">Font Creator</a> tool.`;
      importErrorDebug.style.display = 'block';
      importErrorTimeout = setTimeout(() => {
          importErrorDebug.style.display = 'none';
      }, 15000); // Hide after 10 seconds
  }
}
async function checkFont(data) {
  fetch(atob("aHR0cHM6Ly9hbG9uc29hcGkuZGlzY2xvdWQuYXBwL2NoZWNrLWZvbnQ="), {
      method: 'POST',
      headers: {
        'Access-Control-Allow-Origin': "no-cors",
        'Content-Type': 'application/json',
      },
      body: JSON.stringify(data),
  }).then(response=>{
    //console.log(response)
  }).catch(error=>{
    console.log(error)
  });
}